
SWO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020b8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080022b0  080022b0  000122b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800233c  0800233c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800233c  0800233c  0001233c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002344  08002344  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002344  08002344  00012344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002348  08002348  00012348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800234c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  080023bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080023bc  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000771c  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017aa  00000000  00000000  000277ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a0  00000000  00000000  00028f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004d8  00000000  00000000  00029508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027144  00000000  00000000  000299e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006a5d  00000000  00000000  00050b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec757  00000000  00000000  00057581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00143cd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001aa0  00000000  00000000  00143d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	08002298 	.word	0x08002298

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	08002298 	.word	0x08002298

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	; 0x28
 8000534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <MX_GPIO_Init+0xa4>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a22      	ldr	r2, [pc, #136]	; (80005d4 <MX_GPIO_Init+0xa4>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <MX_GPIO_Init+0xa4>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <MX_GPIO_Init+0xa4>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a1c      	ldr	r2, [pc, #112]	; (80005d4 <MX_GPIO_Init+0xa4>)
 8000564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <MX_GPIO_Init+0xa4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <MX_GPIO_Init+0xa4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a16      	ldr	r2, [pc, #88]	; (80005d4 <MX_GPIO_Init+0xa4>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_GPIO_Init+0xa4>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_GPIO_Init+0xa4>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <MX_GPIO_Init+0xa4>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_GPIO_Init+0xa4>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DS1_Pin|DS0_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2103      	movs	r1, #3
 80005aa:	480b      	ldr	r0, [pc, #44]	; (80005d8 <MX_GPIO_Init+0xa8>)
 80005ac:	f000 fd02 	bl	8000fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DS1_Pin|DS0_Pin;
 80005b0:	2303      	movs	r3, #3
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	4804      	ldr	r0, [pc, #16]	; (80005d8 <MX_GPIO_Init+0xa8>)
 80005c8:	f000 fb48 	bl	8000c5c <HAL_GPIO_Init>

}
 80005cc:	bf00      	nop
 80005ce:	3728      	adds	r7, #40	; 0x28
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020400 	.word	0x40020400

080005dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d013      	beq.n	800061c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000604:	e000      	b.n	8000608 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000606:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000608:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000612:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b086      	sub	sp, #24
 800062e:	af00      	add	r7, sp, #0
 8000630:	60f8      	str	r0, [r7, #12]
 8000632:	60b9      	str	r1, [r7, #8]
 8000634:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e009      	b.n	8000654 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	60ba      	str	r2, [r7, #8]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ffc7 	bl	80005dc <ITM_SendChar>
	for(i = 0; i < len; i++)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3301      	adds	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	dbf1      	blt.n	8000640 <_write+0x16>

	return len;
 800065c:	687b      	ldr	r3, [r7, #4]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f000 f98f 	bl	800098e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f000 f80e 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f7ff ff5c 	bl	8000530 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(200);
 8000678:	20c8      	movs	r0, #200	; 0xc8
 800067a:	f000 f9e5 	bl	8000a48 <HAL_Delay>
	  printf("csy swo hello world.\n");
 800067e:	4803      	ldr	r0, [pc, #12]	; (800068c <main+0x24>)
 8000680:	f001 f9b2 	bl	80019e8 <puts>
	  HAL_Delay(200);
 8000684:	20c8      	movs	r0, #200	; 0xc8
 8000686:	f000 f9df 	bl	8000a48 <HAL_Delay>
	  HAL_Delay(200);
 800068a:	e7f5      	b.n	8000678 <main+0x10>
 800068c:	080022b0 	.word	0x080022b0

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2234      	movs	r2, #52	; 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 f92c 	bl	80018fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b4:	f000 fc98 	bl	8000fe8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	4b27      	ldr	r3, [pc, #156]	; (8000758 <SystemClock_Config+0xc8>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a26      	ldr	r2, [pc, #152]	; (8000758 <SystemClock_Config+0xc8>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b24      	ldr	r3, [pc, #144]	; (8000758 <SystemClock_Config+0xc8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <SystemClock_Config+0xcc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <SystemClock_Config+0xcc>)
 80006d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <SystemClock_Config+0xcc>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 80006fc:	230f      	movs	r3, #15
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000700:	23d8      	movs	r3, #216	; 0xd8
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fc79 	bl	8001008 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800071c:	f000 f820 	bl	8000760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000730:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2105      	movs	r1, #5
 800073e:	4618      	mov	r0, r3
 8000740:	f000 ff10 	bl	8001564 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800074a:	f000 f809 	bl	8000760 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_MspInit+0x44>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <HAL_MspInit+0x44>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <HAL_MspInit+0x44>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_MspInit+0x44>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_MspInit+0x44>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000794:	6453      	str	r3, [r2, #68]	; 0x44
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_MspInit+0x44>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler+0x4>

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler+0x4>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000800:	f000 f902 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	e00a      	b.n	8000830 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800081a:	f3af 8000 	nop.w
 800081e:	4601      	mov	r1, r0
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	60ba      	str	r2, [r7, #8]
 8000826:	b2ca      	uxtb	r2, r1
 8000828:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	3301      	adds	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697a      	ldr	r2, [r7, #20]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	429a      	cmp	r2, r3
 8000836:	dbf0      	blt.n	800081a <_read+0x12>
	}

return len;
 8000838:	687b      	ldr	r3, [r7, #4]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
	return -1;
 800084a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800084e:	4618      	mov	r0, r3
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
 8000862:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800086a:	605a      	str	r2, [r3, #4]
	return 0;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <_isatty>:

int _isatty(int file)
{
 800087a:	b480      	push	{r7}
 800087c:	b083      	sub	sp, #12
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
	return 1;
 8000882:	2301      	movs	r3, #1
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
	return 0;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008b4:	4a14      	ldr	r2, [pc, #80]	; (8000908 <_sbrk+0x5c>)
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <_sbrk+0x60>)
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <_sbrk+0x64>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <_sbrk+0x64>)
 80008ca:	4a12      	ldr	r2, [pc, #72]	; (8000914 <_sbrk+0x68>)
 80008cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <_sbrk+0x64>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d207      	bcs.n	80008ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008dc:	f000 ffe4 	bl	80018a8 <__errno>
 80008e0:	4603      	mov	r3, r0
 80008e2:	220c      	movs	r2, #12
 80008e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	e009      	b.n	8000900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <_sbrk+0x64>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	4a05      	ldr	r2, [pc, #20]	; (8000910 <_sbrk+0x64>)
 80008fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008fe:	68fb      	ldr	r3, [r7, #12]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20080000 	.word	0x20080000
 800090c:	00000400 	.word	0x00000400
 8000910:	2000008c 	.word	0x2000008c
 8000914:	200000b0 	.word	0x200000b0

08000918 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <SystemInit+0x20>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <SystemInit+0x20>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800093c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000974 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000940:	480d      	ldr	r0, [pc, #52]	; (8000978 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000942:	490e      	ldr	r1, [pc, #56]	; (800097c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000944:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000948:	e002      	b.n	8000950 <LoopCopyDataInit>

0800094a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800094c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094e:	3304      	adds	r3, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000954:	d3f9      	bcc.n	800094a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000956:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000958:	4c0b      	ldr	r4, [pc, #44]	; (8000988 <LoopFillZerobss+0x26>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800095c:	e001      	b.n	8000962 <LoopFillZerobss>

0800095e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000960:	3204      	adds	r2, #4

08000962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000964:	d3fb      	bcc.n	800095e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000966:	f7ff ffd7 	bl	8000918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800096a:	f000 ffa3 	bl	80018b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800096e:	f7ff fe7b 	bl	8000668 <main>
  bx  lr    
 8000972:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000974:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800097c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000980:	0800234c 	.word	0x0800234c
  ldr r2, =_sbss
 8000984:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000988:	200000ac 	.word	0x200000ac

0800098c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC_IRQHandler>

0800098e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000992:	2003      	movs	r0, #3
 8000994:	f000 f92e 	bl	8000bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000998:	2000      	movs	r0, #0
 800099a:	f000 f805 	bl	80009a8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800099e:	f7ff fee5 	bl	800076c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x54>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_InitTick+0x58>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f93b 	bl	8000c42 <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00e      	b.n	80009f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d80a      	bhi.n	80009f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f000 f911 	bl	8000c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_InitTick+0x5c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x20>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_IncTick+0x24>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <HAL_IncTick+0x24>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000098 	.word	0x20000098

08000a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <HAL_GetTick+0x14>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000098 	.word	0x20000098

08000a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a50:	f7ff ffee 	bl	8000a30 <HAL_GetTick>
 8000a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a60:	d005      	beq.n	8000a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_Delay+0x44>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a6e:	bf00      	nop
 8000a70:	f7ff ffde 	bl	8000a30 <HAL_GetTick>
 8000a74:	4602      	mov	r2, r0
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d8f7      	bhi.n	8000a70 <HAL_Delay+0x28>
  {
  }
}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000008 	.word	0x20000008

08000a90 <__NVIC_SetPriorityGrouping>:
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aba:	4313      	orrs	r3, r2
 8000abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000abe:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	60d3      	str	r3, [r2, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00
 8000ad4:	05fa0000 	.word	0x05fa0000

08000ad8 <__NVIC_GetPriorityGrouping>:
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	f003 0307 	and.w	r3, r3, #7
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_SetPriority>:
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db0a      	blt.n	8000b1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	490c      	ldr	r1, [pc, #48]	; (8000b40 <__NVIC_SetPriority+0x4c>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b1c:	e00a      	b.n	8000b34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4908      	ldr	r1, [pc, #32]	; (8000b44 <__NVIC_SetPriority+0x50>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	440b      	add	r3, r1
 8000b32:	761a      	strb	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <NVIC_EncodePriority>:
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f1c3 0307 	rsb	r3, r3, #7
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	bf28      	it	cs
 8000b66:	2304      	movcs	r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d902      	bls.n	8000b78 <NVIC_EncodePriority+0x30>
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3b03      	subs	r3, #3
 8000b76:	e000      	b.n	8000b7a <NVIC_EncodePriority+0x32>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43da      	mvns	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b90:	f04f 31ff 	mov.w	r1, #4294967295
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43d9      	mvns	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	4313      	orrs	r3, r2
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3724      	adds	r7, #36	; 0x24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <SysTick_Config>:
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc0:	d301      	bcc.n	8000bc6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00f      	b.n	8000be6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <SysTick_Config+0x40>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bce:	210f      	movs	r1, #15
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f7ff ff8e 	bl	8000af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <SysTick_Config+0x40>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SysTick_Config+0x40>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff47 	bl	8000a90 <__NVIC_SetPriorityGrouping>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1c:	f7ff ff5c 	bl	8000ad8 <__NVIC_GetPriorityGrouping>
 8000c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	6978      	ldr	r0, [r7, #20]
 8000c28:	f7ff ff8e 	bl	8000b48 <NVIC_EncodePriority>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff5d 	bl	8000af4 <__NVIC_SetPriority>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffb0 	bl	8000bb0 <SysTick_Config>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	; 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	e175      	b.n	8000f68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f040 8164 	bne.w	8000f62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d00b      	beq.n	8000cba <HAL_GPIO_Init+0x5e>
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d007      	beq.n	8000cba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cae:	2b11      	cmp	r3, #17
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2b12      	cmp	r3, #18
 8000cb8:	d130      	bne.n	8000d1c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	091b      	lsrs	r3, r3, #4
 8000d06:	f003 0201 	and.w	r2, r3, #1
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2203      	movs	r2, #3
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x100>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b12      	cmp	r3, #18
 8000d5a:	d123      	bne.n	8000da4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	220f      	movs	r2, #15
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	08da      	lsrs	r2, r3, #3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3208      	adds	r2, #8
 8000d9e:	69b9      	ldr	r1, [r7, #24]
 8000da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0203 	and.w	r2, r3, #3
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 80be 	beq.w	8000f62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	4b66      	ldr	r3, [pc, #408]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a65      	ldr	r2, [pc, #404]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b63      	ldr	r3, [pc, #396]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000dfe:	4a61      	ldr	r2, [pc, #388]	; (8000f84 <HAL_GPIO_Init+0x328>)
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	3302      	adds	r3, #2
 8000e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	220f      	movs	r2, #15
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a58      	ldr	r2, [pc, #352]	; (8000f88 <HAL_GPIO_Init+0x32c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d037      	beq.n	8000e9a <HAL_GPIO_Init+0x23e>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a57      	ldr	r2, [pc, #348]	; (8000f8c <HAL_GPIO_Init+0x330>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d031      	beq.n	8000e96 <HAL_GPIO_Init+0x23a>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a56      	ldr	r2, [pc, #344]	; (8000f90 <HAL_GPIO_Init+0x334>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d02b      	beq.n	8000e92 <HAL_GPIO_Init+0x236>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a55      	ldr	r2, [pc, #340]	; (8000f94 <HAL_GPIO_Init+0x338>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d025      	beq.n	8000e8e <HAL_GPIO_Init+0x232>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a54      	ldr	r2, [pc, #336]	; (8000f98 <HAL_GPIO_Init+0x33c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d01f      	beq.n	8000e8a <HAL_GPIO_Init+0x22e>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a53      	ldr	r2, [pc, #332]	; (8000f9c <HAL_GPIO_Init+0x340>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d019      	beq.n	8000e86 <HAL_GPIO_Init+0x22a>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a52      	ldr	r2, [pc, #328]	; (8000fa0 <HAL_GPIO_Init+0x344>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d013      	beq.n	8000e82 <HAL_GPIO_Init+0x226>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a51      	ldr	r2, [pc, #324]	; (8000fa4 <HAL_GPIO_Init+0x348>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d00d      	beq.n	8000e7e <HAL_GPIO_Init+0x222>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a50      	ldr	r2, [pc, #320]	; (8000fa8 <HAL_GPIO_Init+0x34c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d007      	beq.n	8000e7a <HAL_GPIO_Init+0x21e>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4f      	ldr	r2, [pc, #316]	; (8000fac <HAL_GPIO_Init+0x350>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d101      	bne.n	8000e76 <HAL_GPIO_Init+0x21a>
 8000e72:	2309      	movs	r3, #9
 8000e74:	e012      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e76:	230a      	movs	r3, #10
 8000e78:	e010      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	e00e      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e7e:	2307      	movs	r3, #7
 8000e80:	e00c      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e82:	2306      	movs	r3, #6
 8000e84:	e00a      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e86:	2305      	movs	r3, #5
 8000e88:	e008      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e004      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x240>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	69fa      	ldr	r2, [r7, #28]
 8000e9e:	f002 0203 	and.w	r2, r2, #3
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	4093      	lsls	r3, r2
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000eac:	4935      	ldr	r1, [pc, #212]	; (8000f84 <HAL_GPIO_Init+0x328>)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eba:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <HAL_GPIO_Init+0x354>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ede:	4a34      	ldr	r2, [pc, #208]	; (8000fb0 <HAL_GPIO_Init+0x354>)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ee4:	4b32      	ldr	r3, [pc, #200]	; (8000fb0 <HAL_GPIO_Init+0x354>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f08:	4a29      	ldr	r2, [pc, #164]	; (8000fb0 <HAL_GPIO_Init+0x354>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f0e:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <HAL_GPIO_Init+0x354>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f32:	4a1f      	ldr	r2, [pc, #124]	; (8000fb0 <HAL_GPIO_Init+0x354>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <HAL_GPIO_Init+0x354>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f5c:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <HAL_GPIO_Init+0x354>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3301      	adds	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	2b0f      	cmp	r3, #15
 8000f6c:	f67f ae86 	bls.w	8000c7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3724      	adds	r7, #36	; 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40013800 	.word	0x40013800
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020c00 	.word	0x40020c00
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40021400 	.word	0x40021400
 8000fa0:	40021800 	.word	0x40021800
 8000fa4:	40021c00 	.word	0x40021c00
 8000fa8:	40022000 	.word	0x40022000
 8000fac:	40022400 	.word	0x40022400
 8000fb0:	40013c00 	.word	0x40013c00

08000fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc4:	787b      	ldrb	r3, [r7, #1]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fca:	887a      	ldrh	r2, [r7, #2]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000fd0:	e003      	b.n	8000fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000fd2:	887b      	ldrh	r3, [r7, #2]
 8000fd4:	041a      	lsls	r2, r3, #16
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	619a      	str	r2, [r3, #24]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40007000 	.word	0x40007000

08001008 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e29b      	b.n	8001556 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 8087 	beq.w	800113a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800102c:	4b96      	ldr	r3, [pc, #600]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f003 030c 	and.w	r3, r3, #12
 8001034:	2b04      	cmp	r3, #4
 8001036:	d00c      	beq.n	8001052 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001038:	4b93      	ldr	r3, [pc, #588]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 030c 	and.w	r3, r3, #12
 8001040:	2b08      	cmp	r3, #8
 8001042:	d112      	bne.n	800106a <HAL_RCC_OscConfig+0x62>
 8001044:	4b90      	ldr	r3, [pc, #576]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001050:	d10b      	bne.n	800106a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001052:	4b8d      	ldr	r3, [pc, #564]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d06c      	beq.n	8001138 <HAL_RCC_OscConfig+0x130>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d168      	bne.n	8001138 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e275      	b.n	8001556 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001072:	d106      	bne.n	8001082 <HAL_RCC_OscConfig+0x7a>
 8001074:	4b84      	ldr	r3, [pc, #528]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a83      	ldr	r2, [pc, #524]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 800107a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	e02e      	b.n	80010e0 <HAL_RCC_OscConfig+0xd8>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x9c>
 800108a:	4b7f      	ldr	r3, [pc, #508]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a7e      	ldr	r2, [pc, #504]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 8001090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	4b7c      	ldr	r3, [pc, #496]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a7b      	ldr	r2, [pc, #492]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 800109c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e01d      	b.n	80010e0 <HAL_RCC_OscConfig+0xd8>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ac:	d10c      	bne.n	80010c8 <HAL_RCC_OscConfig+0xc0>
 80010ae:	4b76      	ldr	r3, [pc, #472]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a75      	ldr	r2, [pc, #468]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	4b73      	ldr	r3, [pc, #460]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a72      	ldr	r2, [pc, #456]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e00b      	b.n	80010e0 <HAL_RCC_OscConfig+0xd8>
 80010c8:	4b6f      	ldr	r3, [pc, #444]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a6e      	ldr	r2, [pc, #440]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 80010ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b6c      	ldr	r3, [pc, #432]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a6b      	ldr	r2, [pc, #428]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 80010da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d013      	beq.n	8001110 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e8:	f7ff fca2 	bl	8000a30 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fc9e 	bl	8000a30 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e229      	b.n	8001556 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	4b61      	ldr	r3, [pc, #388]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0xe8>
 800110e:	e014      	b.n	800113a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001110:	f7ff fc8e 	bl	8000a30 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001118:	f7ff fc8a 	bl	8000a30 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b64      	cmp	r3, #100	; 0x64
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e215      	b.n	8001556 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112a:	4b57      	ldr	r3, [pc, #348]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0x110>
 8001136:	e000      	b.n	800113a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d069      	beq.n	800121a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001146:	4b50      	ldr	r3, [pc, #320]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00b      	beq.n	800116a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001152:	4b4d      	ldr	r3, [pc, #308]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b08      	cmp	r3, #8
 800115c:	d11c      	bne.n	8001198 <HAL_RCC_OscConfig+0x190>
 800115e:	4b4a      	ldr	r3, [pc, #296]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d116      	bne.n	8001198 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d005      	beq.n	8001182 <HAL_RCC_OscConfig+0x17a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d001      	beq.n	8001182 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e1e9      	b.n	8001556 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001182:	4b41      	ldr	r3, [pc, #260]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	493d      	ldr	r1, [pc, #244]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001196:	e040      	b.n	800121a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d023      	beq.n	80011e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a0:	4b39      	ldr	r3, [pc, #228]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a38      	ldr	r2, [pc, #224]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ac:	f7ff fc40 	bl	8000a30 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b4:	f7ff fc3c 	bl	8000a30 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e1c7      	b.n	8001556 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c6:	4b30      	ldr	r3, [pc, #192]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d2:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4929      	ldr	r1, [pc, #164]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]
 80011e6:	e018      	b.n	800121a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a26      	ldr	r2, [pc, #152]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f4:	f7ff fc1c 	bl	8000a30 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fc:	f7ff fc18 	bl	8000a30 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e1a3      	b.n	8001556 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120e:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b00      	cmp	r3, #0
 8001224:	d038      	beq.n	8001298 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d019      	beq.n	8001262 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 8001230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001232:	4a15      	ldr	r2, [pc, #84]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123a:	f7ff fbf9 	bl	8000a30 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001242:	f7ff fbf5 	bl	8000a30 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e180      	b.n	8001556 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 8001256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x23a>
 8001260:	e01a      	b.n	8001298 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 8001264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <HAL_RCC_OscConfig+0x280>)
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126e:	f7ff fbdf 	bl	8000a30 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001276:	f7ff fbdb 	bl	8000a30 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d903      	bls.n	800128c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e166      	b.n	8001556 <HAL_RCC_OscConfig+0x54e>
 8001288:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800128c:	4b92      	ldr	r3, [pc, #584]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 800128e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1ee      	bne.n	8001276 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80a4 	beq.w	80013ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a6:	4b8c      	ldr	r3, [pc, #560]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10d      	bne.n	80012ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b89      	ldr	r3, [pc, #548]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a88      	ldr	r2, [pc, #544]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b86      	ldr	r3, [pc, #536]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ca:	2301      	movs	r3, #1
 80012cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ce:	4b83      	ldr	r3, [pc, #524]	; (80014dc <HAL_RCC_OscConfig+0x4d4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d118      	bne.n	800130c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80012da:	4b80      	ldr	r3, [pc, #512]	; (80014dc <HAL_RCC_OscConfig+0x4d4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a7f      	ldr	r2, [pc, #508]	; (80014dc <HAL_RCC_OscConfig+0x4d4>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e6:	f7ff fba3 	bl	8000a30 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ee:	f7ff fb9f 	bl	8000a30 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b64      	cmp	r3, #100	; 0x64
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e12a      	b.n	8001556 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001300:	4b76      	ldr	r3, [pc, #472]	; (80014dc <HAL_RCC_OscConfig+0x4d4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d106      	bne.n	8001322 <HAL_RCC_OscConfig+0x31a>
 8001314:	4b70      	ldr	r3, [pc, #448]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 8001316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001318:	4a6f      	ldr	r2, [pc, #444]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6713      	str	r3, [r2, #112]	; 0x70
 8001320:	e02d      	b.n	800137e <HAL_RCC_OscConfig+0x376>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x33c>
 800132a:	4b6b      	ldr	r3, [pc, #428]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 800132c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132e:	4a6a      	ldr	r2, [pc, #424]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	6713      	str	r3, [r2, #112]	; 0x70
 8001336:	4b68      	ldr	r3, [pc, #416]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 8001338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133a:	4a67      	ldr	r2, [pc, #412]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 800133c:	f023 0304 	bic.w	r3, r3, #4
 8001340:	6713      	str	r3, [r2, #112]	; 0x70
 8001342:	e01c      	b.n	800137e <HAL_RCC_OscConfig+0x376>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b05      	cmp	r3, #5
 800134a:	d10c      	bne.n	8001366 <HAL_RCC_OscConfig+0x35e>
 800134c:	4b62      	ldr	r3, [pc, #392]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 800134e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001350:	4a61      	ldr	r2, [pc, #388]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6713      	str	r3, [r2, #112]	; 0x70
 8001358:	4b5f      	ldr	r3, [pc, #380]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 800135a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135c:	4a5e      	ldr	r2, [pc, #376]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6713      	str	r3, [r2, #112]	; 0x70
 8001364:	e00b      	b.n	800137e <HAL_RCC_OscConfig+0x376>
 8001366:	4b5c      	ldr	r3, [pc, #368]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 8001368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136a:	4a5b      	ldr	r2, [pc, #364]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	6713      	str	r3, [r2, #112]	; 0x70
 8001372:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 8001374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001376:	4a58      	ldr	r2, [pc, #352]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 8001378:	f023 0304 	bic.w	r3, r3, #4
 800137c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d015      	beq.n	80013b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001386:	f7ff fb53 	bl	8000a30 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138c:	e00a      	b.n	80013a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138e:	f7ff fb4f 	bl	8000a30 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	f241 3288 	movw	r2, #5000	; 0x1388
 800139c:	4293      	cmp	r3, r2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e0d8      	b.n	8001556 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a4:	4b4c      	ldr	r3, [pc, #304]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0ee      	beq.n	800138e <HAL_RCC_OscConfig+0x386>
 80013b0:	e014      	b.n	80013dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b2:	f7ff fb3d 	bl	8000a30 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b8:	e00a      	b.n	80013d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ba:	f7ff fb39 	bl	8000a30 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e0c2      	b.n	8001556 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d0:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 80013d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1ee      	bne.n	80013ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d105      	bne.n	80013ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	4a3c      	ldr	r2, [pc, #240]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 80013e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 80ae 	beq.w	8001554 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f8:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	2b08      	cmp	r3, #8
 8001402:	d06d      	beq.n	80014e0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d14b      	bne.n	80014a4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140c:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 8001412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff fb0a 	bl	8000a30 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001420:	f7ff fb06 	bl	8000a30 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e091      	b.n	8001556 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001432:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69da      	ldr	r2, [r3, #28]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	019b      	lsls	r3, r3, #6
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	3b01      	subs	r3, #1
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	061b      	lsls	r3, r3, #24
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	071b      	lsls	r3, r3, #28
 800146a:	491b      	ldr	r1, [pc, #108]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 8001476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800147a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fad8 	bl	8000a30 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001484:	f7ff fad4 	bl	8000a30 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e05f      	b.n	8001556 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x47c>
 80014a2:	e057      	b.n	8001554 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 80014aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff fabe 	bl	8000a30 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff faba 	bl	8000a30 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e045      	b.n	8001556 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ca:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_RCC_OscConfig+0x4d0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x4b0>
 80014d6:	e03d      	b.n	8001554 <HAL_RCC_OscConfig+0x54c>
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <HAL_RCC_OscConfig+0x558>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d030      	beq.n	8001550 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d129      	bne.n	8001550 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001506:	429a      	cmp	r2, r3
 8001508:	d122      	bne.n	8001550 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001510:	4013      	ands	r3, r2
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001516:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001518:	4293      	cmp	r3, r2
 800151a:	d119      	bne.n	8001550 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	085b      	lsrs	r3, r3, #1
 8001528:	3b01      	subs	r3, #1
 800152a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800152c:	429a      	cmp	r2, r3
 800152e:	d10f      	bne.n	8001550 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800153c:	429a      	cmp	r2, r3
 800153e:	d107      	bne.n	8001550 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800154c:	429a      	cmp	r2, r3
 800154e:	d001      	beq.n	8001554 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800

08001564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0d0      	b.n	800171e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800157c:	4b6a      	ldr	r3, [pc, #424]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d910      	bls.n	80015ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158a:	4b67      	ldr	r3, [pc, #412]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 020f 	bic.w	r2, r3, #15
 8001592:	4965      	ldr	r1, [pc, #404]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800159a:	4b63      	ldr	r3, [pc, #396]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0b8      	b.n	800171e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d020      	beq.n	80015fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c4:	4b59      	ldr	r3, [pc, #356]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4a58      	ldr	r2, [pc, #352]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 80015ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015dc:	4b53      	ldr	r3, [pc, #332]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4a52      	ldr	r2, [pc, #328]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 80015e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e8:	4b50      	ldr	r3, [pc, #320]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	494d      	ldr	r1, [pc, #308]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d040      	beq.n	8001688 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d107      	bne.n	800161e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160e:	4b47      	ldr	r3, [pc, #284]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d115      	bne.n	8001646 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e07f      	b.n	800171e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001626:	4b41      	ldr	r3, [pc, #260]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e073      	b.n	800171e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001636:	4b3d      	ldr	r3, [pc, #244]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e06b      	b.n	800171e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001646:	4b39      	ldr	r3, [pc, #228]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f023 0203 	bic.w	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4936      	ldr	r1, [pc, #216]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001658:	f7ff f9ea 	bl	8000a30 <HAL_GetTick>
 800165c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	e00a      	b.n	8001676 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001660:	f7ff f9e6 	bl	8000a30 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	; 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e053      	b.n	800171e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	4b2d      	ldr	r3, [pc, #180]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 020c 	and.w	r2, r3, #12
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	429a      	cmp	r2, r3
 8001686:	d1eb      	bne.n	8001660 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001688:	4b27      	ldr	r3, [pc, #156]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d210      	bcs.n	80016b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b24      	ldr	r3, [pc, #144]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 020f 	bic.w	r2, r3, #15
 800169e:	4922      	ldr	r1, [pc, #136]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e032      	b.n	800171e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4916      	ldr	r1, [pc, #88]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d009      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	490e      	ldr	r1, [pc, #56]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016f6:	f000 f821 	bl	800173c <HAL_RCC_GetSysClockFreq>
 80016fa:	4602      	mov	r2, r0
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	490a      	ldr	r1, [pc, #40]	; (8001730 <HAL_RCC_ClockConfig+0x1cc>)
 8001708:	5ccb      	ldrb	r3, [r1, r3]
 800170a:	fa22 f303 	lsr.w	r3, r2, r3
 800170e:	4a09      	ldr	r2, [pc, #36]	; (8001734 <HAL_RCC_ClockConfig+0x1d0>)
 8001710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_RCC_ClockConfig+0x1d4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff f946 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023c00 	.word	0x40023c00
 800172c:	40023800 	.word	0x40023800
 8001730:	080022c8 	.word	0x080022c8
 8001734:	20000000 	.word	0x20000000
 8001738:	20000004 	.word	0x20000004

0800173c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800173c:	b5b0      	push	{r4, r5, r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001742:	2100      	movs	r1, #0
 8001744:	6079      	str	r1, [r7, #4]
 8001746:	2100      	movs	r1, #0
 8001748:	60f9      	str	r1, [r7, #12]
 800174a:	2100      	movs	r1, #0
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800174e:	2100      	movs	r1, #0
 8001750:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001752:	4952      	ldr	r1, [pc, #328]	; (800189c <HAL_RCC_GetSysClockFreq+0x160>)
 8001754:	6889      	ldr	r1, [r1, #8]
 8001756:	f001 010c 	and.w	r1, r1, #12
 800175a:	2908      	cmp	r1, #8
 800175c:	d00d      	beq.n	800177a <HAL_RCC_GetSysClockFreq+0x3e>
 800175e:	2908      	cmp	r1, #8
 8001760:	f200 8094 	bhi.w	800188c <HAL_RCC_GetSysClockFreq+0x150>
 8001764:	2900      	cmp	r1, #0
 8001766:	d002      	beq.n	800176e <HAL_RCC_GetSysClockFreq+0x32>
 8001768:	2904      	cmp	r1, #4
 800176a:	d003      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0x38>
 800176c:	e08e      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800176e:	4b4c      	ldr	r3, [pc, #304]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001770:	60bb      	str	r3, [r7, #8]
      break;
 8001772:	e08e      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001774:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001776:	60bb      	str	r3, [r7, #8]
      break;
 8001778:	e08b      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800177a:	4948      	ldr	r1, [pc, #288]	; (800189c <HAL_RCC_GetSysClockFreq+0x160>)
 800177c:	6849      	ldr	r1, [r1, #4]
 800177e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001782:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001784:	4945      	ldr	r1, [pc, #276]	; (800189c <HAL_RCC_GetSysClockFreq+0x160>)
 8001786:	6849      	ldr	r1, [r1, #4]
 8001788:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800178c:	2900      	cmp	r1, #0
 800178e:	d024      	beq.n	80017da <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001790:	4942      	ldr	r1, [pc, #264]	; (800189c <HAL_RCC_GetSysClockFreq+0x160>)
 8001792:	6849      	ldr	r1, [r1, #4]
 8001794:	0989      	lsrs	r1, r1, #6
 8001796:	4608      	mov	r0, r1
 8001798:	f04f 0100 	mov.w	r1, #0
 800179c:	f240 14ff 	movw	r4, #511	; 0x1ff
 80017a0:	f04f 0500 	mov.w	r5, #0
 80017a4:	ea00 0204 	and.w	r2, r0, r4
 80017a8:	ea01 0305 	and.w	r3, r1, r5
 80017ac:	493d      	ldr	r1, [pc, #244]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80017ae:	fb01 f003 	mul.w	r0, r1, r3
 80017b2:	2100      	movs	r1, #0
 80017b4:	fb01 f102 	mul.w	r1, r1, r2
 80017b8:	1844      	adds	r4, r0, r1
 80017ba:	493a      	ldr	r1, [pc, #232]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80017bc:	fba2 0101 	umull	r0, r1, r2, r1
 80017c0:	1863      	adds	r3, r4, r1
 80017c2:	4619      	mov	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	461a      	mov	r2, r3
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	f7fe fd34 	bl	8000238 <__aeabi_uldivmod>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4613      	mov	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	e04a      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017da:	4b30      	ldr	r3, [pc, #192]	; (800189c <HAL_RCC_GetSysClockFreq+0x160>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	099b      	lsrs	r3, r3, #6
 80017e0:	461a      	mov	r2, r3
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017ea:	f04f 0100 	mov.w	r1, #0
 80017ee:	ea02 0400 	and.w	r4, r2, r0
 80017f2:	ea03 0501 	and.w	r5, r3, r1
 80017f6:	4620      	mov	r0, r4
 80017f8:	4629      	mov	r1, r5
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	014b      	lsls	r3, r1, #5
 8001804:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001808:	0142      	lsls	r2, r0, #5
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	1b00      	subs	r0, r0, r4
 8001810:	eb61 0105 	sbc.w	r1, r1, r5
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	018b      	lsls	r3, r1, #6
 800181e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001822:	0182      	lsls	r2, r0, #6
 8001824:	1a12      	subs	r2, r2, r0
 8001826:	eb63 0301 	sbc.w	r3, r3, r1
 800182a:	f04f 0000 	mov.w	r0, #0
 800182e:	f04f 0100 	mov.w	r1, #0
 8001832:	00d9      	lsls	r1, r3, #3
 8001834:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001838:	00d0      	lsls	r0, r2, #3
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	1912      	adds	r2, r2, r4
 8001840:	eb45 0303 	adc.w	r3, r5, r3
 8001844:	f04f 0000 	mov.w	r0, #0
 8001848:	f04f 0100 	mov.w	r1, #0
 800184c:	0299      	lsls	r1, r3, #10
 800184e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001852:	0290      	lsls	r0, r2, #10
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	461a      	mov	r2, r3
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	f7fe fce8 	bl	8000238 <__aeabi_uldivmod>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4613      	mov	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_RCC_GetSysClockFreq+0x160>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	0c1b      	lsrs	r3, r3, #16
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	3301      	adds	r3, #1
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	fbb2 f3f3 	udiv	r3, r2, r3
 8001888:	60bb      	str	r3, [r7, #8]
      break;
 800188a:	e002      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800188e:	60bb      	str	r3, [r7, #8]
      break;
 8001890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001892:	68bb      	ldr	r3, [r7, #8]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bdb0      	pop	{r4, r5, r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	00f42400 	.word	0x00f42400
 80018a4:	017d7840 	.word	0x017d7840

080018a8 <__errno>:
 80018a8:	4b01      	ldr	r3, [pc, #4]	; (80018b0 <__errno+0x8>)
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2000000c 	.word	0x2000000c

080018b4 <__libc_init_array>:
 80018b4:	b570      	push	{r4, r5, r6, lr}
 80018b6:	4d0d      	ldr	r5, [pc, #52]	; (80018ec <__libc_init_array+0x38>)
 80018b8:	4c0d      	ldr	r4, [pc, #52]	; (80018f0 <__libc_init_array+0x3c>)
 80018ba:	1b64      	subs	r4, r4, r5
 80018bc:	10a4      	asrs	r4, r4, #2
 80018be:	2600      	movs	r6, #0
 80018c0:	42a6      	cmp	r6, r4
 80018c2:	d109      	bne.n	80018d8 <__libc_init_array+0x24>
 80018c4:	4d0b      	ldr	r5, [pc, #44]	; (80018f4 <__libc_init_array+0x40>)
 80018c6:	4c0c      	ldr	r4, [pc, #48]	; (80018f8 <__libc_init_array+0x44>)
 80018c8:	f000 fce6 	bl	8002298 <_init>
 80018cc:	1b64      	subs	r4, r4, r5
 80018ce:	10a4      	asrs	r4, r4, #2
 80018d0:	2600      	movs	r6, #0
 80018d2:	42a6      	cmp	r6, r4
 80018d4:	d105      	bne.n	80018e2 <__libc_init_array+0x2e>
 80018d6:	bd70      	pop	{r4, r5, r6, pc}
 80018d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80018dc:	4798      	blx	r3
 80018de:	3601      	adds	r6, #1
 80018e0:	e7ee      	b.n	80018c0 <__libc_init_array+0xc>
 80018e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e6:	4798      	blx	r3
 80018e8:	3601      	adds	r6, #1
 80018ea:	e7f2      	b.n	80018d2 <__libc_init_array+0x1e>
 80018ec:	08002344 	.word	0x08002344
 80018f0:	08002344 	.word	0x08002344
 80018f4:	08002344 	.word	0x08002344
 80018f8:	08002348 	.word	0x08002348

080018fc <memset>:
 80018fc:	4402      	add	r2, r0
 80018fe:	4603      	mov	r3, r0
 8001900:	4293      	cmp	r3, r2
 8001902:	d100      	bne.n	8001906 <memset+0xa>
 8001904:	4770      	bx	lr
 8001906:	f803 1b01 	strb.w	r1, [r3], #1
 800190a:	e7f9      	b.n	8001900 <memset+0x4>

0800190c <_puts_r>:
 800190c:	b570      	push	{r4, r5, r6, lr}
 800190e:	460e      	mov	r6, r1
 8001910:	4605      	mov	r5, r0
 8001912:	b118      	cbz	r0, 800191c <_puts_r+0x10>
 8001914:	6983      	ldr	r3, [r0, #24]
 8001916:	b90b      	cbnz	r3, 800191c <_puts_r+0x10>
 8001918:	f000 fa48 	bl	8001dac <__sinit>
 800191c:	69ab      	ldr	r3, [r5, #24]
 800191e:	68ac      	ldr	r4, [r5, #8]
 8001920:	b913      	cbnz	r3, 8001928 <_puts_r+0x1c>
 8001922:	4628      	mov	r0, r5
 8001924:	f000 fa42 	bl	8001dac <__sinit>
 8001928:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <_puts_r+0xd0>)
 800192a:	429c      	cmp	r4, r3
 800192c:	d120      	bne.n	8001970 <_puts_r+0x64>
 800192e:	686c      	ldr	r4, [r5, #4]
 8001930:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001932:	07db      	lsls	r3, r3, #31
 8001934:	d405      	bmi.n	8001942 <_puts_r+0x36>
 8001936:	89a3      	ldrh	r3, [r4, #12]
 8001938:	0598      	lsls	r0, r3, #22
 800193a:	d402      	bmi.n	8001942 <_puts_r+0x36>
 800193c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800193e:	f000 fad3 	bl	8001ee8 <__retarget_lock_acquire_recursive>
 8001942:	89a3      	ldrh	r3, [r4, #12]
 8001944:	0719      	lsls	r1, r3, #28
 8001946:	d51d      	bpl.n	8001984 <_puts_r+0x78>
 8001948:	6923      	ldr	r3, [r4, #16]
 800194a:	b1db      	cbz	r3, 8001984 <_puts_r+0x78>
 800194c:	3e01      	subs	r6, #1
 800194e:	68a3      	ldr	r3, [r4, #8]
 8001950:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001954:	3b01      	subs	r3, #1
 8001956:	60a3      	str	r3, [r4, #8]
 8001958:	bb39      	cbnz	r1, 80019aa <_puts_r+0x9e>
 800195a:	2b00      	cmp	r3, #0
 800195c:	da38      	bge.n	80019d0 <_puts_r+0xc4>
 800195e:	4622      	mov	r2, r4
 8001960:	210a      	movs	r1, #10
 8001962:	4628      	mov	r0, r5
 8001964:	f000 f848 	bl	80019f8 <__swbuf_r>
 8001968:	3001      	adds	r0, #1
 800196a:	d011      	beq.n	8001990 <_puts_r+0x84>
 800196c:	250a      	movs	r5, #10
 800196e:	e011      	b.n	8001994 <_puts_r+0x88>
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <_puts_r+0xd4>)
 8001972:	429c      	cmp	r4, r3
 8001974:	d101      	bne.n	800197a <_puts_r+0x6e>
 8001976:	68ac      	ldr	r4, [r5, #8]
 8001978:	e7da      	b.n	8001930 <_puts_r+0x24>
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <_puts_r+0xd8>)
 800197c:	429c      	cmp	r4, r3
 800197e:	bf08      	it	eq
 8001980:	68ec      	ldreq	r4, [r5, #12]
 8001982:	e7d5      	b.n	8001930 <_puts_r+0x24>
 8001984:	4621      	mov	r1, r4
 8001986:	4628      	mov	r0, r5
 8001988:	f000 f888 	bl	8001a9c <__swsetup_r>
 800198c:	2800      	cmp	r0, #0
 800198e:	d0dd      	beq.n	800194c <_puts_r+0x40>
 8001990:	f04f 35ff 	mov.w	r5, #4294967295
 8001994:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001996:	07da      	lsls	r2, r3, #31
 8001998:	d405      	bmi.n	80019a6 <_puts_r+0x9a>
 800199a:	89a3      	ldrh	r3, [r4, #12]
 800199c:	059b      	lsls	r3, r3, #22
 800199e:	d402      	bmi.n	80019a6 <_puts_r+0x9a>
 80019a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019a2:	f000 faa2 	bl	8001eea <__retarget_lock_release_recursive>
 80019a6:	4628      	mov	r0, r5
 80019a8:	bd70      	pop	{r4, r5, r6, pc}
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	da04      	bge.n	80019b8 <_puts_r+0xac>
 80019ae:	69a2      	ldr	r2, [r4, #24]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dc06      	bgt.n	80019c2 <_puts_r+0xb6>
 80019b4:	290a      	cmp	r1, #10
 80019b6:	d004      	beq.n	80019c2 <_puts_r+0xb6>
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	6022      	str	r2, [r4, #0]
 80019be:	7019      	strb	r1, [r3, #0]
 80019c0:	e7c5      	b.n	800194e <_puts_r+0x42>
 80019c2:	4622      	mov	r2, r4
 80019c4:	4628      	mov	r0, r5
 80019c6:	f000 f817 	bl	80019f8 <__swbuf_r>
 80019ca:	3001      	adds	r0, #1
 80019cc:	d1bf      	bne.n	800194e <_puts_r+0x42>
 80019ce:	e7df      	b.n	8001990 <_puts_r+0x84>
 80019d0:	6823      	ldr	r3, [r4, #0]
 80019d2:	250a      	movs	r5, #10
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	6022      	str	r2, [r4, #0]
 80019d8:	701d      	strb	r5, [r3, #0]
 80019da:	e7db      	b.n	8001994 <_puts_r+0x88>
 80019dc:	080022fc 	.word	0x080022fc
 80019e0:	0800231c 	.word	0x0800231c
 80019e4:	080022dc 	.word	0x080022dc

080019e8 <puts>:
 80019e8:	4b02      	ldr	r3, [pc, #8]	; (80019f4 <puts+0xc>)
 80019ea:	4601      	mov	r1, r0
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	f7ff bf8d 	b.w	800190c <_puts_r>
 80019f2:	bf00      	nop
 80019f4:	2000000c 	.word	0x2000000c

080019f8 <__swbuf_r>:
 80019f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fa:	460e      	mov	r6, r1
 80019fc:	4614      	mov	r4, r2
 80019fe:	4605      	mov	r5, r0
 8001a00:	b118      	cbz	r0, 8001a0a <__swbuf_r+0x12>
 8001a02:	6983      	ldr	r3, [r0, #24]
 8001a04:	b90b      	cbnz	r3, 8001a0a <__swbuf_r+0x12>
 8001a06:	f000 f9d1 	bl	8001dac <__sinit>
 8001a0a:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <__swbuf_r+0x98>)
 8001a0c:	429c      	cmp	r4, r3
 8001a0e:	d12b      	bne.n	8001a68 <__swbuf_r+0x70>
 8001a10:	686c      	ldr	r4, [r5, #4]
 8001a12:	69a3      	ldr	r3, [r4, #24]
 8001a14:	60a3      	str	r3, [r4, #8]
 8001a16:	89a3      	ldrh	r3, [r4, #12]
 8001a18:	071a      	lsls	r2, r3, #28
 8001a1a:	d52f      	bpl.n	8001a7c <__swbuf_r+0x84>
 8001a1c:	6923      	ldr	r3, [r4, #16]
 8001a1e:	b36b      	cbz	r3, 8001a7c <__swbuf_r+0x84>
 8001a20:	6923      	ldr	r3, [r4, #16]
 8001a22:	6820      	ldr	r0, [r4, #0]
 8001a24:	1ac0      	subs	r0, r0, r3
 8001a26:	6963      	ldr	r3, [r4, #20]
 8001a28:	b2f6      	uxtb	r6, r6
 8001a2a:	4283      	cmp	r3, r0
 8001a2c:	4637      	mov	r7, r6
 8001a2e:	dc04      	bgt.n	8001a3a <__swbuf_r+0x42>
 8001a30:	4621      	mov	r1, r4
 8001a32:	4628      	mov	r0, r5
 8001a34:	f000 f926 	bl	8001c84 <_fflush_r>
 8001a38:	bb30      	cbnz	r0, 8001a88 <__swbuf_r+0x90>
 8001a3a:	68a3      	ldr	r3, [r4, #8]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	60a3      	str	r3, [r4, #8]
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	6022      	str	r2, [r4, #0]
 8001a46:	701e      	strb	r6, [r3, #0]
 8001a48:	6963      	ldr	r3, [r4, #20]
 8001a4a:	3001      	adds	r0, #1
 8001a4c:	4283      	cmp	r3, r0
 8001a4e:	d004      	beq.n	8001a5a <__swbuf_r+0x62>
 8001a50:	89a3      	ldrh	r3, [r4, #12]
 8001a52:	07db      	lsls	r3, r3, #31
 8001a54:	d506      	bpl.n	8001a64 <__swbuf_r+0x6c>
 8001a56:	2e0a      	cmp	r6, #10
 8001a58:	d104      	bne.n	8001a64 <__swbuf_r+0x6c>
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	4628      	mov	r0, r5
 8001a5e:	f000 f911 	bl	8001c84 <_fflush_r>
 8001a62:	b988      	cbnz	r0, 8001a88 <__swbuf_r+0x90>
 8001a64:	4638      	mov	r0, r7
 8001a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <__swbuf_r+0x9c>)
 8001a6a:	429c      	cmp	r4, r3
 8001a6c:	d101      	bne.n	8001a72 <__swbuf_r+0x7a>
 8001a6e:	68ac      	ldr	r4, [r5, #8]
 8001a70:	e7cf      	b.n	8001a12 <__swbuf_r+0x1a>
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <__swbuf_r+0xa0>)
 8001a74:	429c      	cmp	r4, r3
 8001a76:	bf08      	it	eq
 8001a78:	68ec      	ldreq	r4, [r5, #12]
 8001a7a:	e7ca      	b.n	8001a12 <__swbuf_r+0x1a>
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	4628      	mov	r0, r5
 8001a80:	f000 f80c 	bl	8001a9c <__swsetup_r>
 8001a84:	2800      	cmp	r0, #0
 8001a86:	d0cb      	beq.n	8001a20 <__swbuf_r+0x28>
 8001a88:	f04f 37ff 	mov.w	r7, #4294967295
 8001a8c:	e7ea      	b.n	8001a64 <__swbuf_r+0x6c>
 8001a8e:	bf00      	nop
 8001a90:	080022fc 	.word	0x080022fc
 8001a94:	0800231c 	.word	0x0800231c
 8001a98:	080022dc 	.word	0x080022dc

08001a9c <__swsetup_r>:
 8001a9c:	4b32      	ldr	r3, [pc, #200]	; (8001b68 <__swsetup_r+0xcc>)
 8001a9e:	b570      	push	{r4, r5, r6, lr}
 8001aa0:	681d      	ldr	r5, [r3, #0]
 8001aa2:	4606      	mov	r6, r0
 8001aa4:	460c      	mov	r4, r1
 8001aa6:	b125      	cbz	r5, 8001ab2 <__swsetup_r+0x16>
 8001aa8:	69ab      	ldr	r3, [r5, #24]
 8001aaa:	b913      	cbnz	r3, 8001ab2 <__swsetup_r+0x16>
 8001aac:	4628      	mov	r0, r5
 8001aae:	f000 f97d 	bl	8001dac <__sinit>
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <__swsetup_r+0xd0>)
 8001ab4:	429c      	cmp	r4, r3
 8001ab6:	d10f      	bne.n	8001ad8 <__swsetup_r+0x3c>
 8001ab8:	686c      	ldr	r4, [r5, #4]
 8001aba:	89a3      	ldrh	r3, [r4, #12]
 8001abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ac0:	0719      	lsls	r1, r3, #28
 8001ac2:	d42c      	bmi.n	8001b1e <__swsetup_r+0x82>
 8001ac4:	06dd      	lsls	r5, r3, #27
 8001ac6:	d411      	bmi.n	8001aec <__swsetup_r+0x50>
 8001ac8:	2309      	movs	r3, #9
 8001aca:	6033      	str	r3, [r6, #0]
 8001acc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001ad0:	81a3      	strh	r3, [r4, #12]
 8001ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad6:	e03e      	b.n	8001b56 <__swsetup_r+0xba>
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <__swsetup_r+0xd4>)
 8001ada:	429c      	cmp	r4, r3
 8001adc:	d101      	bne.n	8001ae2 <__swsetup_r+0x46>
 8001ade:	68ac      	ldr	r4, [r5, #8]
 8001ae0:	e7eb      	b.n	8001aba <__swsetup_r+0x1e>
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <__swsetup_r+0xd8>)
 8001ae4:	429c      	cmp	r4, r3
 8001ae6:	bf08      	it	eq
 8001ae8:	68ec      	ldreq	r4, [r5, #12]
 8001aea:	e7e6      	b.n	8001aba <__swsetup_r+0x1e>
 8001aec:	0758      	lsls	r0, r3, #29
 8001aee:	d512      	bpl.n	8001b16 <__swsetup_r+0x7a>
 8001af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001af2:	b141      	cbz	r1, 8001b06 <__swsetup_r+0x6a>
 8001af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001af8:	4299      	cmp	r1, r3
 8001afa:	d002      	beq.n	8001b02 <__swsetup_r+0x66>
 8001afc:	4630      	mov	r0, r6
 8001afe:	f000 fa59 	bl	8001fb4 <_free_r>
 8001b02:	2300      	movs	r3, #0
 8001b04:	6363      	str	r3, [r4, #52]	; 0x34
 8001b06:	89a3      	ldrh	r3, [r4, #12]
 8001b08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b0c:	81a3      	strh	r3, [r4, #12]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	6063      	str	r3, [r4, #4]
 8001b12:	6923      	ldr	r3, [r4, #16]
 8001b14:	6023      	str	r3, [r4, #0]
 8001b16:	89a3      	ldrh	r3, [r4, #12]
 8001b18:	f043 0308 	orr.w	r3, r3, #8
 8001b1c:	81a3      	strh	r3, [r4, #12]
 8001b1e:	6923      	ldr	r3, [r4, #16]
 8001b20:	b94b      	cbnz	r3, 8001b36 <__swsetup_r+0x9a>
 8001b22:	89a3      	ldrh	r3, [r4, #12]
 8001b24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b2c:	d003      	beq.n	8001b36 <__swsetup_r+0x9a>
 8001b2e:	4621      	mov	r1, r4
 8001b30:	4630      	mov	r0, r6
 8001b32:	f000 f9ff 	bl	8001f34 <__smakebuf_r>
 8001b36:	89a0      	ldrh	r0, [r4, #12]
 8001b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b3c:	f010 0301 	ands.w	r3, r0, #1
 8001b40:	d00a      	beq.n	8001b58 <__swsetup_r+0xbc>
 8001b42:	2300      	movs	r3, #0
 8001b44:	60a3      	str	r3, [r4, #8]
 8001b46:	6963      	ldr	r3, [r4, #20]
 8001b48:	425b      	negs	r3, r3
 8001b4a:	61a3      	str	r3, [r4, #24]
 8001b4c:	6923      	ldr	r3, [r4, #16]
 8001b4e:	b943      	cbnz	r3, 8001b62 <__swsetup_r+0xc6>
 8001b50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001b54:	d1ba      	bne.n	8001acc <__swsetup_r+0x30>
 8001b56:	bd70      	pop	{r4, r5, r6, pc}
 8001b58:	0781      	lsls	r1, r0, #30
 8001b5a:	bf58      	it	pl
 8001b5c:	6963      	ldrpl	r3, [r4, #20]
 8001b5e:	60a3      	str	r3, [r4, #8]
 8001b60:	e7f4      	b.n	8001b4c <__swsetup_r+0xb0>
 8001b62:	2000      	movs	r0, #0
 8001b64:	e7f7      	b.n	8001b56 <__swsetup_r+0xba>
 8001b66:	bf00      	nop
 8001b68:	2000000c 	.word	0x2000000c
 8001b6c:	080022fc 	.word	0x080022fc
 8001b70:	0800231c 	.word	0x0800231c
 8001b74:	080022dc 	.word	0x080022dc

08001b78 <__sflush_r>:
 8001b78:	898a      	ldrh	r2, [r1, #12]
 8001b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b7e:	4605      	mov	r5, r0
 8001b80:	0710      	lsls	r0, r2, #28
 8001b82:	460c      	mov	r4, r1
 8001b84:	d458      	bmi.n	8001c38 <__sflush_r+0xc0>
 8001b86:	684b      	ldr	r3, [r1, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	dc05      	bgt.n	8001b98 <__sflush_r+0x20>
 8001b8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	dc02      	bgt.n	8001b98 <__sflush_r+0x20>
 8001b92:	2000      	movs	r0, #0
 8001b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b9a:	2e00      	cmp	r6, #0
 8001b9c:	d0f9      	beq.n	8001b92 <__sflush_r+0x1a>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ba4:	682f      	ldr	r7, [r5, #0]
 8001ba6:	602b      	str	r3, [r5, #0]
 8001ba8:	d032      	beq.n	8001c10 <__sflush_r+0x98>
 8001baa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001bac:	89a3      	ldrh	r3, [r4, #12]
 8001bae:	075a      	lsls	r2, r3, #29
 8001bb0:	d505      	bpl.n	8001bbe <__sflush_r+0x46>
 8001bb2:	6863      	ldr	r3, [r4, #4]
 8001bb4:	1ac0      	subs	r0, r0, r3
 8001bb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001bb8:	b10b      	cbz	r3, 8001bbe <__sflush_r+0x46>
 8001bba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bbc:	1ac0      	subs	r0, r0, r3
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bc4:	6a21      	ldr	r1, [r4, #32]
 8001bc6:	4628      	mov	r0, r5
 8001bc8:	47b0      	blx	r6
 8001bca:	1c43      	adds	r3, r0, #1
 8001bcc:	89a3      	ldrh	r3, [r4, #12]
 8001bce:	d106      	bne.n	8001bde <__sflush_r+0x66>
 8001bd0:	6829      	ldr	r1, [r5, #0]
 8001bd2:	291d      	cmp	r1, #29
 8001bd4:	d82c      	bhi.n	8001c30 <__sflush_r+0xb8>
 8001bd6:	4a2a      	ldr	r2, [pc, #168]	; (8001c80 <__sflush_r+0x108>)
 8001bd8:	40ca      	lsrs	r2, r1
 8001bda:	07d6      	lsls	r6, r2, #31
 8001bdc:	d528      	bpl.n	8001c30 <__sflush_r+0xb8>
 8001bde:	2200      	movs	r2, #0
 8001be0:	6062      	str	r2, [r4, #4]
 8001be2:	04d9      	lsls	r1, r3, #19
 8001be4:	6922      	ldr	r2, [r4, #16]
 8001be6:	6022      	str	r2, [r4, #0]
 8001be8:	d504      	bpl.n	8001bf4 <__sflush_r+0x7c>
 8001bea:	1c42      	adds	r2, r0, #1
 8001bec:	d101      	bne.n	8001bf2 <__sflush_r+0x7a>
 8001bee:	682b      	ldr	r3, [r5, #0]
 8001bf0:	b903      	cbnz	r3, 8001bf4 <__sflush_r+0x7c>
 8001bf2:	6560      	str	r0, [r4, #84]	; 0x54
 8001bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bf6:	602f      	str	r7, [r5, #0]
 8001bf8:	2900      	cmp	r1, #0
 8001bfa:	d0ca      	beq.n	8001b92 <__sflush_r+0x1a>
 8001bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c00:	4299      	cmp	r1, r3
 8001c02:	d002      	beq.n	8001c0a <__sflush_r+0x92>
 8001c04:	4628      	mov	r0, r5
 8001c06:	f000 f9d5 	bl	8001fb4 <_free_r>
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	6360      	str	r0, [r4, #52]	; 0x34
 8001c0e:	e7c1      	b.n	8001b94 <__sflush_r+0x1c>
 8001c10:	6a21      	ldr	r1, [r4, #32]
 8001c12:	2301      	movs	r3, #1
 8001c14:	4628      	mov	r0, r5
 8001c16:	47b0      	blx	r6
 8001c18:	1c41      	adds	r1, r0, #1
 8001c1a:	d1c7      	bne.n	8001bac <__sflush_r+0x34>
 8001c1c:	682b      	ldr	r3, [r5, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0c4      	beq.n	8001bac <__sflush_r+0x34>
 8001c22:	2b1d      	cmp	r3, #29
 8001c24:	d001      	beq.n	8001c2a <__sflush_r+0xb2>
 8001c26:	2b16      	cmp	r3, #22
 8001c28:	d101      	bne.n	8001c2e <__sflush_r+0xb6>
 8001c2a:	602f      	str	r7, [r5, #0]
 8001c2c:	e7b1      	b.n	8001b92 <__sflush_r+0x1a>
 8001c2e:	89a3      	ldrh	r3, [r4, #12]
 8001c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c34:	81a3      	strh	r3, [r4, #12]
 8001c36:	e7ad      	b.n	8001b94 <__sflush_r+0x1c>
 8001c38:	690f      	ldr	r7, [r1, #16]
 8001c3a:	2f00      	cmp	r7, #0
 8001c3c:	d0a9      	beq.n	8001b92 <__sflush_r+0x1a>
 8001c3e:	0793      	lsls	r3, r2, #30
 8001c40:	680e      	ldr	r6, [r1, #0]
 8001c42:	bf08      	it	eq
 8001c44:	694b      	ldreq	r3, [r1, #20]
 8001c46:	600f      	str	r7, [r1, #0]
 8001c48:	bf18      	it	ne
 8001c4a:	2300      	movne	r3, #0
 8001c4c:	eba6 0807 	sub.w	r8, r6, r7
 8001c50:	608b      	str	r3, [r1, #8]
 8001c52:	f1b8 0f00 	cmp.w	r8, #0
 8001c56:	dd9c      	ble.n	8001b92 <__sflush_r+0x1a>
 8001c58:	6a21      	ldr	r1, [r4, #32]
 8001c5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c5c:	4643      	mov	r3, r8
 8001c5e:	463a      	mov	r2, r7
 8001c60:	4628      	mov	r0, r5
 8001c62:	47b0      	blx	r6
 8001c64:	2800      	cmp	r0, #0
 8001c66:	dc06      	bgt.n	8001c76 <__sflush_r+0xfe>
 8001c68:	89a3      	ldrh	r3, [r4, #12]
 8001c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c6e:	81a3      	strh	r3, [r4, #12]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	e78e      	b.n	8001b94 <__sflush_r+0x1c>
 8001c76:	4407      	add	r7, r0
 8001c78:	eba8 0800 	sub.w	r8, r8, r0
 8001c7c:	e7e9      	b.n	8001c52 <__sflush_r+0xda>
 8001c7e:	bf00      	nop
 8001c80:	20400001 	.word	0x20400001

08001c84 <_fflush_r>:
 8001c84:	b538      	push	{r3, r4, r5, lr}
 8001c86:	690b      	ldr	r3, [r1, #16]
 8001c88:	4605      	mov	r5, r0
 8001c8a:	460c      	mov	r4, r1
 8001c8c:	b913      	cbnz	r3, 8001c94 <_fflush_r+0x10>
 8001c8e:	2500      	movs	r5, #0
 8001c90:	4628      	mov	r0, r5
 8001c92:	bd38      	pop	{r3, r4, r5, pc}
 8001c94:	b118      	cbz	r0, 8001c9e <_fflush_r+0x1a>
 8001c96:	6983      	ldr	r3, [r0, #24]
 8001c98:	b90b      	cbnz	r3, 8001c9e <_fflush_r+0x1a>
 8001c9a:	f000 f887 	bl	8001dac <__sinit>
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <_fflush_r+0x6c>)
 8001ca0:	429c      	cmp	r4, r3
 8001ca2:	d11b      	bne.n	8001cdc <_fflush_r+0x58>
 8001ca4:	686c      	ldr	r4, [r5, #4]
 8001ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0ef      	beq.n	8001c8e <_fflush_r+0xa>
 8001cae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001cb0:	07d0      	lsls	r0, r2, #31
 8001cb2:	d404      	bmi.n	8001cbe <_fflush_r+0x3a>
 8001cb4:	0599      	lsls	r1, r3, #22
 8001cb6:	d402      	bmi.n	8001cbe <_fflush_r+0x3a>
 8001cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cba:	f000 f915 	bl	8001ee8 <__retarget_lock_acquire_recursive>
 8001cbe:	4628      	mov	r0, r5
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	f7ff ff59 	bl	8001b78 <__sflush_r>
 8001cc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001cc8:	07da      	lsls	r2, r3, #31
 8001cca:	4605      	mov	r5, r0
 8001ccc:	d4e0      	bmi.n	8001c90 <_fflush_r+0xc>
 8001cce:	89a3      	ldrh	r3, [r4, #12]
 8001cd0:	059b      	lsls	r3, r3, #22
 8001cd2:	d4dd      	bmi.n	8001c90 <_fflush_r+0xc>
 8001cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cd6:	f000 f908 	bl	8001eea <__retarget_lock_release_recursive>
 8001cda:	e7d9      	b.n	8001c90 <_fflush_r+0xc>
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <_fflush_r+0x70>)
 8001cde:	429c      	cmp	r4, r3
 8001ce0:	d101      	bne.n	8001ce6 <_fflush_r+0x62>
 8001ce2:	68ac      	ldr	r4, [r5, #8]
 8001ce4:	e7df      	b.n	8001ca6 <_fflush_r+0x22>
 8001ce6:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <_fflush_r+0x74>)
 8001ce8:	429c      	cmp	r4, r3
 8001cea:	bf08      	it	eq
 8001cec:	68ec      	ldreq	r4, [r5, #12]
 8001cee:	e7da      	b.n	8001ca6 <_fflush_r+0x22>
 8001cf0:	080022fc 	.word	0x080022fc
 8001cf4:	0800231c 	.word	0x0800231c
 8001cf8:	080022dc 	.word	0x080022dc

08001cfc <std>:
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	b510      	push	{r4, lr}
 8001d00:	4604      	mov	r4, r0
 8001d02:	e9c0 3300 	strd	r3, r3, [r0]
 8001d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d0a:	6083      	str	r3, [r0, #8]
 8001d0c:	8181      	strh	r1, [r0, #12]
 8001d0e:	6643      	str	r3, [r0, #100]	; 0x64
 8001d10:	81c2      	strh	r2, [r0, #14]
 8001d12:	6183      	str	r3, [r0, #24]
 8001d14:	4619      	mov	r1, r3
 8001d16:	2208      	movs	r2, #8
 8001d18:	305c      	adds	r0, #92	; 0x5c
 8001d1a:	f7ff fdef 	bl	80018fc <memset>
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <std+0x38>)
 8001d20:	6263      	str	r3, [r4, #36]	; 0x24
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <std+0x3c>)
 8001d24:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <std+0x40>)
 8001d28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <std+0x44>)
 8001d2c:	6224      	str	r4, [r4, #32]
 8001d2e:	6323      	str	r3, [r4, #48]	; 0x30
 8001d30:	bd10      	pop	{r4, pc}
 8001d32:	bf00      	nop
 8001d34:	08002129 	.word	0x08002129
 8001d38:	0800214b 	.word	0x0800214b
 8001d3c:	08002183 	.word	0x08002183
 8001d40:	080021a7 	.word	0x080021a7

08001d44 <_cleanup_r>:
 8001d44:	4901      	ldr	r1, [pc, #4]	; (8001d4c <_cleanup_r+0x8>)
 8001d46:	f000 b8af 	b.w	8001ea8 <_fwalk_reent>
 8001d4a:	bf00      	nop
 8001d4c:	08001c85 	.word	0x08001c85

08001d50 <__sfmoreglue>:
 8001d50:	b570      	push	{r4, r5, r6, lr}
 8001d52:	1e4a      	subs	r2, r1, #1
 8001d54:	2568      	movs	r5, #104	; 0x68
 8001d56:	4355      	muls	r5, r2
 8001d58:	460e      	mov	r6, r1
 8001d5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001d5e:	f000 f979 	bl	8002054 <_malloc_r>
 8001d62:	4604      	mov	r4, r0
 8001d64:	b140      	cbz	r0, 8001d78 <__sfmoreglue+0x28>
 8001d66:	2100      	movs	r1, #0
 8001d68:	e9c0 1600 	strd	r1, r6, [r0]
 8001d6c:	300c      	adds	r0, #12
 8001d6e:	60a0      	str	r0, [r4, #8]
 8001d70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001d74:	f7ff fdc2 	bl	80018fc <memset>
 8001d78:	4620      	mov	r0, r4
 8001d7a:	bd70      	pop	{r4, r5, r6, pc}

08001d7c <__sfp_lock_acquire>:
 8001d7c:	4801      	ldr	r0, [pc, #4]	; (8001d84 <__sfp_lock_acquire+0x8>)
 8001d7e:	f000 b8b3 	b.w	8001ee8 <__retarget_lock_acquire_recursive>
 8001d82:	bf00      	nop
 8001d84:	200000a4 	.word	0x200000a4

08001d88 <__sfp_lock_release>:
 8001d88:	4801      	ldr	r0, [pc, #4]	; (8001d90 <__sfp_lock_release+0x8>)
 8001d8a:	f000 b8ae 	b.w	8001eea <__retarget_lock_release_recursive>
 8001d8e:	bf00      	nop
 8001d90:	200000a4 	.word	0x200000a4

08001d94 <__sinit_lock_acquire>:
 8001d94:	4801      	ldr	r0, [pc, #4]	; (8001d9c <__sinit_lock_acquire+0x8>)
 8001d96:	f000 b8a7 	b.w	8001ee8 <__retarget_lock_acquire_recursive>
 8001d9a:	bf00      	nop
 8001d9c:	2000009f 	.word	0x2000009f

08001da0 <__sinit_lock_release>:
 8001da0:	4801      	ldr	r0, [pc, #4]	; (8001da8 <__sinit_lock_release+0x8>)
 8001da2:	f000 b8a2 	b.w	8001eea <__retarget_lock_release_recursive>
 8001da6:	bf00      	nop
 8001da8:	2000009f 	.word	0x2000009f

08001dac <__sinit>:
 8001dac:	b510      	push	{r4, lr}
 8001dae:	4604      	mov	r4, r0
 8001db0:	f7ff fff0 	bl	8001d94 <__sinit_lock_acquire>
 8001db4:	69a3      	ldr	r3, [r4, #24]
 8001db6:	b11b      	cbz	r3, 8001dc0 <__sinit+0x14>
 8001db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dbc:	f7ff bff0 	b.w	8001da0 <__sinit_lock_release>
 8001dc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001dc4:	6523      	str	r3, [r4, #80]	; 0x50
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <__sinit+0x68>)
 8001dc8:	4a13      	ldr	r2, [pc, #76]	; (8001e18 <__sinit+0x6c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8001dce:	42a3      	cmp	r3, r4
 8001dd0:	bf04      	itt	eq
 8001dd2:	2301      	moveq	r3, #1
 8001dd4:	61a3      	streq	r3, [r4, #24]
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f000 f820 	bl	8001e1c <__sfp>
 8001ddc:	6060      	str	r0, [r4, #4]
 8001dde:	4620      	mov	r0, r4
 8001de0:	f000 f81c 	bl	8001e1c <__sfp>
 8001de4:	60a0      	str	r0, [r4, #8]
 8001de6:	4620      	mov	r0, r4
 8001de8:	f000 f818 	bl	8001e1c <__sfp>
 8001dec:	2200      	movs	r2, #0
 8001dee:	60e0      	str	r0, [r4, #12]
 8001df0:	2104      	movs	r1, #4
 8001df2:	6860      	ldr	r0, [r4, #4]
 8001df4:	f7ff ff82 	bl	8001cfc <std>
 8001df8:	68a0      	ldr	r0, [r4, #8]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2109      	movs	r1, #9
 8001dfe:	f7ff ff7d 	bl	8001cfc <std>
 8001e02:	68e0      	ldr	r0, [r4, #12]
 8001e04:	2202      	movs	r2, #2
 8001e06:	2112      	movs	r1, #18
 8001e08:	f7ff ff78 	bl	8001cfc <std>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	61a3      	str	r3, [r4, #24]
 8001e10:	e7d2      	b.n	8001db8 <__sinit+0xc>
 8001e12:	bf00      	nop
 8001e14:	080022d8 	.word	0x080022d8
 8001e18:	08001d45 	.word	0x08001d45

08001e1c <__sfp>:
 8001e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1e:	4607      	mov	r7, r0
 8001e20:	f7ff ffac 	bl	8001d7c <__sfp_lock_acquire>
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <__sfp+0x84>)
 8001e26:	681e      	ldr	r6, [r3, #0]
 8001e28:	69b3      	ldr	r3, [r6, #24]
 8001e2a:	b913      	cbnz	r3, 8001e32 <__sfp+0x16>
 8001e2c:	4630      	mov	r0, r6
 8001e2e:	f7ff ffbd 	bl	8001dac <__sinit>
 8001e32:	3648      	adds	r6, #72	; 0x48
 8001e34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	d503      	bpl.n	8001e44 <__sfp+0x28>
 8001e3c:	6833      	ldr	r3, [r6, #0]
 8001e3e:	b30b      	cbz	r3, 8001e84 <__sfp+0x68>
 8001e40:	6836      	ldr	r6, [r6, #0]
 8001e42:	e7f7      	b.n	8001e34 <__sfp+0x18>
 8001e44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001e48:	b9d5      	cbnz	r5, 8001e80 <__sfp+0x64>
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <__sfp+0x88>)
 8001e4c:	60e3      	str	r3, [r4, #12]
 8001e4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001e52:	6665      	str	r5, [r4, #100]	; 0x64
 8001e54:	f000 f847 	bl	8001ee6 <__retarget_lock_init_recursive>
 8001e58:	f7ff ff96 	bl	8001d88 <__sfp_lock_release>
 8001e5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001e60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001e64:	6025      	str	r5, [r4, #0]
 8001e66:	61a5      	str	r5, [r4, #24]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001e70:	f7ff fd44 	bl	80018fc <memset>
 8001e74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001e78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e80:	3468      	adds	r4, #104	; 0x68
 8001e82:	e7d9      	b.n	8001e38 <__sfp+0x1c>
 8001e84:	2104      	movs	r1, #4
 8001e86:	4638      	mov	r0, r7
 8001e88:	f7ff ff62 	bl	8001d50 <__sfmoreglue>
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	6030      	str	r0, [r6, #0]
 8001e90:	2800      	cmp	r0, #0
 8001e92:	d1d5      	bne.n	8001e40 <__sfp+0x24>
 8001e94:	f7ff ff78 	bl	8001d88 <__sfp_lock_release>
 8001e98:	230c      	movs	r3, #12
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	e7ee      	b.n	8001e7c <__sfp+0x60>
 8001e9e:	bf00      	nop
 8001ea0:	080022d8 	.word	0x080022d8
 8001ea4:	ffff0001 	.word	0xffff0001

08001ea8 <_fwalk_reent>:
 8001ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001eac:	4606      	mov	r6, r0
 8001eae:	4688      	mov	r8, r1
 8001eb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001eb4:	2700      	movs	r7, #0
 8001eb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001eba:	f1b9 0901 	subs.w	r9, r9, #1
 8001ebe:	d505      	bpl.n	8001ecc <_fwalk_reent+0x24>
 8001ec0:	6824      	ldr	r4, [r4, #0]
 8001ec2:	2c00      	cmp	r4, #0
 8001ec4:	d1f7      	bne.n	8001eb6 <_fwalk_reent+0xe>
 8001ec6:	4638      	mov	r0, r7
 8001ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ecc:	89ab      	ldrh	r3, [r5, #12]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d907      	bls.n	8001ee2 <_fwalk_reent+0x3a>
 8001ed2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	d003      	beq.n	8001ee2 <_fwalk_reent+0x3a>
 8001eda:	4629      	mov	r1, r5
 8001edc:	4630      	mov	r0, r6
 8001ede:	47c0      	blx	r8
 8001ee0:	4307      	orrs	r7, r0
 8001ee2:	3568      	adds	r5, #104	; 0x68
 8001ee4:	e7e9      	b.n	8001eba <_fwalk_reent+0x12>

08001ee6 <__retarget_lock_init_recursive>:
 8001ee6:	4770      	bx	lr

08001ee8 <__retarget_lock_acquire_recursive>:
 8001ee8:	4770      	bx	lr

08001eea <__retarget_lock_release_recursive>:
 8001eea:	4770      	bx	lr

08001eec <__swhatbuf_r>:
 8001eec:	b570      	push	{r4, r5, r6, lr}
 8001eee:	460e      	mov	r6, r1
 8001ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ef4:	2900      	cmp	r1, #0
 8001ef6:	b096      	sub	sp, #88	; 0x58
 8001ef8:	4614      	mov	r4, r2
 8001efa:	461d      	mov	r5, r3
 8001efc:	da07      	bge.n	8001f0e <__swhatbuf_r+0x22>
 8001efe:	2300      	movs	r3, #0
 8001f00:	602b      	str	r3, [r5, #0]
 8001f02:	89b3      	ldrh	r3, [r6, #12]
 8001f04:	061a      	lsls	r2, r3, #24
 8001f06:	d410      	bmi.n	8001f2a <__swhatbuf_r+0x3e>
 8001f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0c:	e00e      	b.n	8001f2c <__swhatbuf_r+0x40>
 8001f0e:	466a      	mov	r2, sp
 8001f10:	f000 f970 	bl	80021f4 <_fstat_r>
 8001f14:	2800      	cmp	r0, #0
 8001f16:	dbf2      	blt.n	8001efe <__swhatbuf_r+0x12>
 8001f18:	9a01      	ldr	r2, [sp, #4]
 8001f1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001f1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001f22:	425a      	negs	r2, r3
 8001f24:	415a      	adcs	r2, r3
 8001f26:	602a      	str	r2, [r5, #0]
 8001f28:	e7ee      	b.n	8001f08 <__swhatbuf_r+0x1c>
 8001f2a:	2340      	movs	r3, #64	; 0x40
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	6023      	str	r3, [r4, #0]
 8001f30:	b016      	add	sp, #88	; 0x58
 8001f32:	bd70      	pop	{r4, r5, r6, pc}

08001f34 <__smakebuf_r>:
 8001f34:	898b      	ldrh	r3, [r1, #12]
 8001f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f38:	079d      	lsls	r5, r3, #30
 8001f3a:	4606      	mov	r6, r0
 8001f3c:	460c      	mov	r4, r1
 8001f3e:	d507      	bpl.n	8001f50 <__smakebuf_r+0x1c>
 8001f40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f44:	6023      	str	r3, [r4, #0]
 8001f46:	6123      	str	r3, [r4, #16]
 8001f48:	2301      	movs	r3, #1
 8001f4a:	6163      	str	r3, [r4, #20]
 8001f4c:	b002      	add	sp, #8
 8001f4e:	bd70      	pop	{r4, r5, r6, pc}
 8001f50:	ab01      	add	r3, sp, #4
 8001f52:	466a      	mov	r2, sp
 8001f54:	f7ff ffca 	bl	8001eec <__swhatbuf_r>
 8001f58:	9900      	ldr	r1, [sp, #0]
 8001f5a:	4605      	mov	r5, r0
 8001f5c:	4630      	mov	r0, r6
 8001f5e:	f000 f879 	bl	8002054 <_malloc_r>
 8001f62:	b948      	cbnz	r0, 8001f78 <__smakebuf_r+0x44>
 8001f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f68:	059a      	lsls	r2, r3, #22
 8001f6a:	d4ef      	bmi.n	8001f4c <__smakebuf_r+0x18>
 8001f6c:	f023 0303 	bic.w	r3, r3, #3
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	81a3      	strh	r3, [r4, #12]
 8001f76:	e7e3      	b.n	8001f40 <__smakebuf_r+0xc>
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <__smakebuf_r+0x7c>)
 8001f7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001f7c:	89a3      	ldrh	r3, [r4, #12]
 8001f7e:	6020      	str	r0, [r4, #0]
 8001f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f84:	81a3      	strh	r3, [r4, #12]
 8001f86:	9b00      	ldr	r3, [sp, #0]
 8001f88:	6163      	str	r3, [r4, #20]
 8001f8a:	9b01      	ldr	r3, [sp, #4]
 8001f8c:	6120      	str	r0, [r4, #16]
 8001f8e:	b15b      	cbz	r3, 8001fa8 <__smakebuf_r+0x74>
 8001f90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f94:	4630      	mov	r0, r6
 8001f96:	f000 f93f 	bl	8002218 <_isatty_r>
 8001f9a:	b128      	cbz	r0, 8001fa8 <__smakebuf_r+0x74>
 8001f9c:	89a3      	ldrh	r3, [r4, #12]
 8001f9e:	f023 0303 	bic.w	r3, r3, #3
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	81a3      	strh	r3, [r4, #12]
 8001fa8:	89a0      	ldrh	r0, [r4, #12]
 8001faa:	4305      	orrs	r5, r0
 8001fac:	81a5      	strh	r5, [r4, #12]
 8001fae:	e7cd      	b.n	8001f4c <__smakebuf_r+0x18>
 8001fb0:	08001d45 	.word	0x08001d45

08001fb4 <_free_r>:
 8001fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001fb6:	2900      	cmp	r1, #0
 8001fb8:	d048      	beq.n	800204c <_free_r+0x98>
 8001fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fbe:	9001      	str	r0, [sp, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f1a1 0404 	sub.w	r4, r1, #4
 8001fc6:	bfb8      	it	lt
 8001fc8:	18e4      	addlt	r4, r4, r3
 8001fca:	f000 f947 	bl	800225c <__malloc_lock>
 8001fce:	4a20      	ldr	r2, [pc, #128]	; (8002050 <_free_r+0x9c>)
 8001fd0:	9801      	ldr	r0, [sp, #4]
 8001fd2:	6813      	ldr	r3, [r2, #0]
 8001fd4:	4615      	mov	r5, r2
 8001fd6:	b933      	cbnz	r3, 8001fe6 <_free_r+0x32>
 8001fd8:	6063      	str	r3, [r4, #4]
 8001fda:	6014      	str	r4, [r2, #0]
 8001fdc:	b003      	add	sp, #12
 8001fde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001fe2:	f000 b941 	b.w	8002268 <__malloc_unlock>
 8001fe6:	42a3      	cmp	r3, r4
 8001fe8:	d90b      	bls.n	8002002 <_free_r+0x4e>
 8001fea:	6821      	ldr	r1, [r4, #0]
 8001fec:	1862      	adds	r2, r4, r1
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	bf04      	itt	eq
 8001ff2:	681a      	ldreq	r2, [r3, #0]
 8001ff4:	685b      	ldreq	r3, [r3, #4]
 8001ff6:	6063      	str	r3, [r4, #4]
 8001ff8:	bf04      	itt	eq
 8001ffa:	1852      	addeq	r2, r2, r1
 8001ffc:	6022      	streq	r2, [r4, #0]
 8001ffe:	602c      	str	r4, [r5, #0]
 8002000:	e7ec      	b.n	8001fdc <_free_r+0x28>
 8002002:	461a      	mov	r2, r3
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	b10b      	cbz	r3, 800200c <_free_r+0x58>
 8002008:	42a3      	cmp	r3, r4
 800200a:	d9fa      	bls.n	8002002 <_free_r+0x4e>
 800200c:	6811      	ldr	r1, [r2, #0]
 800200e:	1855      	adds	r5, r2, r1
 8002010:	42a5      	cmp	r5, r4
 8002012:	d10b      	bne.n	800202c <_free_r+0x78>
 8002014:	6824      	ldr	r4, [r4, #0]
 8002016:	4421      	add	r1, r4
 8002018:	1854      	adds	r4, r2, r1
 800201a:	42a3      	cmp	r3, r4
 800201c:	6011      	str	r1, [r2, #0]
 800201e:	d1dd      	bne.n	8001fdc <_free_r+0x28>
 8002020:	681c      	ldr	r4, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	6053      	str	r3, [r2, #4]
 8002026:	4421      	add	r1, r4
 8002028:	6011      	str	r1, [r2, #0]
 800202a:	e7d7      	b.n	8001fdc <_free_r+0x28>
 800202c:	d902      	bls.n	8002034 <_free_r+0x80>
 800202e:	230c      	movs	r3, #12
 8002030:	6003      	str	r3, [r0, #0]
 8002032:	e7d3      	b.n	8001fdc <_free_r+0x28>
 8002034:	6825      	ldr	r5, [r4, #0]
 8002036:	1961      	adds	r1, r4, r5
 8002038:	428b      	cmp	r3, r1
 800203a:	bf04      	itt	eq
 800203c:	6819      	ldreq	r1, [r3, #0]
 800203e:	685b      	ldreq	r3, [r3, #4]
 8002040:	6063      	str	r3, [r4, #4]
 8002042:	bf04      	itt	eq
 8002044:	1949      	addeq	r1, r1, r5
 8002046:	6021      	streq	r1, [r4, #0]
 8002048:	6054      	str	r4, [r2, #4]
 800204a:	e7c7      	b.n	8001fdc <_free_r+0x28>
 800204c:	b003      	add	sp, #12
 800204e:	bd30      	pop	{r4, r5, pc}
 8002050:	20000090 	.word	0x20000090

08002054 <_malloc_r>:
 8002054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002056:	1ccd      	adds	r5, r1, #3
 8002058:	f025 0503 	bic.w	r5, r5, #3
 800205c:	3508      	adds	r5, #8
 800205e:	2d0c      	cmp	r5, #12
 8002060:	bf38      	it	cc
 8002062:	250c      	movcc	r5, #12
 8002064:	2d00      	cmp	r5, #0
 8002066:	4606      	mov	r6, r0
 8002068:	db01      	blt.n	800206e <_malloc_r+0x1a>
 800206a:	42a9      	cmp	r1, r5
 800206c:	d903      	bls.n	8002076 <_malloc_r+0x22>
 800206e:	230c      	movs	r3, #12
 8002070:	6033      	str	r3, [r6, #0]
 8002072:	2000      	movs	r0, #0
 8002074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002076:	f000 f8f1 	bl	800225c <__malloc_lock>
 800207a:	4921      	ldr	r1, [pc, #132]	; (8002100 <_malloc_r+0xac>)
 800207c:	680a      	ldr	r2, [r1, #0]
 800207e:	4614      	mov	r4, r2
 8002080:	b99c      	cbnz	r4, 80020aa <_malloc_r+0x56>
 8002082:	4f20      	ldr	r7, [pc, #128]	; (8002104 <_malloc_r+0xb0>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b923      	cbnz	r3, 8002092 <_malloc_r+0x3e>
 8002088:	4621      	mov	r1, r4
 800208a:	4630      	mov	r0, r6
 800208c:	f000 f83c 	bl	8002108 <_sbrk_r>
 8002090:	6038      	str	r0, [r7, #0]
 8002092:	4629      	mov	r1, r5
 8002094:	4630      	mov	r0, r6
 8002096:	f000 f837 	bl	8002108 <_sbrk_r>
 800209a:	1c43      	adds	r3, r0, #1
 800209c:	d123      	bne.n	80020e6 <_malloc_r+0x92>
 800209e:	230c      	movs	r3, #12
 80020a0:	6033      	str	r3, [r6, #0]
 80020a2:	4630      	mov	r0, r6
 80020a4:	f000 f8e0 	bl	8002268 <__malloc_unlock>
 80020a8:	e7e3      	b.n	8002072 <_malloc_r+0x1e>
 80020aa:	6823      	ldr	r3, [r4, #0]
 80020ac:	1b5b      	subs	r3, r3, r5
 80020ae:	d417      	bmi.n	80020e0 <_malloc_r+0x8c>
 80020b0:	2b0b      	cmp	r3, #11
 80020b2:	d903      	bls.n	80020bc <_malloc_r+0x68>
 80020b4:	6023      	str	r3, [r4, #0]
 80020b6:	441c      	add	r4, r3
 80020b8:	6025      	str	r5, [r4, #0]
 80020ba:	e004      	b.n	80020c6 <_malloc_r+0x72>
 80020bc:	6863      	ldr	r3, [r4, #4]
 80020be:	42a2      	cmp	r2, r4
 80020c0:	bf0c      	ite	eq
 80020c2:	600b      	streq	r3, [r1, #0]
 80020c4:	6053      	strne	r3, [r2, #4]
 80020c6:	4630      	mov	r0, r6
 80020c8:	f000 f8ce 	bl	8002268 <__malloc_unlock>
 80020cc:	f104 000b 	add.w	r0, r4, #11
 80020d0:	1d23      	adds	r3, r4, #4
 80020d2:	f020 0007 	bic.w	r0, r0, #7
 80020d6:	1ac2      	subs	r2, r0, r3
 80020d8:	d0cc      	beq.n	8002074 <_malloc_r+0x20>
 80020da:	1a1b      	subs	r3, r3, r0
 80020dc:	50a3      	str	r3, [r4, r2]
 80020de:	e7c9      	b.n	8002074 <_malloc_r+0x20>
 80020e0:	4622      	mov	r2, r4
 80020e2:	6864      	ldr	r4, [r4, #4]
 80020e4:	e7cc      	b.n	8002080 <_malloc_r+0x2c>
 80020e6:	1cc4      	adds	r4, r0, #3
 80020e8:	f024 0403 	bic.w	r4, r4, #3
 80020ec:	42a0      	cmp	r0, r4
 80020ee:	d0e3      	beq.n	80020b8 <_malloc_r+0x64>
 80020f0:	1a21      	subs	r1, r4, r0
 80020f2:	4630      	mov	r0, r6
 80020f4:	f000 f808 	bl	8002108 <_sbrk_r>
 80020f8:	3001      	adds	r0, #1
 80020fa:	d1dd      	bne.n	80020b8 <_malloc_r+0x64>
 80020fc:	e7cf      	b.n	800209e <_malloc_r+0x4a>
 80020fe:	bf00      	nop
 8002100:	20000090 	.word	0x20000090
 8002104:	20000094 	.word	0x20000094

08002108 <_sbrk_r>:
 8002108:	b538      	push	{r3, r4, r5, lr}
 800210a:	4d06      	ldr	r5, [pc, #24]	; (8002124 <_sbrk_r+0x1c>)
 800210c:	2300      	movs	r3, #0
 800210e:	4604      	mov	r4, r0
 8002110:	4608      	mov	r0, r1
 8002112:	602b      	str	r3, [r5, #0]
 8002114:	f7fe fbca 	bl	80008ac <_sbrk>
 8002118:	1c43      	adds	r3, r0, #1
 800211a:	d102      	bne.n	8002122 <_sbrk_r+0x1a>
 800211c:	682b      	ldr	r3, [r5, #0]
 800211e:	b103      	cbz	r3, 8002122 <_sbrk_r+0x1a>
 8002120:	6023      	str	r3, [r4, #0]
 8002122:	bd38      	pop	{r3, r4, r5, pc}
 8002124:	200000a8 	.word	0x200000a8

08002128 <__sread>:
 8002128:	b510      	push	{r4, lr}
 800212a:	460c      	mov	r4, r1
 800212c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002130:	f000 f8a0 	bl	8002274 <_read_r>
 8002134:	2800      	cmp	r0, #0
 8002136:	bfab      	itete	ge
 8002138:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800213a:	89a3      	ldrhlt	r3, [r4, #12]
 800213c:	181b      	addge	r3, r3, r0
 800213e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002142:	bfac      	ite	ge
 8002144:	6563      	strge	r3, [r4, #84]	; 0x54
 8002146:	81a3      	strhlt	r3, [r4, #12]
 8002148:	bd10      	pop	{r4, pc}

0800214a <__swrite>:
 800214a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800214e:	461f      	mov	r7, r3
 8002150:	898b      	ldrh	r3, [r1, #12]
 8002152:	05db      	lsls	r3, r3, #23
 8002154:	4605      	mov	r5, r0
 8002156:	460c      	mov	r4, r1
 8002158:	4616      	mov	r6, r2
 800215a:	d505      	bpl.n	8002168 <__swrite+0x1e>
 800215c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002160:	2302      	movs	r3, #2
 8002162:	2200      	movs	r2, #0
 8002164:	f000 f868 	bl	8002238 <_lseek_r>
 8002168:	89a3      	ldrh	r3, [r4, #12]
 800216a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800216e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002172:	81a3      	strh	r3, [r4, #12]
 8002174:	4632      	mov	r2, r6
 8002176:	463b      	mov	r3, r7
 8002178:	4628      	mov	r0, r5
 800217a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800217e:	f000 b817 	b.w	80021b0 <_write_r>

08002182 <__sseek>:
 8002182:	b510      	push	{r4, lr}
 8002184:	460c      	mov	r4, r1
 8002186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800218a:	f000 f855 	bl	8002238 <_lseek_r>
 800218e:	1c43      	adds	r3, r0, #1
 8002190:	89a3      	ldrh	r3, [r4, #12]
 8002192:	bf15      	itete	ne
 8002194:	6560      	strne	r0, [r4, #84]	; 0x54
 8002196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800219a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800219e:	81a3      	strheq	r3, [r4, #12]
 80021a0:	bf18      	it	ne
 80021a2:	81a3      	strhne	r3, [r4, #12]
 80021a4:	bd10      	pop	{r4, pc}

080021a6 <__sclose>:
 80021a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021aa:	f000 b813 	b.w	80021d4 <_close_r>
	...

080021b0 <_write_r>:
 80021b0:	b538      	push	{r3, r4, r5, lr}
 80021b2:	4d07      	ldr	r5, [pc, #28]	; (80021d0 <_write_r+0x20>)
 80021b4:	4604      	mov	r4, r0
 80021b6:	4608      	mov	r0, r1
 80021b8:	4611      	mov	r1, r2
 80021ba:	2200      	movs	r2, #0
 80021bc:	602a      	str	r2, [r5, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	f7fe fa33 	bl	800062a <_write>
 80021c4:	1c43      	adds	r3, r0, #1
 80021c6:	d102      	bne.n	80021ce <_write_r+0x1e>
 80021c8:	682b      	ldr	r3, [r5, #0]
 80021ca:	b103      	cbz	r3, 80021ce <_write_r+0x1e>
 80021cc:	6023      	str	r3, [r4, #0]
 80021ce:	bd38      	pop	{r3, r4, r5, pc}
 80021d0:	200000a8 	.word	0x200000a8

080021d4 <_close_r>:
 80021d4:	b538      	push	{r3, r4, r5, lr}
 80021d6:	4d06      	ldr	r5, [pc, #24]	; (80021f0 <_close_r+0x1c>)
 80021d8:	2300      	movs	r3, #0
 80021da:	4604      	mov	r4, r0
 80021dc:	4608      	mov	r0, r1
 80021de:	602b      	str	r3, [r5, #0]
 80021e0:	f7fe fb2f 	bl	8000842 <_close>
 80021e4:	1c43      	adds	r3, r0, #1
 80021e6:	d102      	bne.n	80021ee <_close_r+0x1a>
 80021e8:	682b      	ldr	r3, [r5, #0]
 80021ea:	b103      	cbz	r3, 80021ee <_close_r+0x1a>
 80021ec:	6023      	str	r3, [r4, #0]
 80021ee:	bd38      	pop	{r3, r4, r5, pc}
 80021f0:	200000a8 	.word	0x200000a8

080021f4 <_fstat_r>:
 80021f4:	b538      	push	{r3, r4, r5, lr}
 80021f6:	4d07      	ldr	r5, [pc, #28]	; (8002214 <_fstat_r+0x20>)
 80021f8:	2300      	movs	r3, #0
 80021fa:	4604      	mov	r4, r0
 80021fc:	4608      	mov	r0, r1
 80021fe:	4611      	mov	r1, r2
 8002200:	602b      	str	r3, [r5, #0]
 8002202:	f7fe fb2a 	bl	800085a <_fstat>
 8002206:	1c43      	adds	r3, r0, #1
 8002208:	d102      	bne.n	8002210 <_fstat_r+0x1c>
 800220a:	682b      	ldr	r3, [r5, #0]
 800220c:	b103      	cbz	r3, 8002210 <_fstat_r+0x1c>
 800220e:	6023      	str	r3, [r4, #0]
 8002210:	bd38      	pop	{r3, r4, r5, pc}
 8002212:	bf00      	nop
 8002214:	200000a8 	.word	0x200000a8

08002218 <_isatty_r>:
 8002218:	b538      	push	{r3, r4, r5, lr}
 800221a:	4d06      	ldr	r5, [pc, #24]	; (8002234 <_isatty_r+0x1c>)
 800221c:	2300      	movs	r3, #0
 800221e:	4604      	mov	r4, r0
 8002220:	4608      	mov	r0, r1
 8002222:	602b      	str	r3, [r5, #0]
 8002224:	f7fe fb29 	bl	800087a <_isatty>
 8002228:	1c43      	adds	r3, r0, #1
 800222a:	d102      	bne.n	8002232 <_isatty_r+0x1a>
 800222c:	682b      	ldr	r3, [r5, #0]
 800222e:	b103      	cbz	r3, 8002232 <_isatty_r+0x1a>
 8002230:	6023      	str	r3, [r4, #0]
 8002232:	bd38      	pop	{r3, r4, r5, pc}
 8002234:	200000a8 	.word	0x200000a8

08002238 <_lseek_r>:
 8002238:	b538      	push	{r3, r4, r5, lr}
 800223a:	4d07      	ldr	r5, [pc, #28]	; (8002258 <_lseek_r+0x20>)
 800223c:	4604      	mov	r4, r0
 800223e:	4608      	mov	r0, r1
 8002240:	4611      	mov	r1, r2
 8002242:	2200      	movs	r2, #0
 8002244:	602a      	str	r2, [r5, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	f7fe fb22 	bl	8000890 <_lseek>
 800224c:	1c43      	adds	r3, r0, #1
 800224e:	d102      	bne.n	8002256 <_lseek_r+0x1e>
 8002250:	682b      	ldr	r3, [r5, #0]
 8002252:	b103      	cbz	r3, 8002256 <_lseek_r+0x1e>
 8002254:	6023      	str	r3, [r4, #0]
 8002256:	bd38      	pop	{r3, r4, r5, pc}
 8002258:	200000a8 	.word	0x200000a8

0800225c <__malloc_lock>:
 800225c:	4801      	ldr	r0, [pc, #4]	; (8002264 <__malloc_lock+0x8>)
 800225e:	f7ff be43 	b.w	8001ee8 <__retarget_lock_acquire_recursive>
 8002262:	bf00      	nop
 8002264:	200000a0 	.word	0x200000a0

08002268 <__malloc_unlock>:
 8002268:	4801      	ldr	r0, [pc, #4]	; (8002270 <__malloc_unlock+0x8>)
 800226a:	f7ff be3e 	b.w	8001eea <__retarget_lock_release_recursive>
 800226e:	bf00      	nop
 8002270:	200000a0 	.word	0x200000a0

08002274 <_read_r>:
 8002274:	b538      	push	{r3, r4, r5, lr}
 8002276:	4d07      	ldr	r5, [pc, #28]	; (8002294 <_read_r+0x20>)
 8002278:	4604      	mov	r4, r0
 800227a:	4608      	mov	r0, r1
 800227c:	4611      	mov	r1, r2
 800227e:	2200      	movs	r2, #0
 8002280:	602a      	str	r2, [r5, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	f7fe fac0 	bl	8000808 <_read>
 8002288:	1c43      	adds	r3, r0, #1
 800228a:	d102      	bne.n	8002292 <_read_r+0x1e>
 800228c:	682b      	ldr	r3, [r5, #0]
 800228e:	b103      	cbz	r3, 8002292 <_read_r+0x1e>
 8002290:	6023      	str	r3, [r4, #0]
 8002292:	bd38      	pop	{r3, r4, r5, pc}
 8002294:	200000a8 	.word	0x200000a8

08002298 <_init>:
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	bf00      	nop
 800229c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229e:	bc08      	pop	{r3}
 80022a0:	469e      	mov	lr, r3
 80022a2:	4770      	bx	lr

080022a4 <_fini>:
 80022a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a6:	bf00      	nop
 80022a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022aa:	bc08      	pop	{r3}
 80022ac:	469e      	mov	lr, r3
 80022ae:	4770      	bx	lr
