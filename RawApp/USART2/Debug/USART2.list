
USART2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003e9c  08003e9c  00013e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f30  08003f30  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f30  08003f30  00013f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f38  08003f38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f38  08003f38  00013f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f3c  08003f3c  00013f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08003fb0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003fb0  00020130  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcbc  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd2  00000000  00000000  0002bd5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0002dd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002e618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f89  00000000  00000000  0002ee28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000adac  00000000  00000000  00056db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f23d4  00000000  00000000  00061b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00153f31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000289c  00000000  00000000  00153f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	08003e84 	.word	0x08003e84

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	08003e84 	.word	0x08003e84

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	; 0x28
 8000534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	4b2c      	ldr	r3, [pc, #176]	; (80005f8 <MX_GPIO_Init+0xc8>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a2b      	ldr	r2, [pc, #172]	; (80005f8 <MX_GPIO_Init+0xc8>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <MX_GPIO_Init+0xc8>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055e:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <MX_GPIO_Init+0xc8>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a25      	ldr	r2, [pc, #148]	; (80005f8 <MX_GPIO_Init+0xc8>)
 8000564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <MX_GPIO_Init+0xc8>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <MX_GPIO_Init+0xc8>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a1f      	ldr	r2, [pc, #124]	; (80005f8 <MX_GPIO_Init+0xc8>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <MX_GPIO_Init+0xc8>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <MX_GPIO_Init+0xc8>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a19      	ldr	r2, [pc, #100]	; (80005f8 <MX_GPIO_Init+0xc8>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <MX_GPIO_Init+0xc8>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DS1_Pin|DS0_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2103      	movs	r1, #3
 80005aa:	4814      	ldr	r0, [pc, #80]	; (80005fc <MX_GPIO_Init+0xcc>)
 80005ac:	f000 fe7e 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DS1_Pin|DS0_Pin;
 80005b0:	2303      	movs	r3, #3
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	480d      	ldr	r0, [pc, #52]	; (80005fc <MX_GPIO_Init+0xcc>)
 80005c8:	f000 fcc4 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005da:	2303      	movs	r3, #3
 80005dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005de:	2307      	movs	r3, #7
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_GPIO_Init+0xd0>)
 80005ea:	f000 fcb3 	bl	8000f54 <HAL_GPIO_Init>

}
 80005ee:	bf00      	nop
 80005f0:	3728      	adds	r7, #40	; 0x28
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40020400 	.word	0x40020400
 8000600:	40020000 	.word	0x40020000

08000604 <__io_putchar>:
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

#ifdef __GNUC__
PUTCHAR_PROTOTYPE
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch,1,500);
 800060c:	1d39      	adds	r1, r7, #4
 800060e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000612:	2201      	movs	r2, #1
 8000614:	4803      	ldr	r0, [pc, #12]	; (8000624 <__io_putchar+0x20>)
 8000616:	f001 ff87 	bl	8002528 <HAL_UART_Transmit>
    return ch;
 800061a:	687b      	ldr	r3, [r7, #4]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000098 	.word	0x20000098

08000628 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint8_t  ch;
  HAL_UART_Receive(&huart2,(uint8_t *)&ch, 1, 500);
 8000630:	f107 010f 	add.w	r1, r7, #15
 8000634:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000638:	2201      	movs	r2, #1
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <__io_getchar+0x24>)
 800063c:	f002 f807 	bl	800264e <HAL_UART_Receive>
  return  ch;
 8000640:	7bfb      	ldrb	r3, [r7, #15]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000098 	.word	0x20000098

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fa59 	bl	8000b0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f814 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f7ff ff68 	bl	8000530 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000660:	f000 f9ae 	bl	80009c0 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(DS0_GPIO_Port, DS0_Pin);
 8000664:	2102      	movs	r1, #2
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <main+0x2c>)
 8000668:	f000 fe39 	bl	80012de <HAL_GPIO_TogglePin>
	  printf("csy swo hello world.\r\n");
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <main+0x30>)
 800066e:	f002 ffb1 	bl	80035d4 <puts>
	  HAL_Delay(100);
 8000672:	2064      	movs	r0, #100	; 0x64
 8000674:	f000 faa6 	bl	8000bc4 <HAL_Delay>
	  HAL_GPIO_TogglePin(DS0_GPIO_Port, DS0_Pin);
 8000678:	e7f4      	b.n	8000664 <main+0x14>
 800067a:	bf00      	nop
 800067c:	40020400 	.word	0x40020400
 8000680:	08003e9c 	.word	0x08003e9c

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b0b8      	sub	sp, #224	; 0xe0
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800068e:	2234      	movs	r2, #52	; 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f002 ff28 	bl	80034e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2290      	movs	r2, #144	; 0x90
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 ff19 	bl	80034e8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b6:	f000 fe2d 	bl	8001314 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	4b35      	ldr	r3, [pc, #212]	; (8000790 <SystemClock_Config+0x10c>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006be:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemClock_Config+0x10c>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	6413      	str	r3, [r2, #64]	; 0x40
 80006c6:	4b32      	ldr	r3, [pc, #200]	; (8000790 <SystemClock_Config+0x10c>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d2:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemClock_Config+0x110>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a2f      	ldr	r2, [pc, #188]	; (8000794 <SystemClock_Config+0x110>)
 80006d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006dc:	6013      	str	r3, [r2, #0]
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <SystemClock_Config+0x110>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ea:	2301      	movs	r3, #1
 80006ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000702:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000706:	230f      	movs	r3, #15
 8000708:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800070c:	23d8      	movs	r3, #216	; 0xd8
 800070e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fe06 	bl	8001334 <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800072e:	f000 f833 	bl	8000798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000744:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000748:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000754:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000758:	2105      	movs	r1, #5
 800075a:	4618      	mov	r0, r3
 800075c:	f001 f898 	bl	8001890 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000766:	f000 f817 	bl	8000798 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800076e:	2300      	movs	r3, #0
 8000770:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4618      	mov	r0, r3
 8000778:	f001 fa60 	bl	8001c3c <HAL_RCCEx_PeriphCLKConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x102>
  {
    Error_Handler();
 8000782:	f000 f809 	bl	8000798 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	37e0      	adds	r7, #224	; 0xe0
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x44>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_MspInit+0x44>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_MspInit+0x44>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_MspInit+0x44>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_MspInit+0x44>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	; 0x44
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_MspInit+0x44>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80007da:	2005      	movs	r0, #5
 80007dc:	f000 fae6 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <NMI_Handler+0x4>

080007f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <HardFault_Handler+0x4>

080007f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <MemManage_Handler+0x4>

080007fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <UsageFault_Handler+0x4>

0800080a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000838:	f000 f9a4 	bl	8000b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <USART2_IRQHandler+0x10>)
 8000846:	f001 ffd3 	bl	80027f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000098 	.word	0x20000098

08000854 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	e00a      	b.n	800087c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000866:	f7ff fedf 	bl	8000628 <__io_getchar>
 800086a:	4601      	mov	r1, r0
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	60ba      	str	r2, [r7, #8]
 8000872:	b2ca      	uxtb	r2, r1
 8000874:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	3301      	adds	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	429a      	cmp	r2, r3
 8000882:	dbf0      	blt.n	8000866 <_read+0x12>
	}

return len;
 8000884:	687b      	ldr	r3, [r7, #4]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	e009      	b.n	80008b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	60ba      	str	r2, [r7, #8]
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff feab 	bl	8000604 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	3301      	adds	r3, #1
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697a      	ldr	r2, [r7, #20]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	dbf1      	blt.n	80008a0 <_write+0x12>
	}
	return len;
 80008bc:	687b      	ldr	r3, [r7, #4]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <_close>:

int _close(int file)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
	return -1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ee:	605a      	str	r2, [r3, #4]
	return 0;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <_isatty>:

int _isatty(int file)
{
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
	return 1;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
	return 0;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000938:	4a14      	ldr	r2, [pc, #80]	; (800098c <_sbrk+0x5c>)
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <_sbrk+0x60>)
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <_sbrk+0x64>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <_sbrk+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <_sbrk+0x64>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	429a      	cmp	r2, r3
 800095e:	d207      	bcs.n	8000970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000960:	f002 fd98 	bl	8003494 <__errno>
 8000964:	4603      	mov	r3, r0
 8000966:	220c      	movs	r2, #12
 8000968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	e009      	b.n	8000984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <_sbrk+0x64>)
 8000980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20080000 	.word	0x20080000
 8000990:	00000400 	.word	0x00000400
 8000994:	2000008c 	.word	0x2000008c
 8000998:	20000130 	.word	0x20000130

0800099c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <SystemInit+0x20>)
 80009a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <SystemInit+0x20>)
 80009a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <MX_USART2_UART_Init+0x5c>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 8000a04:	f001 fd42 	bl	800248c <HAL_UART_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a0e:	f7ff fec3 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000098 	.word	0x20000098
 8000a1c:	40004400 	.word	0x40004400

08000a20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <HAL_UART_MspInit+0x8c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d12f      	bne.n	8000aa2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <HAL_UART_MspInit+0x90>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a1a      	ldr	r2, [pc, #104]	; (8000ab0 <HAL_UART_MspInit+0x90>)
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <HAL_UART_MspInit+0x90>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_UART_MspInit+0x90>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <HAL_UART_MspInit+0x90>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_UART_MspInit+0x90>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a72:	230c      	movs	r3, #12
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a82:	2307      	movs	r3, #7
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <HAL_UART_MspInit+0x94>)
 8000a8e:	f000 fa61 	bl	8000f54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 3);
 8000a92:	2203      	movs	r2, #3
 8000a94:	2103      	movs	r1, #3
 8000a96:	2026      	movs	r0, #38	; 0x26
 8000a98:	f000 f993 	bl	8000dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a9c:	2026      	movs	r0, #38	; 0x26
 8000a9e:	f000 f9ac 	bl	8000dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40004400 	.word	0x40004400
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000abe:	490e      	ldr	r1, [pc, #56]	; (8000af8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac0:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ad4:	4c0b      	ldr	r4, [pc, #44]	; (8000b04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ae2:	f7ff ff5b 	bl	800099c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f002 fcdb 	bl	80034a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aea:	f7ff fdb1 	bl	8000650 <main>
  bx  lr    
 8000aee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000afc:	08003f40 	.word	0x08003f40
  ldr r2, =_sbss
 8000b00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b04:	20000130 	.word	0x20000130

08000b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC_IRQHandler>

08000b0a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0e:	2003      	movs	r0, #3
 8000b10:	f000 f94c 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b14:	2000      	movs	r0, #0
 8000b16:	f000 f805 	bl	8000b24 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b1a:	f7ff fe43 	bl	80007a4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x54>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x58>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f967 	bl	8000e16 <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00e      	b.n	8000b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d80a      	bhi.n	8000b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 f92f 	bl	8000dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_InitTick+0x5c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000004 	.word	0x20000004

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	2000011c 	.word	0x2000011c

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	2000011c 	.word	0x2000011c

08000bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	f7ff ffee 	bl	8000bac <HAL_GetTick>
 8000bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bdc:	d005      	beq.n	8000bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_Delay+0x44>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4413      	add	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bea:	bf00      	nop
 8000bec:	f7ff ffde 	bl	8000bac <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8f7      	bhi.n	8000bec <HAL_Delay+0x28>
  {
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <__NVIC_SetPriorityGrouping+0x40>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c36:	4313      	orrs	r3, r2
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <__NVIC_SetPriorityGrouping+0x40>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00
 8000c50:	05fa0000 	.word	0x05fa0000

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4907      	ldr	r1, [pc, #28]	; (8000ca8 <__NVIC_EnableIRQ+0x38>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f7ff ff8e 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff29 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd4:	f7ff ff3e 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff ff8e 	bl	8000d00 <NVIC_EncodePriority>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff5d 	bl	8000cac <__NVIC_SetPriority>
}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff31 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffa2 	bl	8000d68 <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff feb6 	bl	8000bac <HAL_GetTick>
 8000e40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d008      	beq.n	8000e60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e052      	b.n	8000f06 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0216 	bic.w	r2, r2, #22
 8000e6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	695a      	ldr	r2, [r3, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d103      	bne.n	8000e90 <HAL_DMA_Abort+0x62>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d007      	beq.n	8000ea0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0208 	bic.w	r2, r2, #8
 8000e9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0201 	bic.w	r2, r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eb0:	e013      	b.n	8000eda <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000eb2:	f7ff fe7b 	bl	8000bac <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b05      	cmp	r3, #5
 8000ebe:	d90c      	bls.n	8000eda <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2220      	movs	r2, #32
 8000ec4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e015      	b.n	8000f06 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1e4      	bne.n	8000eb2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eec:	223f      	movs	r2, #63	; 0x3f
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2201      	movs	r2, #1
 8000f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d004      	beq.n	8000f2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2280      	movs	r2, #128	; 0x80
 8000f26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e00c      	b.n	8000f46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2205      	movs	r2, #5
 8000f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0201 	bic.w	r2, r2, #1
 8000f42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	e175      	b.n	8001260 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f74:	2201      	movs	r2, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f040 8164 	bne.w	800125a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d00b      	beq.n	8000fb2 <HAL_GPIO_Init+0x5e>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d007      	beq.n	8000fb2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa6:	2b11      	cmp	r3, #17
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b12      	cmp	r3, #18
 8000fb0:	d130      	bne.n	8001014 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	091b      	lsrs	r3, r3, #4
 8000ffe:	f003 0201 	and.w	r2, r3, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x100>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b12      	cmp	r3, #18
 8001052:	d123      	bne.n	800109c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	69b9      	ldr	r1, [r7, #24]
 8001098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0203 	and.w	r2, r3, #3
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80be 	beq.w	800125a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	4b66      	ldr	r3, [pc, #408]	; (8001278 <HAL_GPIO_Init+0x324>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a65      	ldr	r2, [pc, #404]	; (8001278 <HAL_GPIO_Init+0x324>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b63      	ldr	r3, [pc, #396]	; (8001278 <HAL_GPIO_Init+0x324>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010f6:	4a61      	ldr	r2, [pc, #388]	; (800127c <HAL_GPIO_Init+0x328>)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a58      	ldr	r2, [pc, #352]	; (8001280 <HAL_GPIO_Init+0x32c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d037      	beq.n	8001192 <HAL_GPIO_Init+0x23e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a57      	ldr	r2, [pc, #348]	; (8001284 <HAL_GPIO_Init+0x330>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d031      	beq.n	800118e <HAL_GPIO_Init+0x23a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a56      	ldr	r2, [pc, #344]	; (8001288 <HAL_GPIO_Init+0x334>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d02b      	beq.n	800118a <HAL_GPIO_Init+0x236>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a55      	ldr	r2, [pc, #340]	; (800128c <HAL_GPIO_Init+0x338>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d025      	beq.n	8001186 <HAL_GPIO_Init+0x232>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a54      	ldr	r2, [pc, #336]	; (8001290 <HAL_GPIO_Init+0x33c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d01f      	beq.n	8001182 <HAL_GPIO_Init+0x22e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a53      	ldr	r2, [pc, #332]	; (8001294 <HAL_GPIO_Init+0x340>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d019      	beq.n	800117e <HAL_GPIO_Init+0x22a>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a52      	ldr	r2, [pc, #328]	; (8001298 <HAL_GPIO_Init+0x344>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d013      	beq.n	800117a <HAL_GPIO_Init+0x226>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a51      	ldr	r2, [pc, #324]	; (800129c <HAL_GPIO_Init+0x348>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d00d      	beq.n	8001176 <HAL_GPIO_Init+0x222>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a50      	ldr	r2, [pc, #320]	; (80012a0 <HAL_GPIO_Init+0x34c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d007      	beq.n	8001172 <HAL_GPIO_Init+0x21e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4f      	ldr	r2, [pc, #316]	; (80012a4 <HAL_GPIO_Init+0x350>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d101      	bne.n	800116e <HAL_GPIO_Init+0x21a>
 800116a:	2309      	movs	r3, #9
 800116c:	e012      	b.n	8001194 <HAL_GPIO_Init+0x240>
 800116e:	230a      	movs	r3, #10
 8001170:	e010      	b.n	8001194 <HAL_GPIO_Init+0x240>
 8001172:	2308      	movs	r3, #8
 8001174:	e00e      	b.n	8001194 <HAL_GPIO_Init+0x240>
 8001176:	2307      	movs	r3, #7
 8001178:	e00c      	b.n	8001194 <HAL_GPIO_Init+0x240>
 800117a:	2306      	movs	r3, #6
 800117c:	e00a      	b.n	8001194 <HAL_GPIO_Init+0x240>
 800117e:	2305      	movs	r3, #5
 8001180:	e008      	b.n	8001194 <HAL_GPIO_Init+0x240>
 8001182:	2304      	movs	r3, #4
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x240>
 8001186:	2303      	movs	r3, #3
 8001188:	e004      	b.n	8001194 <HAL_GPIO_Init+0x240>
 800118a:	2302      	movs	r3, #2
 800118c:	e002      	b.n	8001194 <HAL_GPIO_Init+0x240>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <HAL_GPIO_Init+0x240>
 8001192:	2300      	movs	r3, #0
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	f002 0203 	and.w	r2, r2, #3
 800119a:	0092      	lsls	r2, r2, #2
 800119c:	4093      	lsls	r3, r2
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011a4:	4935      	ldr	r1, [pc, #212]	; (800127c <HAL_GPIO_Init+0x328>)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b2:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <HAL_GPIO_Init+0x354>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d6:	4a34      	ldr	r2, [pc, #208]	; (80012a8 <HAL_GPIO_Init+0x354>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011dc:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <HAL_GPIO_Init+0x354>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001200:	4a29      	ldr	r2, [pc, #164]	; (80012a8 <HAL_GPIO_Init+0x354>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001206:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <HAL_GPIO_Init+0x354>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <HAL_GPIO_Init+0x354>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <HAL_GPIO_Init+0x354>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <HAL_GPIO_Init+0x354>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3301      	adds	r3, #1
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2b0f      	cmp	r3, #15
 8001264:	f67f ae86 	bls.w	8000f74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40013800 	.word	0x40013800
 8001280:	40020000 	.word	0x40020000
 8001284:	40020400 	.word	0x40020400
 8001288:	40020800 	.word	0x40020800
 800128c:	40020c00 	.word	0x40020c00
 8001290:	40021000 	.word	0x40021000
 8001294:	40021400 	.word	0x40021400
 8001298:	40021800 	.word	0x40021800
 800129c:	40021c00 	.word	0x40021c00
 80012a0:	40022000 	.word	0x40022000
 80012a4:	40022400 	.word	0x40022400
 80012a8:	40013c00 	.word	0x40013c00

080012ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
 80012b8:	4613      	mov	r3, r2
 80012ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012bc:	787b      	ldrb	r3, [r7, #1]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80012c8:	e003      	b.n	80012d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	041a      	lsls	r2, r3, #16
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	619a      	str	r2, [r3, #24]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012de:	b480      	push	{r7}
 80012e0:	b085      	sub	sp, #20
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	460b      	mov	r3, r1
 80012e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f0:	887a      	ldrh	r2, [r7, #2]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4013      	ands	r3, r2
 80012f6:	041a      	lsls	r2, r3, #16
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	887b      	ldrh	r3, [r7, #2]
 80012fe:	400b      	ands	r3, r1
 8001300:	431a      	orrs	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	619a      	str	r2, [r3, #24]
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800131e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40007000 	.word	0x40007000

08001334 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e29b      	b.n	8001882 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8087 	beq.w	8001466 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001358:	4b96      	ldr	r3, [pc, #600]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	2b04      	cmp	r3, #4
 8001362:	d00c      	beq.n	800137e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001364:	4b93      	ldr	r3, [pc, #588]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	2b08      	cmp	r3, #8
 800136e:	d112      	bne.n	8001396 <HAL_RCC_OscConfig+0x62>
 8001370:	4b90      	ldr	r3, [pc, #576]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800137c:	d10b      	bne.n	8001396 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137e:	4b8d      	ldr	r3, [pc, #564]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d06c      	beq.n	8001464 <HAL_RCC_OscConfig+0x130>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d168      	bne.n	8001464 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e275      	b.n	8001882 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x7a>
 80013a0:	4b84      	ldr	r3, [pc, #528]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a83      	ldr	r2, [pc, #524]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 80013a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	e02e      	b.n	800140c <HAL_RCC_OscConfig+0xd8>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x9c>
 80013b6:	4b7f      	ldr	r3, [pc, #508]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a7e      	ldr	r2, [pc, #504]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 80013bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	4b7c      	ldr	r3, [pc, #496]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a7b      	ldr	r2, [pc, #492]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 80013c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e01d      	b.n	800140c <HAL_RCC_OscConfig+0xd8>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0xc0>
 80013da:	4b76      	ldr	r3, [pc, #472]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a75      	ldr	r2, [pc, #468]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 80013e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b73      	ldr	r3, [pc, #460]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a72      	ldr	r2, [pc, #456]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0xd8>
 80013f4:	4b6f      	ldr	r3, [pc, #444]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a6e      	ldr	r2, [pc, #440]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 80013fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b6c      	ldr	r3, [pc, #432]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a6b      	ldr	r2, [pc, #428]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 8001406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d013      	beq.n	800143c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff fbca 	bl	8000bac <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fbc6 	bl	8000bac <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e229      	b.n	8001882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	4b61      	ldr	r3, [pc, #388]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0xe8>
 800143a:	e014      	b.n	8001466 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff fbb6 	bl	8000bac <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fbb2 	bl	8000bac <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e215      	b.n	8001882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001456:	4b57      	ldr	r3, [pc, #348]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x110>
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d069      	beq.n	8001546 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001472:	4b50      	ldr	r3, [pc, #320]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00b      	beq.n	8001496 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147e:	4b4d      	ldr	r3, [pc, #308]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b08      	cmp	r3, #8
 8001488:	d11c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x190>
 800148a:	4b4a      	ldr	r3, [pc, #296]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d116      	bne.n	80014c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	4b47      	ldr	r3, [pc, #284]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <HAL_RCC_OscConfig+0x17a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d001      	beq.n	80014ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e1e9      	b.n	8001882 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ae:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	493d      	ldr	r1, [pc, #244]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	e040      	b.n	8001546 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d023      	beq.n	8001514 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014cc:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a38      	ldr	r2, [pc, #224]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff fb68 	bl	8000bac <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e0:	f7ff fb64 	bl	8000bac <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e1c7      	b.n	8001882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f2:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fe:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4929      	ldr	r1, [pc, #164]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]
 8001512:	e018      	b.n	8001546 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a26      	ldr	r2, [pc, #152]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 800151a:	f023 0301 	bic.w	r3, r3, #1
 800151e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff fb44 	bl	8000bac <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001528:	f7ff fb40 	bl	8000bac <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e1a3      	b.n	8001882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d038      	beq.n	80015c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d019      	beq.n	800158e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 800155c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800155e:	4a15      	ldr	r2, [pc, #84]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001566:	f7ff fb21 	bl	8000bac <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800156e:	f7ff fb1d 	bl	8000bac <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e180      	b.n	8001882 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 8001582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x23a>
 800158c:	e01a      	b.n	80015c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 8001590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <HAL_RCC_OscConfig+0x280>)
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159a:	f7ff fb07 	bl	8000bac <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a0:	e00a      	b.n	80015b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a2:	f7ff fb03 	bl	8000bac <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d903      	bls.n	80015b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e166      	b.n	8001882 <HAL_RCC_OscConfig+0x54e>
 80015b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b8:	4b92      	ldr	r3, [pc, #584]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 80015ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1ee      	bne.n	80015a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80a4 	beq.w	800171a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d2:	4b8c      	ldr	r3, [pc, #560]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10d      	bne.n	80015fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	4b89      	ldr	r3, [pc, #548]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a88      	ldr	r2, [pc, #544]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ea:	4b86      	ldr	r3, [pc, #536]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f6:	2301      	movs	r3, #1
 80015f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015fa:	4b83      	ldr	r3, [pc, #524]	; (8001808 <HAL_RCC_OscConfig+0x4d4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001602:	2b00      	cmp	r3, #0
 8001604:	d118      	bne.n	8001638 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001606:	4b80      	ldr	r3, [pc, #512]	; (8001808 <HAL_RCC_OscConfig+0x4d4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a7f      	ldr	r2, [pc, #508]	; (8001808 <HAL_RCC_OscConfig+0x4d4>)
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001612:	f7ff facb 	bl	8000bac <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161a:	f7ff fac7 	bl	8000bac <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b64      	cmp	r3, #100	; 0x64
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e12a      	b.n	8001882 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162c:	4b76      	ldr	r3, [pc, #472]	; (8001808 <HAL_RCC_OscConfig+0x4d4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d106      	bne.n	800164e <HAL_RCC_OscConfig+0x31a>
 8001640:	4b70      	ldr	r3, [pc, #448]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	4a6f      	ldr	r2, [pc, #444]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6713      	str	r3, [r2, #112]	; 0x70
 800164c:	e02d      	b.n	80016aa <HAL_RCC_OscConfig+0x376>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0x33c>
 8001656:	4b6b      	ldr	r3, [pc, #428]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 8001658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165a:	4a6a      	ldr	r2, [pc, #424]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	6713      	str	r3, [r2, #112]	; 0x70
 8001662:	4b68      	ldr	r3, [pc, #416]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001666:	4a67      	ldr	r2, [pc, #412]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 8001668:	f023 0304 	bic.w	r3, r3, #4
 800166c:	6713      	str	r3, [r2, #112]	; 0x70
 800166e:	e01c      	b.n	80016aa <HAL_RCC_OscConfig+0x376>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b05      	cmp	r3, #5
 8001676:	d10c      	bne.n	8001692 <HAL_RCC_OscConfig+0x35e>
 8001678:	4b62      	ldr	r3, [pc, #392]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	4a61      	ldr	r2, [pc, #388]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 800167e:	f043 0304 	orr.w	r3, r3, #4
 8001682:	6713      	str	r3, [r2, #112]	; 0x70
 8001684:	4b5f      	ldr	r3, [pc, #380]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 8001686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001688:	4a5e      	ldr	r2, [pc, #376]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6713      	str	r3, [r2, #112]	; 0x70
 8001690:	e00b      	b.n	80016aa <HAL_RCC_OscConfig+0x376>
 8001692:	4b5c      	ldr	r3, [pc, #368]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 8001694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001696:	4a5b      	ldr	r2, [pc, #364]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	6713      	str	r3, [r2, #112]	; 0x70
 800169e:	4b59      	ldr	r3, [pc, #356]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a2:	4a58      	ldr	r2, [pc, #352]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 80016a4:	f023 0304 	bic.w	r3, r3, #4
 80016a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d015      	beq.n	80016de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b2:	f7ff fa7b 	bl	8000bac <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b8:	e00a      	b.n	80016d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ba:	f7ff fa77 	bl	8000bac <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e0d8      	b.n	8001882 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d0:	4b4c      	ldr	r3, [pc, #304]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ee      	beq.n	80016ba <HAL_RCC_OscConfig+0x386>
 80016dc:	e014      	b.n	8001708 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff fa65 	bl	8000bac <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff fa61 	bl	8000bac <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e0c2      	b.n	8001882 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fc:	4b41      	ldr	r3, [pc, #260]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1ee      	bne.n	80016e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d105      	bne.n	800171a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800170e:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a3c      	ldr	r2, [pc, #240]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 8001714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80ae 	beq.w	8001880 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001724:	4b37      	ldr	r3, [pc, #220]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b08      	cmp	r3, #8
 800172e:	d06d      	beq.n	800180c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d14b      	bne.n	80017d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001738:	4b32      	ldr	r3, [pc, #200]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a31      	ldr	r2, [pc, #196]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 800173e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fa32 	bl	8000bac <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174c:	f7ff fa2e 	bl	8000bac <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e091      	b.n	8001882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175e:	4b29      	ldr	r3, [pc, #164]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69da      	ldr	r2, [r3, #28]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	019b      	lsls	r3, r3, #6
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001780:	085b      	lsrs	r3, r3, #1
 8001782:	3b01      	subs	r3, #1
 8001784:	041b      	lsls	r3, r3, #16
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	061b      	lsls	r3, r3, #24
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	071b      	lsls	r3, r3, #28
 8001796:	491b      	ldr	r1, [pc, #108]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 80017a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fa00 	bl	8000bac <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff f9fc 	bl	8000bac <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e05f      	b.n	8001882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x47c>
 80017ce:	e057      	b.n	8001880 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 80017d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017dc:	f7ff f9e6 	bl	8000bac <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff f9e2 	bl	8000bac <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e045      	b.n	8001882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	4b03      	ldr	r3, [pc, #12]	; (8001804 <HAL_RCC_OscConfig+0x4d0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x4b0>
 8001802:	e03d      	b.n	8001880 <HAL_RCC_OscConfig+0x54c>
 8001804:	40023800 	.word	0x40023800
 8001808:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800180c:	4b1f      	ldr	r3, [pc, #124]	; (800188c <HAL_RCC_OscConfig+0x558>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d030      	beq.n	800187c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d129      	bne.n	800187c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001832:	429a      	cmp	r2, r3
 8001834:	d122      	bne.n	800187c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800183c:	4013      	ands	r3, r2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001842:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001844:	4293      	cmp	r3, r2
 8001846:	d119      	bne.n	800187c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001852:	085b      	lsrs	r3, r3, #1
 8001854:	3b01      	subs	r3, #1
 8001856:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d10f      	bne.n	800187c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001868:	429a      	cmp	r2, r3
 800186a:	d107      	bne.n	800187c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800

08001890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0d0      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a8:	4b6a      	ldr	r3, [pc, #424]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 030f 	and.w	r3, r3, #15
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d910      	bls.n	80018d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b67      	ldr	r3, [pc, #412]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 020f 	bic.w	r2, r3, #15
 80018be:	4965      	ldr	r1, [pc, #404]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b63      	ldr	r3, [pc, #396]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0b8      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d020      	beq.n	8001926 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f0:	4b59      	ldr	r3, [pc, #356]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	4a58      	ldr	r2, [pc, #352]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 80018f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001908:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a52      	ldr	r2, [pc, #328]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 800190e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001912:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001914:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	494d      	ldr	r1, [pc, #308]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d040      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d107      	bne.n	800194a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d115      	bne.n	8001972 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e07f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001952:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d109      	bne.n	8001972 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e073      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001962:	4b3d      	ldr	r3, [pc, #244]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e06b      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001972:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f023 0203 	bic.w	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4936      	ldr	r1, [pc, #216]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 8001980:	4313      	orrs	r3, r2
 8001982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001984:	f7ff f912 	bl	8000bac <HAL_GetTick>
 8001988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198c:	f7ff f90e 	bl	8000bac <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	; 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e053      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 020c 	and.w	r2, r3, #12
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d1eb      	bne.n	800198c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019b4:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d210      	bcs.n	80019e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 020f 	bic.w	r2, r3, #15
 80019ca:	4922      	ldr	r1, [pc, #136]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e032      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d008      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4916      	ldr	r1, [pc, #88]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d009      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	490e      	ldr	r1, [pc, #56]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a22:	f000 f821 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8001a26:	4602      	mov	r2, r0
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	490a      	ldr	r1, [pc, #40]	; (8001a5c <HAL_RCC_ClockConfig+0x1cc>)
 8001a34:	5ccb      	ldrb	r3, [r1, r3]
 8001a36:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3a:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <HAL_RCC_ClockConfig+0x1d0>)
 8001a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_RCC_ClockConfig+0x1d4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f86e 	bl	8000b24 <HAL_InitTick>

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023c00 	.word	0x40023c00
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	08003eb4 	.word	0x08003eb4
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000004 	.word	0x20000004

08001a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a6e:	2100      	movs	r1, #0
 8001a70:	6079      	str	r1, [r7, #4]
 8001a72:	2100      	movs	r1, #0
 8001a74:	60f9      	str	r1, [r7, #12]
 8001a76:	2100      	movs	r1, #0
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a7e:	4952      	ldr	r1, [pc, #328]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a80:	6889      	ldr	r1, [r1, #8]
 8001a82:	f001 010c 	and.w	r1, r1, #12
 8001a86:	2908      	cmp	r1, #8
 8001a88:	d00d      	beq.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x3e>
 8001a8a:	2908      	cmp	r1, #8
 8001a8c:	f200 8094 	bhi.w	8001bb8 <HAL_RCC_GetSysClockFreq+0x150>
 8001a90:	2900      	cmp	r1, #0
 8001a92:	d002      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x32>
 8001a94:	2904      	cmp	r1, #4
 8001a96:	d003      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x38>
 8001a98:	e08e      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a9a:	4b4c      	ldr	r3, [pc, #304]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x164>)
 8001a9c:	60bb      	str	r3, [r7, #8]
      break;
 8001a9e:	e08e      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aa0:	4b4b      	ldr	r3, [pc, #300]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001aa2:	60bb      	str	r3, [r7, #8]
      break;
 8001aa4:	e08b      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa6:	4948      	ldr	r1, [pc, #288]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001aa8:	6849      	ldr	r1, [r1, #4]
 8001aaa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001aae:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ab0:	4945      	ldr	r1, [pc, #276]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ab2:	6849      	ldr	r1, [r1, #4]
 8001ab4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001ab8:	2900      	cmp	r1, #0
 8001aba:	d024      	beq.n	8001b06 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001abc:	4942      	ldr	r1, [pc, #264]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001abe:	6849      	ldr	r1, [r1, #4]
 8001ac0:	0989      	lsrs	r1, r1, #6
 8001ac2:	4608      	mov	r0, r1
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001acc:	f04f 0500 	mov.w	r5, #0
 8001ad0:	ea00 0204 	and.w	r2, r0, r4
 8001ad4:	ea01 0305 	and.w	r3, r1, r5
 8001ad8:	493d      	ldr	r1, [pc, #244]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ada:	fb01 f003 	mul.w	r0, r1, r3
 8001ade:	2100      	movs	r1, #0
 8001ae0:	fb01 f102 	mul.w	r1, r1, r2
 8001ae4:	1844      	adds	r4, r0, r1
 8001ae6:	493a      	ldr	r1, [pc, #232]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ae8:	fba2 0101 	umull	r0, r1, r2, r1
 8001aec:	1863      	adds	r3, r4, r1
 8001aee:	4619      	mov	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	461a      	mov	r2, r3
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	f7fe fb9e 	bl	8000238 <__aeabi_uldivmod>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4613      	mov	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e04a      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b06:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	099b      	lsrs	r3, r3, #6
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b16:	f04f 0100 	mov.w	r1, #0
 8001b1a:	ea02 0400 	and.w	r4, r2, r0
 8001b1e:	ea03 0501 	and.w	r5, r3, r1
 8001b22:	4620      	mov	r0, r4
 8001b24:	4629      	mov	r1, r5
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	014b      	lsls	r3, r1, #5
 8001b30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b34:	0142      	lsls	r2, r0, #5
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	1b00      	subs	r0, r0, r4
 8001b3c:	eb61 0105 	sbc.w	r1, r1, r5
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	018b      	lsls	r3, r1, #6
 8001b4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b4e:	0182      	lsls	r2, r0, #6
 8001b50:	1a12      	subs	r2, r2, r0
 8001b52:	eb63 0301 	sbc.w	r3, r3, r1
 8001b56:	f04f 0000 	mov.w	r0, #0
 8001b5a:	f04f 0100 	mov.w	r1, #0
 8001b5e:	00d9      	lsls	r1, r3, #3
 8001b60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b64:	00d0      	lsls	r0, r2, #3
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	1912      	adds	r2, r2, r4
 8001b6c:	eb45 0303 	adc.w	r3, r5, r3
 8001b70:	f04f 0000 	mov.w	r0, #0
 8001b74:	f04f 0100 	mov.w	r1, #0
 8001b78:	0299      	lsls	r1, r3, #10
 8001b7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b7e:	0290      	lsls	r0, r2, #10
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	f7fe fb52 	bl	8000238 <__aeabi_uldivmod>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	0c1b      	lsrs	r3, r3, #16
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	60bb      	str	r3, [r7, #8]
      break;
 8001bb6:	e002      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x164>)
 8001bba:	60bb      	str	r3, [r7, #8]
      break;
 8001bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bbe:	68bb      	ldr	r3, [r7, #8]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	00f42400 	.word	0x00f42400
 8001bd0:	017d7840 	.word	0x017d7840

08001bd4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000000 	.word	0x20000000

08001bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bf0:	f7ff fff0 	bl	8001bd4 <HAL_RCC_GetHCLKFreq>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	0a9b      	lsrs	r3, r3, #10
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	4903      	ldr	r1, [pc, #12]	; (8001c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c02:	5ccb      	ldrb	r3, [r1, r3]
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	08003ec4 	.word	0x08003ec4

08001c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c18:	f7ff ffdc 	bl	8001bd4 <HAL_RCC_GetHCLKFreq>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	0b5b      	lsrs	r3, r3, #13
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	4903      	ldr	r1, [pc, #12]	; (8001c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c2a:	5ccb      	ldrb	r3, [r1, r3]
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40023800 	.word	0x40023800
 8001c38:	08003ec4 	.word	0x08003ec4

08001c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d012      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c64:	4b69      	ldr	r3, [pc, #420]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4a68      	ldr	r2, [pc, #416]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c6e:	6093      	str	r3, [r2, #8]
 8001c70:	4b66      	ldr	r3, [pc, #408]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c78:	4964      	ldr	r1, [pc, #400]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d017      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c96:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca4:	4959      	ldr	r1, [pc, #356]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cb4:	d101      	bne.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d017      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001cd2:	4b4e      	ldr	r3, [pc, #312]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	494a      	ldr	r1, [pc, #296]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 808b 	beq.w	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	4b3a      	ldr	r3, [pc, #232]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	4a39      	ldr	r2, [pc, #228]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2c:	4b37      	ldr	r3, [pc, #220]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d38:	4b35      	ldr	r3, [pc, #212]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a34      	ldr	r2, [pc, #208]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d44:	f7fe ff32 	bl	8000bac <HAL_GetTick>
 8001d48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4c:	f7fe ff2e 	bl	8000bac <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e38f      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d5e:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d6a:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d035      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d02e      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d88:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da2:	4a1a      	ldr	r2, [pc, #104]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001daa:	4a18      	ldr	r2, [pc, #96]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d114      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7fe fef6 	bl	8000bac <HAL_GetTick>
 8001dc0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc2:	e00a      	b.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc4:	f7fe fef2 	bl	8000bac <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e351      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0ee      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001df2:	d111      	bne.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e02:	400b      	ands	r3, r1
 8001e04:	4901      	ldr	r1, [pc, #4]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	608b      	str	r3, [r1, #8]
 8001e0a:	e00b      	b.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40007000 	.word	0x40007000
 8001e14:	0ffffcff 	.word	0x0ffffcff
 8001e18:	4bb3      	ldr	r3, [pc, #716]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4ab2      	ldr	r2, [pc, #712]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e22:	6093      	str	r3, [r2, #8]
 8001e24:	4bb0      	ldr	r3, [pc, #704]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e30:	49ad      	ldr	r1, [pc, #692]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d010      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e42:	4ba9      	ldr	r3, [pc, #676]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e48:	4aa7      	ldr	r2, [pc, #668]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e52:	4ba5      	ldr	r3, [pc, #660]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5c:	49a2      	ldr	r1, [pc, #648]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e70:	4b9d      	ldr	r3, [pc, #628]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e7e:	499a      	ldr	r1, [pc, #616]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00a      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e92:	4b95      	ldr	r3, [pc, #596]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ea0:	4991      	ldr	r1, [pc, #580]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00a      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001eb4:	4b8c      	ldr	r3, [pc, #560]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ec2:	4989      	ldr	r1, [pc, #548]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ed6:	4b84      	ldr	r3, [pc, #528]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001edc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee4:	4980      	ldr	r1, [pc, #512]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00a      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ef8:	4b7b      	ldr	r3, [pc, #492]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efe:	f023 0203 	bic.w	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4978      	ldr	r1, [pc, #480]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f1a:	4b73      	ldr	r3, [pc, #460]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f20:	f023 020c 	bic.w	r2, r3, #12
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f28:	496f      	ldr	r1, [pc, #444]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00a      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f3c:	4b6a      	ldr	r3, [pc, #424]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	4967      	ldr	r1, [pc, #412]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00a      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f5e:	4b62      	ldr	r3, [pc, #392]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6c:	495e      	ldr	r1, [pc, #376]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00a      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f80:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	4956      	ldr	r1, [pc, #344]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001fa2:	4b51      	ldr	r3, [pc, #324]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	494d      	ldr	r1, [pc, #308]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00a      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001fc4:	4b48      	ldr	r3, [pc, #288]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	4945      	ldr	r1, [pc, #276]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00a      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001fe6:	4b40      	ldr	r3, [pc, #256]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff4:	493c      	ldr	r1, [pc, #240]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00a      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002008:	4b37      	ldr	r3, [pc, #220]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002016:	4934      	ldr	r1, [pc, #208]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002018:	4313      	orrs	r3, r2
 800201a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d011      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800202a:	4b2f      	ldr	r3, [pc, #188]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002030:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002038:	492b      	ldr	r1, [pc, #172]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002044:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002048:	d101      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800204a:	2301      	movs	r3, #1
 800204c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800205a:	2301      	movs	r3, #1
 800205c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002070:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002078:	491b      	ldr	r1, [pc, #108]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00b      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002092:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800209c:	4912      	ldr	r1, [pc, #72]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00b      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80020b0:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020c0:	4909      	ldr	r1, [pc, #36]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00f      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e4:	e002      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	4986      	ldr	r1, [pc, #536]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00b      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002100:	4b81      	ldr	r3, [pc, #516]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002102:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002106:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002110:	497d      	ldr	r1, [pc, #500]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d006      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 80d6 	beq.w	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800212c:	4b76      	ldr	r3, [pc, #472]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a75      	ldr	r2, [pc, #468]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002132:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002138:	f7fe fd38 	bl	8000bac <HAL_GetTick>
 800213c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002140:	f7fe fd34 	bl	8000bac <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e195      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002152:	4b6d      	ldr	r3, [pc, #436]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d021      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x572>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216e:	2b00      	cmp	r3, #0
 8002170:	d11d      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002172:	4b65      	ldr	r3, [pc, #404]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002180:	4b61      	ldr	r3, [pc, #388]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002186:	0e1b      	lsrs	r3, r3, #24
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	019a      	lsls	r2, r3, #6
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	041b      	lsls	r3, r3, #16
 8002198:	431a      	orrs	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	071b      	lsls	r3, r3, #28
 80021a6:	4958      	ldr	r1, [pc, #352]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d004      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021c2:	d00a      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d02e      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d8:	d129      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021da:	4b4b      	ldr	r3, [pc, #300]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021e8:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ee:	0f1b      	lsrs	r3, r3, #28
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	019a      	lsls	r2, r3, #6
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	041b      	lsls	r3, r3, #16
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	061b      	lsls	r3, r3, #24
 8002208:	431a      	orrs	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	071b      	lsls	r3, r3, #28
 800220e:	493e      	ldr	r1, [pc, #248]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002216:	4b3c      	ldr	r3, [pc, #240]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800221c:	f023 021f 	bic.w	r2, r3, #31
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	3b01      	subs	r3, #1
 8002226:	4938      	ldr	r1, [pc, #224]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d01d      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800223a:	4b33      	ldr	r3, [pc, #204]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800223c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002240:	0e1b      	lsrs	r3, r3, #24
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002248:	4b2f      	ldr	r3, [pc, #188]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800224a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800224e:	0f1b      	lsrs	r3, r3, #28
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	019a      	lsls	r2, r3, #6
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	041b      	lsls	r3, r3, #16
 8002262:	431a      	orrs	r2, r3
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	061b      	lsls	r3, r3, #24
 8002268:	431a      	orrs	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	071b      	lsls	r3, r3, #28
 800226e:	4926      	ldr	r1, [pc, #152]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d011      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	019a      	lsls	r2, r3, #6
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	041b      	lsls	r3, r3, #16
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	061b      	lsls	r3, r3, #24
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	071b      	lsls	r3, r3, #28
 800229e:	491a      	ldr	r1, [pc, #104]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022a6:	4b18      	ldr	r3, [pc, #96]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a17      	ldr	r2, [pc, #92]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022b2:	f7fe fc7b 	bl	8000bac <HAL_GetTick>
 80022b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022ba:	f7fe fc77 	bl	8000bac <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b64      	cmp	r3, #100	; 0x64
 80022c6:	d901      	bls.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e0d8      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022cc:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	f040 80ce 	bne.w	800247c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a08      	ldr	r2, [pc, #32]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ec:	f7fe fc5e 	bl	8000bac <HAL_GetTick>
 80022f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022f2:	e00b      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022f4:	f7fe fc5a 	bl	8000bac <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d904      	bls.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e0bb      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800230c:	4b5e      	ldr	r3, [pc, #376]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002318:	d0ec      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002336:	2b00      	cmp	r3, #0
 8002338:	d02e      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d12a      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002342:	4b51      	ldr	r3, [pc, #324]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002348:	0c1b      	lsrs	r3, r3, #16
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002350:	4b4d      	ldr	r3, [pc, #308]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	0f1b      	lsrs	r3, r3, #28
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	019a      	lsls	r2, r3, #6
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	041b      	lsls	r3, r3, #16
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	061b      	lsls	r3, r3, #24
 8002370:	431a      	orrs	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	071b      	lsls	r3, r3, #28
 8002376:	4944      	ldr	r1, [pc, #272]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800237e:	4b42      	ldr	r3, [pc, #264]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002384:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	3b01      	subs	r3, #1
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	493d      	ldr	r1, [pc, #244]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d022      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ac:	d11d      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023ae:	4b36      	ldr	r3, [pc, #216]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b4:	0e1b      	lsrs	r3, r3, #24
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023bc:	4b32      	ldr	r3, [pc, #200]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	0f1b      	lsrs	r3, r3, #28
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	019a      	lsls	r2, r3, #6
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	041b      	lsls	r3, r3, #16
 80023d6:	431a      	orrs	r2, r3
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	061b      	lsls	r3, r3, #24
 80023dc:	431a      	orrs	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	071b      	lsls	r3, r3, #28
 80023e2:	4929      	ldr	r1, [pc, #164]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d028      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023f6:	4b24      	ldr	r3, [pc, #144]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fc:	0e1b      	lsrs	r3, r3, #24
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002404:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	0c1b      	lsrs	r3, r3, #16
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	019a      	lsls	r2, r3, #6
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	431a      	orrs	r2, r3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	061b      	lsls	r3, r3, #24
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	071b      	lsls	r3, r3, #28
 800242a:	4917      	ldr	r1, [pc, #92]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	4911      	ldr	r1, [pc, #68]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002448:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0e      	ldr	r2, [pc, #56]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800244e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002454:	f7fe fbaa 	bl	8000bac <HAL_GetTick>
 8002458:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800245a:	e008      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800245c:	f7fe fba6 	bl	8000bac <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e007      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800247a:	d1ef      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3720      	adds	r7, #32
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800

0800248c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e040      	b.n	8002520 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe fab6 	bl	8000a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2224      	movs	r2, #36	; 0x24
 80024b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0201 	bic.w	r2, r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fbba 	bl	8002c44 <UART_SetConfig>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e022      	b.n	8002520 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fe10 	bl	8003108 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fe97 	bl	800324c <UART_CheckIdleState>
 800251e:	4603      	mov	r3, r0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	; 0x28
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800253c:	2b20      	cmp	r3, #32
 800253e:	f040 8081 	bne.w	8002644 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <HAL_UART_Transmit+0x26>
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e079      	b.n	8002646 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_UART_Transmit+0x38>
 800255c:	2302      	movs	r3, #2
 800255e:	e072      	b.n	8002646 <HAL_UART_Transmit+0x11e>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2221      	movs	r2, #33	; 0x21
 8002574:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002576:	f7fe fb19 	bl	8000bac <HAL_GetTick>
 800257a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	88fa      	ldrh	r2, [r7, #6]
 8002580:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	88fa      	ldrh	r2, [r7, #6]
 8002588:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002594:	d108      	bne.n	80025a8 <HAL_UART_Transmit+0x80>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d104      	bne.n	80025a8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	e003      	b.n	80025b0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80025b8:	e02c      	b.n	8002614 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2200      	movs	r2, #0
 80025c2:	2180      	movs	r1, #128	; 0x80
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 fe8a 	bl	80032de <UART_WaitOnFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e038      	b.n	8002646 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10b      	bne.n	80025f2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	3302      	adds	r3, #2
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	e007      	b.n	8002602 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	3301      	adds	r3, #1
 8002600:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002608:	b29b      	uxth	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1cc      	bne.n	80025ba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2200      	movs	r2, #0
 8002628:	2140      	movs	r1, #64	; 0x40
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 fe57 	bl	80032de <UART_WaitOnFlagUntilTimeout>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e005      	b.n	8002646 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2220      	movs	r2, #32
 800263e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	e000      	b.n	8002646 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002644:	2302      	movs	r3, #2
  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	3720      	adds	r7, #32
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b08a      	sub	sp, #40	; 0x28
 8002652:	af02      	add	r7, sp, #8
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	4613      	mov	r3, r2
 800265c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002662:	2b20      	cmp	r3, #32
 8002664:	f040 80be 	bne.w	80027e4 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_UART_Receive+0x26>
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0b6      	b.n	80027e6 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_UART_Receive+0x38>
 8002682:	2302      	movs	r3, #2
 8002684:	e0af      	b.n	80027e6 <HAL_UART_Receive+0x198>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2222      	movs	r2, #34	; 0x22
 800269a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026a2:	f7fe fa83 	bl	8000bac <HAL_GetTick>
 80026a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	88fa      	ldrh	r2, [r7, #6]
 80026ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	88fa      	ldrh	r2, [r7, #6]
 80026b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c0:	d10e      	bne.n	80026e0 <HAL_UART_Receive+0x92>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <HAL_UART_Receive+0x88>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80026d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026d4:	e02d      	b.n	8002732 <HAL_UART_Receive+0xe4>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	22ff      	movs	r2, #255	; 0xff
 80026da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026de:	e028      	b.n	8002732 <HAL_UART_Receive+0xe4>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10d      	bne.n	8002704 <HAL_UART_Receive+0xb6>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d104      	bne.n	80026fa <HAL_UART_Receive+0xac>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	22ff      	movs	r2, #255	; 0xff
 80026f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026f8:	e01b      	b.n	8002732 <HAL_UART_Receive+0xe4>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	227f      	movs	r2, #127	; 0x7f
 80026fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002702:	e016      	b.n	8002732 <HAL_UART_Receive+0xe4>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800270c:	d10d      	bne.n	800272a <HAL_UART_Receive+0xdc>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d104      	bne.n	8002720 <HAL_UART_Receive+0xd2>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	227f      	movs	r2, #127	; 0x7f
 800271a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800271e:	e008      	b.n	8002732 <HAL_UART_Receive+0xe4>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	223f      	movs	r2, #63	; 0x3f
 8002724:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002728:	e003      	b.n	8002732 <HAL_UART_Receive+0xe4>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002738:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002742:	d108      	bne.n	8002756 <HAL_UART_Receive+0x108>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d104      	bne.n	8002756 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	e003      	b.n	800275e <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002766:	e032      	b.n	80027ce <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2200      	movs	r2, #0
 8002770:	2120      	movs	r1, #32
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 fdb3 	bl	80032de <UART_WaitOnFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e031      	b.n	80027e6 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10c      	bne.n	80027a2 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	b29a      	uxth	r2, r3
 8002790:	8a7b      	ldrh	r3, [r7, #18]
 8002792:	4013      	ands	r3, r2
 8002794:	b29a      	uxth	r2, r3
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	3302      	adds	r3, #2
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	e00c      	b.n	80027bc <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	8a7b      	ldrh	r3, [r7, #18]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	4013      	ands	r3, r2
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3301      	adds	r3, #1
 80027ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1c6      	bne.n	8002768 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2220      	movs	r2, #32
 80027de:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e000      	b.n	80027e6 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80027e4:	2302      	movs	r3, #2
  }
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	f640 030f 	movw	r3, #2063	; 0x80f
 8002816:	4013      	ands	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d113      	bne.n	8002848 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00e      	beq.n	8002848 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b00      	cmp	r3, #0
 8002832:	d009      	beq.n	8002848 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 81cc 	beq.w	8002bd6 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	4798      	blx	r3
      }
      return;
 8002846:	e1c6      	b.n	8002bd6 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80e3 	beq.w	8002a16 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d105      	bne.n	8002866 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4ba5      	ldr	r3, [pc, #660]	; (8002af4 <HAL_UART_IRQHandler+0x304>)
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80d8 	beq.w	8002a16 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d010      	beq.n	8002892 <HAL_UART_IRQHandler+0xa2>
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2201      	movs	r2, #1
 8002880:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002888:	f043 0201 	orr.w	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d010      	beq.n	80028be <HAL_UART_IRQHandler+0xce>
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2202      	movs	r2, #2
 80028ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028b4:	f043 0204 	orr.w	r2, r3, #4
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d010      	beq.n	80028ea <HAL_UART_IRQHandler+0xfa>
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00b      	beq.n	80028ea <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2204      	movs	r2, #4
 80028d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028e0:	f043 0202 	orr.w	r2, r3, #2
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d015      	beq.n	8002920 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d104      	bne.n	8002908 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00b      	beq.n	8002920 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2208      	movs	r2, #8
 800290e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002916:	f043 0208 	orr.w	r2, r3, #8
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002926:	2b00      	cmp	r3, #0
 8002928:	d011      	beq.n	800294e <HAL_UART_IRQHandler+0x15e>
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00c      	beq.n	800294e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800293c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002944:	f043 0220 	orr.w	r2, r3, #32
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8140 	beq.w	8002bda <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00c      	beq.n	800297e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002984:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002990:	2b40      	cmp	r3, #64	; 0x40
 8002992:	d004      	beq.n	800299e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800299a:	2b00      	cmp	r3, #0
 800299c:	d031      	beq.n	8002a02 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fd19 	bl	80033d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ae:	2b40      	cmp	r3, #64	; 0x40
 80029b0:	d123      	bne.n	80029fa <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d013      	beq.n	80029f2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	4a4a      	ldr	r2, [pc, #296]	; (8002af8 <HAL_UART_IRQHandler+0x308>)
 80029d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe fa99 	bl	8000f0e <HAL_DMA_Abort_IT>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d017      	beq.n	8002a12 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80029ec:	4610      	mov	r0, r2
 80029ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f0:	e00f      	b.n	8002a12 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f906 	bl	8002c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f8:	e00b      	b.n	8002a12 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f902 	bl	8002c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a00:	e007      	b.n	8002a12 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f8fe 	bl	8002c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002a10:	e0e3      	b.n	8002bda <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a12:	bf00      	nop
    return;
 8002a14:	e0e1      	b.n	8002bda <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	f040 80a7 	bne.w	8002b6e <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80a1 	beq.w	8002b6e <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 809b 	beq.w	8002b6e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2210      	movs	r2, #16
 8002a3e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4a:	2b40      	cmp	r3, #64	; 0x40
 8002a4c:	d156      	bne.n	8002afc <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002a58:	893b      	ldrh	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 80bf 	beq.w	8002bde <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002a66:	893a      	ldrh	r2, [r7, #8]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	f080 80b8 	bcs.w	8002bde <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	893a      	ldrh	r2, [r7, #8]
 8002a72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a80:	d02a      	beq.n	8002ad8 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a90:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0201 	bic.w	r2, r2, #1
 8002aa0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ab0:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0210 	bic.w	r2, r2, #16
 8002acc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe f9ab 	bl	8000e2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	4619      	mov	r1, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f893 	bl	8002c18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002af2:	e074      	b.n	8002bde <HAL_UART_IRQHandler+0x3ee>
 8002af4:	04000120 	.word	0x04000120
 8002af8:	08003435 	.word	0x08003435
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d063      	beq.n	8002be2 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8002b1a:	897b      	ldrh	r3, [r7, #10]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d060      	beq.n	8002be2 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0210 	bic.w	r2, r2, #16
 8002b60:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b62:	897b      	ldrh	r3, [r7, #10]
 8002b64:	4619      	mov	r1, r3
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f856 	bl	8002c18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b6c:	e039      	b.n	8002be2 <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00d      	beq.n	8002b94 <HAL_UART_IRQHandler+0x3a4>
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f84f 	bl	8002c30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b92:	e029      	b.n	8002be8 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00d      	beq.n	8002bba <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01a      	beq.n	8002be6 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
    }
    return;
 8002bb8:	e015      	b.n	8002be6 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d011      	beq.n	8002be8 <HAL_UART_IRQHandler+0x3f8>
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00c      	beq.n	8002be8 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fc46 	bl	8003460 <UART_EndTransmit_IT>
    return;
 8002bd4:	e008      	b.n	8002be8 <HAL_UART_IRQHandler+0x3f8>
      return;
 8002bd6:	bf00      	nop
 8002bd8:	e006      	b.n	8002be8 <HAL_UART_IRQHandler+0x3f8>
    return;
 8002bda:	bf00      	nop
 8002bdc:	e004      	b.n	8002be8 <HAL_UART_IRQHandler+0x3f8>
      return;
 8002bde:	bf00      	nop
 8002be0:	e002      	b.n	8002be8 <HAL_UART_IRQHandler+0x3f8>
      return;
 8002be2:	bf00      	nop
 8002be4:	e000      	b.n	8002be8 <HAL_UART_IRQHandler+0x3f8>
    return;
 8002be6:	bf00      	nop
  }

}
 8002be8:	3720      	adds	r7, #32
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop

08002bf0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4ba7      	ldr	r3, [pc, #668]	; (8002f0c <UART_SetConfig+0x2c8>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	6979      	ldr	r1, [r7, #20]
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a95      	ldr	r2, [pc, #596]	; (8002f10 <UART_SetConfig+0x2cc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d120      	bne.n	8002d02 <UART_SetConfig+0xbe>
 8002cc0:	4b94      	ldr	r3, [pc, #592]	; (8002f14 <UART_SetConfig+0x2d0>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d816      	bhi.n	8002cfc <UART_SetConfig+0xb8>
 8002cce:	a201      	add	r2, pc, #4	; (adr r2, 8002cd4 <UART_SetConfig+0x90>)
 8002cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd4:	08002ce5 	.word	0x08002ce5
 8002cd8:	08002cf1 	.word	0x08002cf1
 8002cdc:	08002ceb 	.word	0x08002ceb
 8002ce0:	08002cf7 	.word	0x08002cf7
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	77fb      	strb	r3, [r7, #31]
 8002ce8:	e14f      	b.n	8002f8a <UART_SetConfig+0x346>
 8002cea:	2302      	movs	r3, #2
 8002cec:	77fb      	strb	r3, [r7, #31]
 8002cee:	e14c      	b.n	8002f8a <UART_SetConfig+0x346>
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	77fb      	strb	r3, [r7, #31]
 8002cf4:	e149      	b.n	8002f8a <UART_SetConfig+0x346>
 8002cf6:	2308      	movs	r3, #8
 8002cf8:	77fb      	strb	r3, [r7, #31]
 8002cfa:	e146      	b.n	8002f8a <UART_SetConfig+0x346>
 8002cfc:	2310      	movs	r3, #16
 8002cfe:	77fb      	strb	r3, [r7, #31]
 8002d00:	e143      	b.n	8002f8a <UART_SetConfig+0x346>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a84      	ldr	r2, [pc, #528]	; (8002f18 <UART_SetConfig+0x2d4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d132      	bne.n	8002d72 <UART_SetConfig+0x12e>
 8002d0c:	4b81      	ldr	r3, [pc, #516]	; (8002f14 <UART_SetConfig+0x2d0>)
 8002d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d828      	bhi.n	8002d6c <UART_SetConfig+0x128>
 8002d1a:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <UART_SetConfig+0xdc>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002d55 	.word	0x08002d55
 8002d24:	08002d6d 	.word	0x08002d6d
 8002d28:	08002d6d 	.word	0x08002d6d
 8002d2c:	08002d6d 	.word	0x08002d6d
 8002d30:	08002d61 	.word	0x08002d61
 8002d34:	08002d6d 	.word	0x08002d6d
 8002d38:	08002d6d 	.word	0x08002d6d
 8002d3c:	08002d6d 	.word	0x08002d6d
 8002d40:	08002d5b 	.word	0x08002d5b
 8002d44:	08002d6d 	.word	0x08002d6d
 8002d48:	08002d6d 	.word	0x08002d6d
 8002d4c:	08002d6d 	.word	0x08002d6d
 8002d50:	08002d67 	.word	0x08002d67
 8002d54:	2300      	movs	r3, #0
 8002d56:	77fb      	strb	r3, [r7, #31]
 8002d58:	e117      	b.n	8002f8a <UART_SetConfig+0x346>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	77fb      	strb	r3, [r7, #31]
 8002d5e:	e114      	b.n	8002f8a <UART_SetConfig+0x346>
 8002d60:	2304      	movs	r3, #4
 8002d62:	77fb      	strb	r3, [r7, #31]
 8002d64:	e111      	b.n	8002f8a <UART_SetConfig+0x346>
 8002d66:	2308      	movs	r3, #8
 8002d68:	77fb      	strb	r3, [r7, #31]
 8002d6a:	e10e      	b.n	8002f8a <UART_SetConfig+0x346>
 8002d6c:	2310      	movs	r3, #16
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	e10b      	b.n	8002f8a <UART_SetConfig+0x346>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a69      	ldr	r2, [pc, #420]	; (8002f1c <UART_SetConfig+0x2d8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d120      	bne.n	8002dbe <UART_SetConfig+0x17a>
 8002d7c:	4b65      	ldr	r3, [pc, #404]	; (8002f14 <UART_SetConfig+0x2d0>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d86:	2b30      	cmp	r3, #48	; 0x30
 8002d88:	d013      	beq.n	8002db2 <UART_SetConfig+0x16e>
 8002d8a:	2b30      	cmp	r3, #48	; 0x30
 8002d8c:	d814      	bhi.n	8002db8 <UART_SetConfig+0x174>
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	d009      	beq.n	8002da6 <UART_SetConfig+0x162>
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d810      	bhi.n	8002db8 <UART_SetConfig+0x174>
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <UART_SetConfig+0x15c>
 8002d9a:	2b10      	cmp	r3, #16
 8002d9c:	d006      	beq.n	8002dac <UART_SetConfig+0x168>
 8002d9e:	e00b      	b.n	8002db8 <UART_SetConfig+0x174>
 8002da0:	2300      	movs	r3, #0
 8002da2:	77fb      	strb	r3, [r7, #31]
 8002da4:	e0f1      	b.n	8002f8a <UART_SetConfig+0x346>
 8002da6:	2302      	movs	r3, #2
 8002da8:	77fb      	strb	r3, [r7, #31]
 8002daa:	e0ee      	b.n	8002f8a <UART_SetConfig+0x346>
 8002dac:	2304      	movs	r3, #4
 8002dae:	77fb      	strb	r3, [r7, #31]
 8002db0:	e0eb      	b.n	8002f8a <UART_SetConfig+0x346>
 8002db2:	2308      	movs	r3, #8
 8002db4:	77fb      	strb	r3, [r7, #31]
 8002db6:	e0e8      	b.n	8002f8a <UART_SetConfig+0x346>
 8002db8:	2310      	movs	r3, #16
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e0e5      	b.n	8002f8a <UART_SetConfig+0x346>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a57      	ldr	r2, [pc, #348]	; (8002f20 <UART_SetConfig+0x2dc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d120      	bne.n	8002e0a <UART_SetConfig+0x1c6>
 8002dc8:	4b52      	ldr	r3, [pc, #328]	; (8002f14 <UART_SetConfig+0x2d0>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002dd2:	2bc0      	cmp	r3, #192	; 0xc0
 8002dd4:	d013      	beq.n	8002dfe <UART_SetConfig+0x1ba>
 8002dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8002dd8:	d814      	bhi.n	8002e04 <UART_SetConfig+0x1c0>
 8002dda:	2b80      	cmp	r3, #128	; 0x80
 8002ddc:	d009      	beq.n	8002df2 <UART_SetConfig+0x1ae>
 8002dde:	2b80      	cmp	r3, #128	; 0x80
 8002de0:	d810      	bhi.n	8002e04 <UART_SetConfig+0x1c0>
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <UART_SetConfig+0x1a8>
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d006      	beq.n	8002df8 <UART_SetConfig+0x1b4>
 8002dea:	e00b      	b.n	8002e04 <UART_SetConfig+0x1c0>
 8002dec:	2300      	movs	r3, #0
 8002dee:	77fb      	strb	r3, [r7, #31]
 8002df0:	e0cb      	b.n	8002f8a <UART_SetConfig+0x346>
 8002df2:	2302      	movs	r3, #2
 8002df4:	77fb      	strb	r3, [r7, #31]
 8002df6:	e0c8      	b.n	8002f8a <UART_SetConfig+0x346>
 8002df8:	2304      	movs	r3, #4
 8002dfa:	77fb      	strb	r3, [r7, #31]
 8002dfc:	e0c5      	b.n	8002f8a <UART_SetConfig+0x346>
 8002dfe:	2308      	movs	r3, #8
 8002e00:	77fb      	strb	r3, [r7, #31]
 8002e02:	e0c2      	b.n	8002f8a <UART_SetConfig+0x346>
 8002e04:	2310      	movs	r3, #16
 8002e06:	77fb      	strb	r3, [r7, #31]
 8002e08:	e0bf      	b.n	8002f8a <UART_SetConfig+0x346>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a45      	ldr	r2, [pc, #276]	; (8002f24 <UART_SetConfig+0x2e0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d125      	bne.n	8002e60 <UART_SetConfig+0x21c>
 8002e14:	4b3f      	ldr	r3, [pc, #252]	; (8002f14 <UART_SetConfig+0x2d0>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e22:	d017      	beq.n	8002e54 <UART_SetConfig+0x210>
 8002e24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e28:	d817      	bhi.n	8002e5a <UART_SetConfig+0x216>
 8002e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e2e:	d00b      	beq.n	8002e48 <UART_SetConfig+0x204>
 8002e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e34:	d811      	bhi.n	8002e5a <UART_SetConfig+0x216>
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <UART_SetConfig+0x1fe>
 8002e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e3e:	d006      	beq.n	8002e4e <UART_SetConfig+0x20a>
 8002e40:	e00b      	b.n	8002e5a <UART_SetConfig+0x216>
 8002e42:	2300      	movs	r3, #0
 8002e44:	77fb      	strb	r3, [r7, #31]
 8002e46:	e0a0      	b.n	8002f8a <UART_SetConfig+0x346>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	77fb      	strb	r3, [r7, #31]
 8002e4c:	e09d      	b.n	8002f8a <UART_SetConfig+0x346>
 8002e4e:	2304      	movs	r3, #4
 8002e50:	77fb      	strb	r3, [r7, #31]
 8002e52:	e09a      	b.n	8002f8a <UART_SetConfig+0x346>
 8002e54:	2308      	movs	r3, #8
 8002e56:	77fb      	strb	r3, [r7, #31]
 8002e58:	e097      	b.n	8002f8a <UART_SetConfig+0x346>
 8002e5a:	2310      	movs	r3, #16
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e094      	b.n	8002f8a <UART_SetConfig+0x346>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a30      	ldr	r2, [pc, #192]	; (8002f28 <UART_SetConfig+0x2e4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d125      	bne.n	8002eb6 <UART_SetConfig+0x272>
 8002e6a:	4b2a      	ldr	r3, [pc, #168]	; (8002f14 <UART_SetConfig+0x2d0>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e78:	d017      	beq.n	8002eaa <UART_SetConfig+0x266>
 8002e7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e7e:	d817      	bhi.n	8002eb0 <UART_SetConfig+0x26c>
 8002e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e84:	d00b      	beq.n	8002e9e <UART_SetConfig+0x25a>
 8002e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e8a:	d811      	bhi.n	8002eb0 <UART_SetConfig+0x26c>
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <UART_SetConfig+0x254>
 8002e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e94:	d006      	beq.n	8002ea4 <UART_SetConfig+0x260>
 8002e96:	e00b      	b.n	8002eb0 <UART_SetConfig+0x26c>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	77fb      	strb	r3, [r7, #31]
 8002e9c:	e075      	b.n	8002f8a <UART_SetConfig+0x346>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	77fb      	strb	r3, [r7, #31]
 8002ea2:	e072      	b.n	8002f8a <UART_SetConfig+0x346>
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	77fb      	strb	r3, [r7, #31]
 8002ea8:	e06f      	b.n	8002f8a <UART_SetConfig+0x346>
 8002eaa:	2308      	movs	r3, #8
 8002eac:	77fb      	strb	r3, [r7, #31]
 8002eae:	e06c      	b.n	8002f8a <UART_SetConfig+0x346>
 8002eb0:	2310      	movs	r3, #16
 8002eb2:	77fb      	strb	r3, [r7, #31]
 8002eb4:	e069      	b.n	8002f8a <UART_SetConfig+0x346>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <UART_SetConfig+0x2e8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d137      	bne.n	8002f30 <UART_SetConfig+0x2ec>
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <UART_SetConfig+0x2d0>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002eca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ece:	d017      	beq.n	8002f00 <UART_SetConfig+0x2bc>
 8002ed0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ed4:	d817      	bhi.n	8002f06 <UART_SetConfig+0x2c2>
 8002ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eda:	d00b      	beq.n	8002ef4 <UART_SetConfig+0x2b0>
 8002edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee0:	d811      	bhi.n	8002f06 <UART_SetConfig+0x2c2>
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <UART_SetConfig+0x2aa>
 8002ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eea:	d006      	beq.n	8002efa <UART_SetConfig+0x2b6>
 8002eec:	e00b      	b.n	8002f06 <UART_SetConfig+0x2c2>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	77fb      	strb	r3, [r7, #31]
 8002ef2:	e04a      	b.n	8002f8a <UART_SetConfig+0x346>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	e047      	b.n	8002f8a <UART_SetConfig+0x346>
 8002efa:	2304      	movs	r3, #4
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	e044      	b.n	8002f8a <UART_SetConfig+0x346>
 8002f00:	2308      	movs	r3, #8
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e041      	b.n	8002f8a <UART_SetConfig+0x346>
 8002f06:	2310      	movs	r3, #16
 8002f08:	77fb      	strb	r3, [r7, #31]
 8002f0a:	e03e      	b.n	8002f8a <UART_SetConfig+0x346>
 8002f0c:	efff69f3 	.word	0xefff69f3
 8002f10:	40011000 	.word	0x40011000
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40004400 	.word	0x40004400
 8002f1c:	40004800 	.word	0x40004800
 8002f20:	40004c00 	.word	0x40004c00
 8002f24:	40005000 	.word	0x40005000
 8002f28:	40011400 	.word	0x40011400
 8002f2c:	40007800 	.word	0x40007800
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a71      	ldr	r2, [pc, #452]	; (80030fc <UART_SetConfig+0x4b8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d125      	bne.n	8002f86 <UART_SetConfig+0x342>
 8002f3a:	4b71      	ldr	r3, [pc, #452]	; (8003100 <UART_SetConfig+0x4bc>)
 8002f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f48:	d017      	beq.n	8002f7a <UART_SetConfig+0x336>
 8002f4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f4e:	d817      	bhi.n	8002f80 <UART_SetConfig+0x33c>
 8002f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f54:	d00b      	beq.n	8002f6e <UART_SetConfig+0x32a>
 8002f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5a:	d811      	bhi.n	8002f80 <UART_SetConfig+0x33c>
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <UART_SetConfig+0x324>
 8002f60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f64:	d006      	beq.n	8002f74 <UART_SetConfig+0x330>
 8002f66:	e00b      	b.n	8002f80 <UART_SetConfig+0x33c>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	77fb      	strb	r3, [r7, #31]
 8002f6c:	e00d      	b.n	8002f8a <UART_SetConfig+0x346>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	77fb      	strb	r3, [r7, #31]
 8002f72:	e00a      	b.n	8002f8a <UART_SetConfig+0x346>
 8002f74:	2304      	movs	r3, #4
 8002f76:	77fb      	strb	r3, [r7, #31]
 8002f78:	e007      	b.n	8002f8a <UART_SetConfig+0x346>
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	77fb      	strb	r3, [r7, #31]
 8002f7e:	e004      	b.n	8002f8a <UART_SetConfig+0x346>
 8002f80:	2310      	movs	r3, #16
 8002f82:	77fb      	strb	r3, [r7, #31]
 8002f84:	e001      	b.n	8002f8a <UART_SetConfig+0x346>
 8002f86:	2310      	movs	r3, #16
 8002f88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f92:	d15b      	bne.n	800304c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8002f94:	7ffb      	ldrb	r3, [r7, #31]
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d827      	bhi.n	8002fea <UART_SetConfig+0x3a6>
 8002f9a:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <UART_SetConfig+0x35c>)
 8002f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa0:	08002fc5 	.word	0x08002fc5
 8002fa4:	08002fcd 	.word	0x08002fcd
 8002fa8:	08002fd5 	.word	0x08002fd5
 8002fac:	08002feb 	.word	0x08002feb
 8002fb0:	08002fdb 	.word	0x08002fdb
 8002fb4:	08002feb 	.word	0x08002feb
 8002fb8:	08002feb 	.word	0x08002feb
 8002fbc:	08002feb 	.word	0x08002feb
 8002fc0:	08002fe3 	.word	0x08002fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fc4:	f7fe fe12 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 8002fc8:	61b8      	str	r0, [r7, #24]
        break;
 8002fca:	e013      	b.n	8002ff4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fcc:	f7fe fe22 	bl	8001c14 <HAL_RCC_GetPCLK2Freq>
 8002fd0:	61b8      	str	r0, [r7, #24]
        break;
 8002fd2:	e00f      	b.n	8002ff4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fd4:	4b4b      	ldr	r3, [pc, #300]	; (8003104 <UART_SetConfig+0x4c0>)
 8002fd6:	61bb      	str	r3, [r7, #24]
        break;
 8002fd8:	e00c      	b.n	8002ff4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fda:	f7fe fd45 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8002fde:	61b8      	str	r0, [r7, #24]
        break;
 8002fe0:	e008      	b.n	8002ff4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fe6:	61bb      	str	r3, [r7, #24]
        break;
 8002fe8:	e004      	b.n	8002ff4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	77bb      	strb	r3, [r7, #30]
        break;
 8002ff2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d074      	beq.n	80030e4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	005a      	lsls	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	441a      	add	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	fbb2 f3f3 	udiv	r3, r2, r3
 800300e:	b29b      	uxth	r3, r3
 8003010:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b0f      	cmp	r3, #15
 8003016:	d916      	bls.n	8003046 <UART_SetConfig+0x402>
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301e:	d212      	bcs.n	8003046 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	b29b      	uxth	r3, r3
 8003024:	f023 030f 	bic.w	r3, r3, #15
 8003028:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	085b      	lsrs	r3, r3, #1
 800302e:	b29b      	uxth	r3, r3
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	b29a      	uxth	r2, r3
 8003036:	89fb      	ldrh	r3, [r7, #14]
 8003038:	4313      	orrs	r3, r2
 800303a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	89fa      	ldrh	r2, [r7, #14]
 8003042:	60da      	str	r2, [r3, #12]
 8003044:	e04e      	b.n	80030e4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	77bb      	strb	r3, [r7, #30]
 800304a:	e04b      	b.n	80030e4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800304c:	7ffb      	ldrb	r3, [r7, #31]
 800304e:	2b08      	cmp	r3, #8
 8003050:	d827      	bhi.n	80030a2 <UART_SetConfig+0x45e>
 8003052:	a201      	add	r2, pc, #4	; (adr r2, 8003058 <UART_SetConfig+0x414>)
 8003054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003058:	0800307d 	.word	0x0800307d
 800305c:	08003085 	.word	0x08003085
 8003060:	0800308d 	.word	0x0800308d
 8003064:	080030a3 	.word	0x080030a3
 8003068:	08003093 	.word	0x08003093
 800306c:	080030a3 	.word	0x080030a3
 8003070:	080030a3 	.word	0x080030a3
 8003074:	080030a3 	.word	0x080030a3
 8003078:	0800309b 	.word	0x0800309b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800307c:	f7fe fdb6 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 8003080:	61b8      	str	r0, [r7, #24]
        break;
 8003082:	e013      	b.n	80030ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003084:	f7fe fdc6 	bl	8001c14 <HAL_RCC_GetPCLK2Freq>
 8003088:	61b8      	str	r0, [r7, #24]
        break;
 800308a:	e00f      	b.n	80030ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800308c:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <UART_SetConfig+0x4c0>)
 800308e:	61bb      	str	r3, [r7, #24]
        break;
 8003090:	e00c      	b.n	80030ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003092:	f7fe fce9 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8003096:	61b8      	str	r0, [r7, #24]
        break;
 8003098:	e008      	b.n	80030ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800309a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800309e:	61bb      	str	r3, [r7, #24]
        break;
 80030a0:	e004      	b.n	80030ac <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	77bb      	strb	r3, [r7, #30]
        break;
 80030aa:	bf00      	nop
    }

    if (pclk != 0U)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d018      	beq.n	80030e4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	085a      	lsrs	r2, r3, #1
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	441a      	add	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	d908      	bls.n	80030e0 <UART_SetConfig+0x49c>
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d4:	d204      	bcs.n	80030e0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	e001      	b.n	80030e4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80030f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40007c00 	.word	0x40007c00
 8003100:	40023800 	.word	0x40023800
 8003104:	00f42400 	.word	0x00f42400

08003108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00a      	beq.n	8003132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01a      	beq.n	800321e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003206:	d10a      	bne.n	800321e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	605a      	str	r2, [r3, #4]
  }
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af02      	add	r7, sp, #8
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800325c:	f7fd fca6 	bl	8000bac <HAL_GetTick>
 8003260:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b08      	cmp	r3, #8
 800326e:	d10e      	bne.n	800328e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f82d 	bl	80032de <UART_WaitOnFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e023      	b.n	80032d6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b04      	cmp	r3, #4
 800329a:	d10e      	bne.n	80032ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800329c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f817 	bl	80032de <UART_WaitOnFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e00d      	b.n	80032d6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2220      	movs	r2, #32
 80032be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	603b      	str	r3, [r7, #0]
 80032ea:	4613      	mov	r3, r2
 80032ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ee:	e05e      	b.n	80033ae <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f6:	d05a      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f8:	f7fd fc58 	bl	8000bac <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	429a      	cmp	r2, r3
 8003306:	d302      	bcc.n	800330e <UART_WaitOnFlagUntilTimeout+0x30>
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d11b      	bne.n	8003346 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800331c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e043      	b.n	80033ce <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d02c      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800335e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003362:	d124      	bne.n	80033ae <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800336c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800337c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0201 	bic.w	r2, r2, #1
 800338c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e00f      	b.n	80033ce <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69da      	ldr	r2, [r3, #28]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4013      	ands	r3, r2
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d091      	beq.n	80032f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033ec:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003402:	2b01      	cmp	r3, #1
 8003404:	d107      	bne.n	8003416 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0210 	bic.w	r2, r2, #16
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f7ff fbd6 	bl	8002c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003476:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff fbb3 	bl	8002bf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <__errno>:
 8003494:	4b01      	ldr	r3, [pc, #4]	; (800349c <__errno+0x8>)
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	2000000c 	.word	0x2000000c

080034a0 <__libc_init_array>:
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	4d0d      	ldr	r5, [pc, #52]	; (80034d8 <__libc_init_array+0x38>)
 80034a4:	4c0d      	ldr	r4, [pc, #52]	; (80034dc <__libc_init_array+0x3c>)
 80034a6:	1b64      	subs	r4, r4, r5
 80034a8:	10a4      	asrs	r4, r4, #2
 80034aa:	2600      	movs	r6, #0
 80034ac:	42a6      	cmp	r6, r4
 80034ae:	d109      	bne.n	80034c4 <__libc_init_array+0x24>
 80034b0:	4d0b      	ldr	r5, [pc, #44]	; (80034e0 <__libc_init_array+0x40>)
 80034b2:	4c0c      	ldr	r4, [pc, #48]	; (80034e4 <__libc_init_array+0x44>)
 80034b4:	f000 fce6 	bl	8003e84 <_init>
 80034b8:	1b64      	subs	r4, r4, r5
 80034ba:	10a4      	asrs	r4, r4, #2
 80034bc:	2600      	movs	r6, #0
 80034be:	42a6      	cmp	r6, r4
 80034c0:	d105      	bne.n	80034ce <__libc_init_array+0x2e>
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
 80034c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034c8:	4798      	blx	r3
 80034ca:	3601      	adds	r6, #1
 80034cc:	e7ee      	b.n	80034ac <__libc_init_array+0xc>
 80034ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d2:	4798      	blx	r3
 80034d4:	3601      	adds	r6, #1
 80034d6:	e7f2      	b.n	80034be <__libc_init_array+0x1e>
 80034d8:	08003f38 	.word	0x08003f38
 80034dc:	08003f38 	.word	0x08003f38
 80034e0:	08003f38 	.word	0x08003f38
 80034e4:	08003f3c 	.word	0x08003f3c

080034e8 <memset>:
 80034e8:	4402      	add	r2, r0
 80034ea:	4603      	mov	r3, r0
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d100      	bne.n	80034f2 <memset+0xa>
 80034f0:	4770      	bx	lr
 80034f2:	f803 1b01 	strb.w	r1, [r3], #1
 80034f6:	e7f9      	b.n	80034ec <memset+0x4>

080034f8 <_puts_r>:
 80034f8:	b570      	push	{r4, r5, r6, lr}
 80034fa:	460e      	mov	r6, r1
 80034fc:	4605      	mov	r5, r0
 80034fe:	b118      	cbz	r0, 8003508 <_puts_r+0x10>
 8003500:	6983      	ldr	r3, [r0, #24]
 8003502:	b90b      	cbnz	r3, 8003508 <_puts_r+0x10>
 8003504:	f000 fa48 	bl	8003998 <__sinit>
 8003508:	69ab      	ldr	r3, [r5, #24]
 800350a:	68ac      	ldr	r4, [r5, #8]
 800350c:	b913      	cbnz	r3, 8003514 <_puts_r+0x1c>
 800350e:	4628      	mov	r0, r5
 8003510:	f000 fa42 	bl	8003998 <__sinit>
 8003514:	4b2c      	ldr	r3, [pc, #176]	; (80035c8 <_puts_r+0xd0>)
 8003516:	429c      	cmp	r4, r3
 8003518:	d120      	bne.n	800355c <_puts_r+0x64>
 800351a:	686c      	ldr	r4, [r5, #4]
 800351c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800351e:	07db      	lsls	r3, r3, #31
 8003520:	d405      	bmi.n	800352e <_puts_r+0x36>
 8003522:	89a3      	ldrh	r3, [r4, #12]
 8003524:	0598      	lsls	r0, r3, #22
 8003526:	d402      	bmi.n	800352e <_puts_r+0x36>
 8003528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800352a:	f000 fad3 	bl	8003ad4 <__retarget_lock_acquire_recursive>
 800352e:	89a3      	ldrh	r3, [r4, #12]
 8003530:	0719      	lsls	r1, r3, #28
 8003532:	d51d      	bpl.n	8003570 <_puts_r+0x78>
 8003534:	6923      	ldr	r3, [r4, #16]
 8003536:	b1db      	cbz	r3, 8003570 <_puts_r+0x78>
 8003538:	3e01      	subs	r6, #1
 800353a:	68a3      	ldr	r3, [r4, #8]
 800353c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003540:	3b01      	subs	r3, #1
 8003542:	60a3      	str	r3, [r4, #8]
 8003544:	bb39      	cbnz	r1, 8003596 <_puts_r+0x9e>
 8003546:	2b00      	cmp	r3, #0
 8003548:	da38      	bge.n	80035bc <_puts_r+0xc4>
 800354a:	4622      	mov	r2, r4
 800354c:	210a      	movs	r1, #10
 800354e:	4628      	mov	r0, r5
 8003550:	f000 f848 	bl	80035e4 <__swbuf_r>
 8003554:	3001      	adds	r0, #1
 8003556:	d011      	beq.n	800357c <_puts_r+0x84>
 8003558:	250a      	movs	r5, #10
 800355a:	e011      	b.n	8003580 <_puts_r+0x88>
 800355c:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <_puts_r+0xd4>)
 800355e:	429c      	cmp	r4, r3
 8003560:	d101      	bne.n	8003566 <_puts_r+0x6e>
 8003562:	68ac      	ldr	r4, [r5, #8]
 8003564:	e7da      	b.n	800351c <_puts_r+0x24>
 8003566:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <_puts_r+0xd8>)
 8003568:	429c      	cmp	r4, r3
 800356a:	bf08      	it	eq
 800356c:	68ec      	ldreq	r4, [r5, #12]
 800356e:	e7d5      	b.n	800351c <_puts_r+0x24>
 8003570:	4621      	mov	r1, r4
 8003572:	4628      	mov	r0, r5
 8003574:	f000 f888 	bl	8003688 <__swsetup_r>
 8003578:	2800      	cmp	r0, #0
 800357a:	d0dd      	beq.n	8003538 <_puts_r+0x40>
 800357c:	f04f 35ff 	mov.w	r5, #4294967295
 8003580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003582:	07da      	lsls	r2, r3, #31
 8003584:	d405      	bmi.n	8003592 <_puts_r+0x9a>
 8003586:	89a3      	ldrh	r3, [r4, #12]
 8003588:	059b      	lsls	r3, r3, #22
 800358a:	d402      	bmi.n	8003592 <_puts_r+0x9a>
 800358c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800358e:	f000 faa2 	bl	8003ad6 <__retarget_lock_release_recursive>
 8003592:	4628      	mov	r0, r5
 8003594:	bd70      	pop	{r4, r5, r6, pc}
 8003596:	2b00      	cmp	r3, #0
 8003598:	da04      	bge.n	80035a4 <_puts_r+0xac>
 800359a:	69a2      	ldr	r2, [r4, #24]
 800359c:	429a      	cmp	r2, r3
 800359e:	dc06      	bgt.n	80035ae <_puts_r+0xb6>
 80035a0:	290a      	cmp	r1, #10
 80035a2:	d004      	beq.n	80035ae <_puts_r+0xb6>
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	6022      	str	r2, [r4, #0]
 80035aa:	7019      	strb	r1, [r3, #0]
 80035ac:	e7c5      	b.n	800353a <_puts_r+0x42>
 80035ae:	4622      	mov	r2, r4
 80035b0:	4628      	mov	r0, r5
 80035b2:	f000 f817 	bl	80035e4 <__swbuf_r>
 80035b6:	3001      	adds	r0, #1
 80035b8:	d1bf      	bne.n	800353a <_puts_r+0x42>
 80035ba:	e7df      	b.n	800357c <_puts_r+0x84>
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	250a      	movs	r5, #10
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	6022      	str	r2, [r4, #0]
 80035c4:	701d      	strb	r5, [r3, #0]
 80035c6:	e7db      	b.n	8003580 <_puts_r+0x88>
 80035c8:	08003ef0 	.word	0x08003ef0
 80035cc:	08003f10 	.word	0x08003f10
 80035d0:	08003ed0 	.word	0x08003ed0

080035d4 <puts>:
 80035d4:	4b02      	ldr	r3, [pc, #8]	; (80035e0 <puts+0xc>)
 80035d6:	4601      	mov	r1, r0
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	f7ff bf8d 	b.w	80034f8 <_puts_r>
 80035de:	bf00      	nop
 80035e0:	2000000c 	.word	0x2000000c

080035e4 <__swbuf_r>:
 80035e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e6:	460e      	mov	r6, r1
 80035e8:	4614      	mov	r4, r2
 80035ea:	4605      	mov	r5, r0
 80035ec:	b118      	cbz	r0, 80035f6 <__swbuf_r+0x12>
 80035ee:	6983      	ldr	r3, [r0, #24]
 80035f0:	b90b      	cbnz	r3, 80035f6 <__swbuf_r+0x12>
 80035f2:	f000 f9d1 	bl	8003998 <__sinit>
 80035f6:	4b21      	ldr	r3, [pc, #132]	; (800367c <__swbuf_r+0x98>)
 80035f8:	429c      	cmp	r4, r3
 80035fa:	d12b      	bne.n	8003654 <__swbuf_r+0x70>
 80035fc:	686c      	ldr	r4, [r5, #4]
 80035fe:	69a3      	ldr	r3, [r4, #24]
 8003600:	60a3      	str	r3, [r4, #8]
 8003602:	89a3      	ldrh	r3, [r4, #12]
 8003604:	071a      	lsls	r2, r3, #28
 8003606:	d52f      	bpl.n	8003668 <__swbuf_r+0x84>
 8003608:	6923      	ldr	r3, [r4, #16]
 800360a:	b36b      	cbz	r3, 8003668 <__swbuf_r+0x84>
 800360c:	6923      	ldr	r3, [r4, #16]
 800360e:	6820      	ldr	r0, [r4, #0]
 8003610:	1ac0      	subs	r0, r0, r3
 8003612:	6963      	ldr	r3, [r4, #20]
 8003614:	b2f6      	uxtb	r6, r6
 8003616:	4283      	cmp	r3, r0
 8003618:	4637      	mov	r7, r6
 800361a:	dc04      	bgt.n	8003626 <__swbuf_r+0x42>
 800361c:	4621      	mov	r1, r4
 800361e:	4628      	mov	r0, r5
 8003620:	f000 f926 	bl	8003870 <_fflush_r>
 8003624:	bb30      	cbnz	r0, 8003674 <__swbuf_r+0x90>
 8003626:	68a3      	ldr	r3, [r4, #8]
 8003628:	3b01      	subs	r3, #1
 800362a:	60a3      	str	r3, [r4, #8]
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	6022      	str	r2, [r4, #0]
 8003632:	701e      	strb	r6, [r3, #0]
 8003634:	6963      	ldr	r3, [r4, #20]
 8003636:	3001      	adds	r0, #1
 8003638:	4283      	cmp	r3, r0
 800363a:	d004      	beq.n	8003646 <__swbuf_r+0x62>
 800363c:	89a3      	ldrh	r3, [r4, #12]
 800363e:	07db      	lsls	r3, r3, #31
 8003640:	d506      	bpl.n	8003650 <__swbuf_r+0x6c>
 8003642:	2e0a      	cmp	r6, #10
 8003644:	d104      	bne.n	8003650 <__swbuf_r+0x6c>
 8003646:	4621      	mov	r1, r4
 8003648:	4628      	mov	r0, r5
 800364a:	f000 f911 	bl	8003870 <_fflush_r>
 800364e:	b988      	cbnz	r0, 8003674 <__swbuf_r+0x90>
 8003650:	4638      	mov	r0, r7
 8003652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <__swbuf_r+0x9c>)
 8003656:	429c      	cmp	r4, r3
 8003658:	d101      	bne.n	800365e <__swbuf_r+0x7a>
 800365a:	68ac      	ldr	r4, [r5, #8]
 800365c:	e7cf      	b.n	80035fe <__swbuf_r+0x1a>
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <__swbuf_r+0xa0>)
 8003660:	429c      	cmp	r4, r3
 8003662:	bf08      	it	eq
 8003664:	68ec      	ldreq	r4, [r5, #12]
 8003666:	e7ca      	b.n	80035fe <__swbuf_r+0x1a>
 8003668:	4621      	mov	r1, r4
 800366a:	4628      	mov	r0, r5
 800366c:	f000 f80c 	bl	8003688 <__swsetup_r>
 8003670:	2800      	cmp	r0, #0
 8003672:	d0cb      	beq.n	800360c <__swbuf_r+0x28>
 8003674:	f04f 37ff 	mov.w	r7, #4294967295
 8003678:	e7ea      	b.n	8003650 <__swbuf_r+0x6c>
 800367a:	bf00      	nop
 800367c:	08003ef0 	.word	0x08003ef0
 8003680:	08003f10 	.word	0x08003f10
 8003684:	08003ed0 	.word	0x08003ed0

08003688 <__swsetup_r>:
 8003688:	4b32      	ldr	r3, [pc, #200]	; (8003754 <__swsetup_r+0xcc>)
 800368a:	b570      	push	{r4, r5, r6, lr}
 800368c:	681d      	ldr	r5, [r3, #0]
 800368e:	4606      	mov	r6, r0
 8003690:	460c      	mov	r4, r1
 8003692:	b125      	cbz	r5, 800369e <__swsetup_r+0x16>
 8003694:	69ab      	ldr	r3, [r5, #24]
 8003696:	b913      	cbnz	r3, 800369e <__swsetup_r+0x16>
 8003698:	4628      	mov	r0, r5
 800369a:	f000 f97d 	bl	8003998 <__sinit>
 800369e:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <__swsetup_r+0xd0>)
 80036a0:	429c      	cmp	r4, r3
 80036a2:	d10f      	bne.n	80036c4 <__swsetup_r+0x3c>
 80036a4:	686c      	ldr	r4, [r5, #4]
 80036a6:	89a3      	ldrh	r3, [r4, #12]
 80036a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036ac:	0719      	lsls	r1, r3, #28
 80036ae:	d42c      	bmi.n	800370a <__swsetup_r+0x82>
 80036b0:	06dd      	lsls	r5, r3, #27
 80036b2:	d411      	bmi.n	80036d8 <__swsetup_r+0x50>
 80036b4:	2309      	movs	r3, #9
 80036b6:	6033      	str	r3, [r6, #0]
 80036b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036bc:	81a3      	strh	r3, [r4, #12]
 80036be:	f04f 30ff 	mov.w	r0, #4294967295
 80036c2:	e03e      	b.n	8003742 <__swsetup_r+0xba>
 80036c4:	4b25      	ldr	r3, [pc, #148]	; (800375c <__swsetup_r+0xd4>)
 80036c6:	429c      	cmp	r4, r3
 80036c8:	d101      	bne.n	80036ce <__swsetup_r+0x46>
 80036ca:	68ac      	ldr	r4, [r5, #8]
 80036cc:	e7eb      	b.n	80036a6 <__swsetup_r+0x1e>
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <__swsetup_r+0xd8>)
 80036d0:	429c      	cmp	r4, r3
 80036d2:	bf08      	it	eq
 80036d4:	68ec      	ldreq	r4, [r5, #12]
 80036d6:	e7e6      	b.n	80036a6 <__swsetup_r+0x1e>
 80036d8:	0758      	lsls	r0, r3, #29
 80036da:	d512      	bpl.n	8003702 <__swsetup_r+0x7a>
 80036dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036de:	b141      	cbz	r1, 80036f2 <__swsetup_r+0x6a>
 80036e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036e4:	4299      	cmp	r1, r3
 80036e6:	d002      	beq.n	80036ee <__swsetup_r+0x66>
 80036e8:	4630      	mov	r0, r6
 80036ea:	f000 fa59 	bl	8003ba0 <_free_r>
 80036ee:	2300      	movs	r3, #0
 80036f0:	6363      	str	r3, [r4, #52]	; 0x34
 80036f2:	89a3      	ldrh	r3, [r4, #12]
 80036f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036f8:	81a3      	strh	r3, [r4, #12]
 80036fa:	2300      	movs	r3, #0
 80036fc:	6063      	str	r3, [r4, #4]
 80036fe:	6923      	ldr	r3, [r4, #16]
 8003700:	6023      	str	r3, [r4, #0]
 8003702:	89a3      	ldrh	r3, [r4, #12]
 8003704:	f043 0308 	orr.w	r3, r3, #8
 8003708:	81a3      	strh	r3, [r4, #12]
 800370a:	6923      	ldr	r3, [r4, #16]
 800370c:	b94b      	cbnz	r3, 8003722 <__swsetup_r+0x9a>
 800370e:	89a3      	ldrh	r3, [r4, #12]
 8003710:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003718:	d003      	beq.n	8003722 <__swsetup_r+0x9a>
 800371a:	4621      	mov	r1, r4
 800371c:	4630      	mov	r0, r6
 800371e:	f000 f9ff 	bl	8003b20 <__smakebuf_r>
 8003722:	89a0      	ldrh	r0, [r4, #12]
 8003724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003728:	f010 0301 	ands.w	r3, r0, #1
 800372c:	d00a      	beq.n	8003744 <__swsetup_r+0xbc>
 800372e:	2300      	movs	r3, #0
 8003730:	60a3      	str	r3, [r4, #8]
 8003732:	6963      	ldr	r3, [r4, #20]
 8003734:	425b      	negs	r3, r3
 8003736:	61a3      	str	r3, [r4, #24]
 8003738:	6923      	ldr	r3, [r4, #16]
 800373a:	b943      	cbnz	r3, 800374e <__swsetup_r+0xc6>
 800373c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003740:	d1ba      	bne.n	80036b8 <__swsetup_r+0x30>
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	0781      	lsls	r1, r0, #30
 8003746:	bf58      	it	pl
 8003748:	6963      	ldrpl	r3, [r4, #20]
 800374a:	60a3      	str	r3, [r4, #8]
 800374c:	e7f4      	b.n	8003738 <__swsetup_r+0xb0>
 800374e:	2000      	movs	r0, #0
 8003750:	e7f7      	b.n	8003742 <__swsetup_r+0xba>
 8003752:	bf00      	nop
 8003754:	2000000c 	.word	0x2000000c
 8003758:	08003ef0 	.word	0x08003ef0
 800375c:	08003f10 	.word	0x08003f10
 8003760:	08003ed0 	.word	0x08003ed0

08003764 <__sflush_r>:
 8003764:	898a      	ldrh	r2, [r1, #12]
 8003766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800376a:	4605      	mov	r5, r0
 800376c:	0710      	lsls	r0, r2, #28
 800376e:	460c      	mov	r4, r1
 8003770:	d458      	bmi.n	8003824 <__sflush_r+0xc0>
 8003772:	684b      	ldr	r3, [r1, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	dc05      	bgt.n	8003784 <__sflush_r+0x20>
 8003778:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	dc02      	bgt.n	8003784 <__sflush_r+0x20>
 800377e:	2000      	movs	r0, #0
 8003780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003786:	2e00      	cmp	r6, #0
 8003788:	d0f9      	beq.n	800377e <__sflush_r+0x1a>
 800378a:	2300      	movs	r3, #0
 800378c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003790:	682f      	ldr	r7, [r5, #0]
 8003792:	602b      	str	r3, [r5, #0]
 8003794:	d032      	beq.n	80037fc <__sflush_r+0x98>
 8003796:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	075a      	lsls	r2, r3, #29
 800379c:	d505      	bpl.n	80037aa <__sflush_r+0x46>
 800379e:	6863      	ldr	r3, [r4, #4]
 80037a0:	1ac0      	subs	r0, r0, r3
 80037a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037a4:	b10b      	cbz	r3, 80037aa <__sflush_r+0x46>
 80037a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037a8:	1ac0      	subs	r0, r0, r3
 80037aa:	2300      	movs	r3, #0
 80037ac:	4602      	mov	r2, r0
 80037ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037b0:	6a21      	ldr	r1, [r4, #32]
 80037b2:	4628      	mov	r0, r5
 80037b4:	47b0      	blx	r6
 80037b6:	1c43      	adds	r3, r0, #1
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	d106      	bne.n	80037ca <__sflush_r+0x66>
 80037bc:	6829      	ldr	r1, [r5, #0]
 80037be:	291d      	cmp	r1, #29
 80037c0:	d82c      	bhi.n	800381c <__sflush_r+0xb8>
 80037c2:	4a2a      	ldr	r2, [pc, #168]	; (800386c <__sflush_r+0x108>)
 80037c4:	40ca      	lsrs	r2, r1
 80037c6:	07d6      	lsls	r6, r2, #31
 80037c8:	d528      	bpl.n	800381c <__sflush_r+0xb8>
 80037ca:	2200      	movs	r2, #0
 80037cc:	6062      	str	r2, [r4, #4]
 80037ce:	04d9      	lsls	r1, r3, #19
 80037d0:	6922      	ldr	r2, [r4, #16]
 80037d2:	6022      	str	r2, [r4, #0]
 80037d4:	d504      	bpl.n	80037e0 <__sflush_r+0x7c>
 80037d6:	1c42      	adds	r2, r0, #1
 80037d8:	d101      	bne.n	80037de <__sflush_r+0x7a>
 80037da:	682b      	ldr	r3, [r5, #0]
 80037dc:	b903      	cbnz	r3, 80037e0 <__sflush_r+0x7c>
 80037de:	6560      	str	r0, [r4, #84]	; 0x54
 80037e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037e2:	602f      	str	r7, [r5, #0]
 80037e4:	2900      	cmp	r1, #0
 80037e6:	d0ca      	beq.n	800377e <__sflush_r+0x1a>
 80037e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037ec:	4299      	cmp	r1, r3
 80037ee:	d002      	beq.n	80037f6 <__sflush_r+0x92>
 80037f0:	4628      	mov	r0, r5
 80037f2:	f000 f9d5 	bl	8003ba0 <_free_r>
 80037f6:	2000      	movs	r0, #0
 80037f8:	6360      	str	r0, [r4, #52]	; 0x34
 80037fa:	e7c1      	b.n	8003780 <__sflush_r+0x1c>
 80037fc:	6a21      	ldr	r1, [r4, #32]
 80037fe:	2301      	movs	r3, #1
 8003800:	4628      	mov	r0, r5
 8003802:	47b0      	blx	r6
 8003804:	1c41      	adds	r1, r0, #1
 8003806:	d1c7      	bne.n	8003798 <__sflush_r+0x34>
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0c4      	beq.n	8003798 <__sflush_r+0x34>
 800380e:	2b1d      	cmp	r3, #29
 8003810:	d001      	beq.n	8003816 <__sflush_r+0xb2>
 8003812:	2b16      	cmp	r3, #22
 8003814:	d101      	bne.n	800381a <__sflush_r+0xb6>
 8003816:	602f      	str	r7, [r5, #0]
 8003818:	e7b1      	b.n	800377e <__sflush_r+0x1a>
 800381a:	89a3      	ldrh	r3, [r4, #12]
 800381c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003820:	81a3      	strh	r3, [r4, #12]
 8003822:	e7ad      	b.n	8003780 <__sflush_r+0x1c>
 8003824:	690f      	ldr	r7, [r1, #16]
 8003826:	2f00      	cmp	r7, #0
 8003828:	d0a9      	beq.n	800377e <__sflush_r+0x1a>
 800382a:	0793      	lsls	r3, r2, #30
 800382c:	680e      	ldr	r6, [r1, #0]
 800382e:	bf08      	it	eq
 8003830:	694b      	ldreq	r3, [r1, #20]
 8003832:	600f      	str	r7, [r1, #0]
 8003834:	bf18      	it	ne
 8003836:	2300      	movne	r3, #0
 8003838:	eba6 0807 	sub.w	r8, r6, r7
 800383c:	608b      	str	r3, [r1, #8]
 800383e:	f1b8 0f00 	cmp.w	r8, #0
 8003842:	dd9c      	ble.n	800377e <__sflush_r+0x1a>
 8003844:	6a21      	ldr	r1, [r4, #32]
 8003846:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003848:	4643      	mov	r3, r8
 800384a:	463a      	mov	r2, r7
 800384c:	4628      	mov	r0, r5
 800384e:	47b0      	blx	r6
 8003850:	2800      	cmp	r0, #0
 8003852:	dc06      	bgt.n	8003862 <__sflush_r+0xfe>
 8003854:	89a3      	ldrh	r3, [r4, #12]
 8003856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800385a:	81a3      	strh	r3, [r4, #12]
 800385c:	f04f 30ff 	mov.w	r0, #4294967295
 8003860:	e78e      	b.n	8003780 <__sflush_r+0x1c>
 8003862:	4407      	add	r7, r0
 8003864:	eba8 0800 	sub.w	r8, r8, r0
 8003868:	e7e9      	b.n	800383e <__sflush_r+0xda>
 800386a:	bf00      	nop
 800386c:	20400001 	.word	0x20400001

08003870 <_fflush_r>:
 8003870:	b538      	push	{r3, r4, r5, lr}
 8003872:	690b      	ldr	r3, [r1, #16]
 8003874:	4605      	mov	r5, r0
 8003876:	460c      	mov	r4, r1
 8003878:	b913      	cbnz	r3, 8003880 <_fflush_r+0x10>
 800387a:	2500      	movs	r5, #0
 800387c:	4628      	mov	r0, r5
 800387e:	bd38      	pop	{r3, r4, r5, pc}
 8003880:	b118      	cbz	r0, 800388a <_fflush_r+0x1a>
 8003882:	6983      	ldr	r3, [r0, #24]
 8003884:	b90b      	cbnz	r3, 800388a <_fflush_r+0x1a>
 8003886:	f000 f887 	bl	8003998 <__sinit>
 800388a:	4b14      	ldr	r3, [pc, #80]	; (80038dc <_fflush_r+0x6c>)
 800388c:	429c      	cmp	r4, r3
 800388e:	d11b      	bne.n	80038c8 <_fflush_r+0x58>
 8003890:	686c      	ldr	r4, [r5, #4]
 8003892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0ef      	beq.n	800387a <_fflush_r+0xa>
 800389a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800389c:	07d0      	lsls	r0, r2, #31
 800389e:	d404      	bmi.n	80038aa <_fflush_r+0x3a>
 80038a0:	0599      	lsls	r1, r3, #22
 80038a2:	d402      	bmi.n	80038aa <_fflush_r+0x3a>
 80038a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038a6:	f000 f915 	bl	8003ad4 <__retarget_lock_acquire_recursive>
 80038aa:	4628      	mov	r0, r5
 80038ac:	4621      	mov	r1, r4
 80038ae:	f7ff ff59 	bl	8003764 <__sflush_r>
 80038b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038b4:	07da      	lsls	r2, r3, #31
 80038b6:	4605      	mov	r5, r0
 80038b8:	d4e0      	bmi.n	800387c <_fflush_r+0xc>
 80038ba:	89a3      	ldrh	r3, [r4, #12]
 80038bc:	059b      	lsls	r3, r3, #22
 80038be:	d4dd      	bmi.n	800387c <_fflush_r+0xc>
 80038c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038c2:	f000 f908 	bl	8003ad6 <__retarget_lock_release_recursive>
 80038c6:	e7d9      	b.n	800387c <_fflush_r+0xc>
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <_fflush_r+0x70>)
 80038ca:	429c      	cmp	r4, r3
 80038cc:	d101      	bne.n	80038d2 <_fflush_r+0x62>
 80038ce:	68ac      	ldr	r4, [r5, #8]
 80038d0:	e7df      	b.n	8003892 <_fflush_r+0x22>
 80038d2:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <_fflush_r+0x74>)
 80038d4:	429c      	cmp	r4, r3
 80038d6:	bf08      	it	eq
 80038d8:	68ec      	ldreq	r4, [r5, #12]
 80038da:	e7da      	b.n	8003892 <_fflush_r+0x22>
 80038dc:	08003ef0 	.word	0x08003ef0
 80038e0:	08003f10 	.word	0x08003f10
 80038e4:	08003ed0 	.word	0x08003ed0

080038e8 <std>:
 80038e8:	2300      	movs	r3, #0
 80038ea:	b510      	push	{r4, lr}
 80038ec:	4604      	mov	r4, r0
 80038ee:	e9c0 3300 	strd	r3, r3, [r0]
 80038f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038f6:	6083      	str	r3, [r0, #8]
 80038f8:	8181      	strh	r1, [r0, #12]
 80038fa:	6643      	str	r3, [r0, #100]	; 0x64
 80038fc:	81c2      	strh	r2, [r0, #14]
 80038fe:	6183      	str	r3, [r0, #24]
 8003900:	4619      	mov	r1, r3
 8003902:	2208      	movs	r2, #8
 8003904:	305c      	adds	r0, #92	; 0x5c
 8003906:	f7ff fdef 	bl	80034e8 <memset>
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <std+0x38>)
 800390c:	6263      	str	r3, [r4, #36]	; 0x24
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <std+0x3c>)
 8003910:	62a3      	str	r3, [r4, #40]	; 0x28
 8003912:	4b05      	ldr	r3, [pc, #20]	; (8003928 <std+0x40>)
 8003914:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003916:	4b05      	ldr	r3, [pc, #20]	; (800392c <std+0x44>)
 8003918:	6224      	str	r4, [r4, #32]
 800391a:	6323      	str	r3, [r4, #48]	; 0x30
 800391c:	bd10      	pop	{r4, pc}
 800391e:	bf00      	nop
 8003920:	08003d15 	.word	0x08003d15
 8003924:	08003d37 	.word	0x08003d37
 8003928:	08003d6f 	.word	0x08003d6f
 800392c:	08003d93 	.word	0x08003d93

08003930 <_cleanup_r>:
 8003930:	4901      	ldr	r1, [pc, #4]	; (8003938 <_cleanup_r+0x8>)
 8003932:	f000 b8af 	b.w	8003a94 <_fwalk_reent>
 8003936:	bf00      	nop
 8003938:	08003871 	.word	0x08003871

0800393c <__sfmoreglue>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	1e4a      	subs	r2, r1, #1
 8003940:	2568      	movs	r5, #104	; 0x68
 8003942:	4355      	muls	r5, r2
 8003944:	460e      	mov	r6, r1
 8003946:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800394a:	f000 f979 	bl	8003c40 <_malloc_r>
 800394e:	4604      	mov	r4, r0
 8003950:	b140      	cbz	r0, 8003964 <__sfmoreglue+0x28>
 8003952:	2100      	movs	r1, #0
 8003954:	e9c0 1600 	strd	r1, r6, [r0]
 8003958:	300c      	adds	r0, #12
 800395a:	60a0      	str	r0, [r4, #8]
 800395c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003960:	f7ff fdc2 	bl	80034e8 <memset>
 8003964:	4620      	mov	r0, r4
 8003966:	bd70      	pop	{r4, r5, r6, pc}

08003968 <__sfp_lock_acquire>:
 8003968:	4801      	ldr	r0, [pc, #4]	; (8003970 <__sfp_lock_acquire+0x8>)
 800396a:	f000 b8b3 	b.w	8003ad4 <__retarget_lock_acquire_recursive>
 800396e:	bf00      	nop
 8003970:	20000128 	.word	0x20000128

08003974 <__sfp_lock_release>:
 8003974:	4801      	ldr	r0, [pc, #4]	; (800397c <__sfp_lock_release+0x8>)
 8003976:	f000 b8ae 	b.w	8003ad6 <__retarget_lock_release_recursive>
 800397a:	bf00      	nop
 800397c:	20000128 	.word	0x20000128

08003980 <__sinit_lock_acquire>:
 8003980:	4801      	ldr	r0, [pc, #4]	; (8003988 <__sinit_lock_acquire+0x8>)
 8003982:	f000 b8a7 	b.w	8003ad4 <__retarget_lock_acquire_recursive>
 8003986:	bf00      	nop
 8003988:	20000123 	.word	0x20000123

0800398c <__sinit_lock_release>:
 800398c:	4801      	ldr	r0, [pc, #4]	; (8003994 <__sinit_lock_release+0x8>)
 800398e:	f000 b8a2 	b.w	8003ad6 <__retarget_lock_release_recursive>
 8003992:	bf00      	nop
 8003994:	20000123 	.word	0x20000123

08003998 <__sinit>:
 8003998:	b510      	push	{r4, lr}
 800399a:	4604      	mov	r4, r0
 800399c:	f7ff fff0 	bl	8003980 <__sinit_lock_acquire>
 80039a0:	69a3      	ldr	r3, [r4, #24]
 80039a2:	b11b      	cbz	r3, 80039ac <__sinit+0x14>
 80039a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039a8:	f7ff bff0 	b.w	800398c <__sinit_lock_release>
 80039ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80039b0:	6523      	str	r3, [r4, #80]	; 0x50
 80039b2:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <__sinit+0x68>)
 80039b4:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <__sinit+0x6c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80039ba:	42a3      	cmp	r3, r4
 80039bc:	bf04      	itt	eq
 80039be:	2301      	moveq	r3, #1
 80039c0:	61a3      	streq	r3, [r4, #24]
 80039c2:	4620      	mov	r0, r4
 80039c4:	f000 f820 	bl	8003a08 <__sfp>
 80039c8:	6060      	str	r0, [r4, #4]
 80039ca:	4620      	mov	r0, r4
 80039cc:	f000 f81c 	bl	8003a08 <__sfp>
 80039d0:	60a0      	str	r0, [r4, #8]
 80039d2:	4620      	mov	r0, r4
 80039d4:	f000 f818 	bl	8003a08 <__sfp>
 80039d8:	2200      	movs	r2, #0
 80039da:	60e0      	str	r0, [r4, #12]
 80039dc:	2104      	movs	r1, #4
 80039de:	6860      	ldr	r0, [r4, #4]
 80039e0:	f7ff ff82 	bl	80038e8 <std>
 80039e4:	68a0      	ldr	r0, [r4, #8]
 80039e6:	2201      	movs	r2, #1
 80039e8:	2109      	movs	r1, #9
 80039ea:	f7ff ff7d 	bl	80038e8 <std>
 80039ee:	68e0      	ldr	r0, [r4, #12]
 80039f0:	2202      	movs	r2, #2
 80039f2:	2112      	movs	r1, #18
 80039f4:	f7ff ff78 	bl	80038e8 <std>
 80039f8:	2301      	movs	r3, #1
 80039fa:	61a3      	str	r3, [r4, #24]
 80039fc:	e7d2      	b.n	80039a4 <__sinit+0xc>
 80039fe:	bf00      	nop
 8003a00:	08003ecc 	.word	0x08003ecc
 8003a04:	08003931 	.word	0x08003931

08003a08 <__sfp>:
 8003a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0a:	4607      	mov	r7, r0
 8003a0c:	f7ff ffac 	bl	8003968 <__sfp_lock_acquire>
 8003a10:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <__sfp+0x84>)
 8003a12:	681e      	ldr	r6, [r3, #0]
 8003a14:	69b3      	ldr	r3, [r6, #24]
 8003a16:	b913      	cbnz	r3, 8003a1e <__sfp+0x16>
 8003a18:	4630      	mov	r0, r6
 8003a1a:	f7ff ffbd 	bl	8003998 <__sinit>
 8003a1e:	3648      	adds	r6, #72	; 0x48
 8003a20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	d503      	bpl.n	8003a30 <__sfp+0x28>
 8003a28:	6833      	ldr	r3, [r6, #0]
 8003a2a:	b30b      	cbz	r3, 8003a70 <__sfp+0x68>
 8003a2c:	6836      	ldr	r6, [r6, #0]
 8003a2e:	e7f7      	b.n	8003a20 <__sfp+0x18>
 8003a30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a34:	b9d5      	cbnz	r5, 8003a6c <__sfp+0x64>
 8003a36:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <__sfp+0x88>)
 8003a38:	60e3      	str	r3, [r4, #12]
 8003a3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a3e:	6665      	str	r5, [r4, #100]	; 0x64
 8003a40:	f000 f847 	bl	8003ad2 <__retarget_lock_init_recursive>
 8003a44:	f7ff ff96 	bl	8003974 <__sfp_lock_release>
 8003a48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a50:	6025      	str	r5, [r4, #0]
 8003a52:	61a5      	str	r5, [r4, #24]
 8003a54:	2208      	movs	r2, #8
 8003a56:	4629      	mov	r1, r5
 8003a58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a5c:	f7ff fd44 	bl	80034e8 <memset>
 8003a60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a68:	4620      	mov	r0, r4
 8003a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a6c:	3468      	adds	r4, #104	; 0x68
 8003a6e:	e7d9      	b.n	8003a24 <__sfp+0x1c>
 8003a70:	2104      	movs	r1, #4
 8003a72:	4638      	mov	r0, r7
 8003a74:	f7ff ff62 	bl	800393c <__sfmoreglue>
 8003a78:	4604      	mov	r4, r0
 8003a7a:	6030      	str	r0, [r6, #0]
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d1d5      	bne.n	8003a2c <__sfp+0x24>
 8003a80:	f7ff ff78 	bl	8003974 <__sfp_lock_release>
 8003a84:	230c      	movs	r3, #12
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	e7ee      	b.n	8003a68 <__sfp+0x60>
 8003a8a:	bf00      	nop
 8003a8c:	08003ecc 	.word	0x08003ecc
 8003a90:	ffff0001 	.word	0xffff0001

08003a94 <_fwalk_reent>:
 8003a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a98:	4606      	mov	r6, r0
 8003a9a:	4688      	mov	r8, r1
 8003a9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003aa0:	2700      	movs	r7, #0
 8003aa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003aa6:	f1b9 0901 	subs.w	r9, r9, #1
 8003aaa:	d505      	bpl.n	8003ab8 <_fwalk_reent+0x24>
 8003aac:	6824      	ldr	r4, [r4, #0]
 8003aae:	2c00      	cmp	r4, #0
 8003ab0:	d1f7      	bne.n	8003aa2 <_fwalk_reent+0xe>
 8003ab2:	4638      	mov	r0, r7
 8003ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ab8:	89ab      	ldrh	r3, [r5, #12]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d907      	bls.n	8003ace <_fwalk_reent+0x3a>
 8003abe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	d003      	beq.n	8003ace <_fwalk_reent+0x3a>
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	4630      	mov	r0, r6
 8003aca:	47c0      	blx	r8
 8003acc:	4307      	orrs	r7, r0
 8003ace:	3568      	adds	r5, #104	; 0x68
 8003ad0:	e7e9      	b.n	8003aa6 <_fwalk_reent+0x12>

08003ad2 <__retarget_lock_init_recursive>:
 8003ad2:	4770      	bx	lr

08003ad4 <__retarget_lock_acquire_recursive>:
 8003ad4:	4770      	bx	lr

08003ad6 <__retarget_lock_release_recursive>:
 8003ad6:	4770      	bx	lr

08003ad8 <__swhatbuf_r>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	460e      	mov	r6, r1
 8003adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ae0:	2900      	cmp	r1, #0
 8003ae2:	b096      	sub	sp, #88	; 0x58
 8003ae4:	4614      	mov	r4, r2
 8003ae6:	461d      	mov	r5, r3
 8003ae8:	da07      	bge.n	8003afa <__swhatbuf_r+0x22>
 8003aea:	2300      	movs	r3, #0
 8003aec:	602b      	str	r3, [r5, #0]
 8003aee:	89b3      	ldrh	r3, [r6, #12]
 8003af0:	061a      	lsls	r2, r3, #24
 8003af2:	d410      	bmi.n	8003b16 <__swhatbuf_r+0x3e>
 8003af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af8:	e00e      	b.n	8003b18 <__swhatbuf_r+0x40>
 8003afa:	466a      	mov	r2, sp
 8003afc:	f000 f970 	bl	8003de0 <_fstat_r>
 8003b00:	2800      	cmp	r0, #0
 8003b02:	dbf2      	blt.n	8003aea <__swhatbuf_r+0x12>
 8003b04:	9a01      	ldr	r2, [sp, #4]
 8003b06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b0e:	425a      	negs	r2, r3
 8003b10:	415a      	adcs	r2, r3
 8003b12:	602a      	str	r2, [r5, #0]
 8003b14:	e7ee      	b.n	8003af4 <__swhatbuf_r+0x1c>
 8003b16:	2340      	movs	r3, #64	; 0x40
 8003b18:	2000      	movs	r0, #0
 8003b1a:	6023      	str	r3, [r4, #0]
 8003b1c:	b016      	add	sp, #88	; 0x58
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}

08003b20 <__smakebuf_r>:
 8003b20:	898b      	ldrh	r3, [r1, #12]
 8003b22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b24:	079d      	lsls	r5, r3, #30
 8003b26:	4606      	mov	r6, r0
 8003b28:	460c      	mov	r4, r1
 8003b2a:	d507      	bpl.n	8003b3c <__smakebuf_r+0x1c>
 8003b2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b30:	6023      	str	r3, [r4, #0]
 8003b32:	6123      	str	r3, [r4, #16]
 8003b34:	2301      	movs	r3, #1
 8003b36:	6163      	str	r3, [r4, #20]
 8003b38:	b002      	add	sp, #8
 8003b3a:	bd70      	pop	{r4, r5, r6, pc}
 8003b3c:	ab01      	add	r3, sp, #4
 8003b3e:	466a      	mov	r2, sp
 8003b40:	f7ff ffca 	bl	8003ad8 <__swhatbuf_r>
 8003b44:	9900      	ldr	r1, [sp, #0]
 8003b46:	4605      	mov	r5, r0
 8003b48:	4630      	mov	r0, r6
 8003b4a:	f000 f879 	bl	8003c40 <_malloc_r>
 8003b4e:	b948      	cbnz	r0, 8003b64 <__smakebuf_r+0x44>
 8003b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b54:	059a      	lsls	r2, r3, #22
 8003b56:	d4ef      	bmi.n	8003b38 <__smakebuf_r+0x18>
 8003b58:	f023 0303 	bic.w	r3, r3, #3
 8003b5c:	f043 0302 	orr.w	r3, r3, #2
 8003b60:	81a3      	strh	r3, [r4, #12]
 8003b62:	e7e3      	b.n	8003b2c <__smakebuf_r+0xc>
 8003b64:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <__smakebuf_r+0x7c>)
 8003b66:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b68:	89a3      	ldrh	r3, [r4, #12]
 8003b6a:	6020      	str	r0, [r4, #0]
 8003b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b70:	81a3      	strh	r3, [r4, #12]
 8003b72:	9b00      	ldr	r3, [sp, #0]
 8003b74:	6163      	str	r3, [r4, #20]
 8003b76:	9b01      	ldr	r3, [sp, #4]
 8003b78:	6120      	str	r0, [r4, #16]
 8003b7a:	b15b      	cbz	r3, 8003b94 <__smakebuf_r+0x74>
 8003b7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b80:	4630      	mov	r0, r6
 8003b82:	f000 f93f 	bl	8003e04 <_isatty_r>
 8003b86:	b128      	cbz	r0, 8003b94 <__smakebuf_r+0x74>
 8003b88:	89a3      	ldrh	r3, [r4, #12]
 8003b8a:	f023 0303 	bic.w	r3, r3, #3
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	81a3      	strh	r3, [r4, #12]
 8003b94:	89a0      	ldrh	r0, [r4, #12]
 8003b96:	4305      	orrs	r5, r0
 8003b98:	81a5      	strh	r5, [r4, #12]
 8003b9a:	e7cd      	b.n	8003b38 <__smakebuf_r+0x18>
 8003b9c:	08003931 	.word	0x08003931

08003ba0 <_free_r>:
 8003ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ba2:	2900      	cmp	r1, #0
 8003ba4:	d048      	beq.n	8003c38 <_free_r+0x98>
 8003ba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003baa:	9001      	str	r0, [sp, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f1a1 0404 	sub.w	r4, r1, #4
 8003bb2:	bfb8      	it	lt
 8003bb4:	18e4      	addlt	r4, r4, r3
 8003bb6:	f000 f947 	bl	8003e48 <__malloc_lock>
 8003bba:	4a20      	ldr	r2, [pc, #128]	; (8003c3c <_free_r+0x9c>)
 8003bbc:	9801      	ldr	r0, [sp, #4]
 8003bbe:	6813      	ldr	r3, [r2, #0]
 8003bc0:	4615      	mov	r5, r2
 8003bc2:	b933      	cbnz	r3, 8003bd2 <_free_r+0x32>
 8003bc4:	6063      	str	r3, [r4, #4]
 8003bc6:	6014      	str	r4, [r2, #0]
 8003bc8:	b003      	add	sp, #12
 8003bca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bce:	f000 b941 	b.w	8003e54 <__malloc_unlock>
 8003bd2:	42a3      	cmp	r3, r4
 8003bd4:	d90b      	bls.n	8003bee <_free_r+0x4e>
 8003bd6:	6821      	ldr	r1, [r4, #0]
 8003bd8:	1862      	adds	r2, r4, r1
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	bf04      	itt	eq
 8003bde:	681a      	ldreq	r2, [r3, #0]
 8003be0:	685b      	ldreq	r3, [r3, #4]
 8003be2:	6063      	str	r3, [r4, #4]
 8003be4:	bf04      	itt	eq
 8003be6:	1852      	addeq	r2, r2, r1
 8003be8:	6022      	streq	r2, [r4, #0]
 8003bea:	602c      	str	r4, [r5, #0]
 8003bec:	e7ec      	b.n	8003bc8 <_free_r+0x28>
 8003bee:	461a      	mov	r2, r3
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	b10b      	cbz	r3, 8003bf8 <_free_r+0x58>
 8003bf4:	42a3      	cmp	r3, r4
 8003bf6:	d9fa      	bls.n	8003bee <_free_r+0x4e>
 8003bf8:	6811      	ldr	r1, [r2, #0]
 8003bfa:	1855      	adds	r5, r2, r1
 8003bfc:	42a5      	cmp	r5, r4
 8003bfe:	d10b      	bne.n	8003c18 <_free_r+0x78>
 8003c00:	6824      	ldr	r4, [r4, #0]
 8003c02:	4421      	add	r1, r4
 8003c04:	1854      	adds	r4, r2, r1
 8003c06:	42a3      	cmp	r3, r4
 8003c08:	6011      	str	r1, [r2, #0]
 8003c0a:	d1dd      	bne.n	8003bc8 <_free_r+0x28>
 8003c0c:	681c      	ldr	r4, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	6053      	str	r3, [r2, #4]
 8003c12:	4421      	add	r1, r4
 8003c14:	6011      	str	r1, [r2, #0]
 8003c16:	e7d7      	b.n	8003bc8 <_free_r+0x28>
 8003c18:	d902      	bls.n	8003c20 <_free_r+0x80>
 8003c1a:	230c      	movs	r3, #12
 8003c1c:	6003      	str	r3, [r0, #0]
 8003c1e:	e7d3      	b.n	8003bc8 <_free_r+0x28>
 8003c20:	6825      	ldr	r5, [r4, #0]
 8003c22:	1961      	adds	r1, r4, r5
 8003c24:	428b      	cmp	r3, r1
 8003c26:	bf04      	itt	eq
 8003c28:	6819      	ldreq	r1, [r3, #0]
 8003c2a:	685b      	ldreq	r3, [r3, #4]
 8003c2c:	6063      	str	r3, [r4, #4]
 8003c2e:	bf04      	itt	eq
 8003c30:	1949      	addeq	r1, r1, r5
 8003c32:	6021      	streq	r1, [r4, #0]
 8003c34:	6054      	str	r4, [r2, #4]
 8003c36:	e7c7      	b.n	8003bc8 <_free_r+0x28>
 8003c38:	b003      	add	sp, #12
 8003c3a:	bd30      	pop	{r4, r5, pc}
 8003c3c:	20000090 	.word	0x20000090

08003c40 <_malloc_r>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	1ccd      	adds	r5, r1, #3
 8003c44:	f025 0503 	bic.w	r5, r5, #3
 8003c48:	3508      	adds	r5, #8
 8003c4a:	2d0c      	cmp	r5, #12
 8003c4c:	bf38      	it	cc
 8003c4e:	250c      	movcc	r5, #12
 8003c50:	2d00      	cmp	r5, #0
 8003c52:	4606      	mov	r6, r0
 8003c54:	db01      	blt.n	8003c5a <_malloc_r+0x1a>
 8003c56:	42a9      	cmp	r1, r5
 8003c58:	d903      	bls.n	8003c62 <_malloc_r+0x22>
 8003c5a:	230c      	movs	r3, #12
 8003c5c:	6033      	str	r3, [r6, #0]
 8003c5e:	2000      	movs	r0, #0
 8003c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c62:	f000 f8f1 	bl	8003e48 <__malloc_lock>
 8003c66:	4921      	ldr	r1, [pc, #132]	; (8003cec <_malloc_r+0xac>)
 8003c68:	680a      	ldr	r2, [r1, #0]
 8003c6a:	4614      	mov	r4, r2
 8003c6c:	b99c      	cbnz	r4, 8003c96 <_malloc_r+0x56>
 8003c6e:	4f20      	ldr	r7, [pc, #128]	; (8003cf0 <_malloc_r+0xb0>)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	b923      	cbnz	r3, 8003c7e <_malloc_r+0x3e>
 8003c74:	4621      	mov	r1, r4
 8003c76:	4630      	mov	r0, r6
 8003c78:	f000 f83c 	bl	8003cf4 <_sbrk_r>
 8003c7c:	6038      	str	r0, [r7, #0]
 8003c7e:	4629      	mov	r1, r5
 8003c80:	4630      	mov	r0, r6
 8003c82:	f000 f837 	bl	8003cf4 <_sbrk_r>
 8003c86:	1c43      	adds	r3, r0, #1
 8003c88:	d123      	bne.n	8003cd2 <_malloc_r+0x92>
 8003c8a:	230c      	movs	r3, #12
 8003c8c:	6033      	str	r3, [r6, #0]
 8003c8e:	4630      	mov	r0, r6
 8003c90:	f000 f8e0 	bl	8003e54 <__malloc_unlock>
 8003c94:	e7e3      	b.n	8003c5e <_malloc_r+0x1e>
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	1b5b      	subs	r3, r3, r5
 8003c9a:	d417      	bmi.n	8003ccc <_malloc_r+0x8c>
 8003c9c:	2b0b      	cmp	r3, #11
 8003c9e:	d903      	bls.n	8003ca8 <_malloc_r+0x68>
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	441c      	add	r4, r3
 8003ca4:	6025      	str	r5, [r4, #0]
 8003ca6:	e004      	b.n	8003cb2 <_malloc_r+0x72>
 8003ca8:	6863      	ldr	r3, [r4, #4]
 8003caa:	42a2      	cmp	r2, r4
 8003cac:	bf0c      	ite	eq
 8003cae:	600b      	streq	r3, [r1, #0]
 8003cb0:	6053      	strne	r3, [r2, #4]
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	f000 f8ce 	bl	8003e54 <__malloc_unlock>
 8003cb8:	f104 000b 	add.w	r0, r4, #11
 8003cbc:	1d23      	adds	r3, r4, #4
 8003cbe:	f020 0007 	bic.w	r0, r0, #7
 8003cc2:	1ac2      	subs	r2, r0, r3
 8003cc4:	d0cc      	beq.n	8003c60 <_malloc_r+0x20>
 8003cc6:	1a1b      	subs	r3, r3, r0
 8003cc8:	50a3      	str	r3, [r4, r2]
 8003cca:	e7c9      	b.n	8003c60 <_malloc_r+0x20>
 8003ccc:	4622      	mov	r2, r4
 8003cce:	6864      	ldr	r4, [r4, #4]
 8003cd0:	e7cc      	b.n	8003c6c <_malloc_r+0x2c>
 8003cd2:	1cc4      	adds	r4, r0, #3
 8003cd4:	f024 0403 	bic.w	r4, r4, #3
 8003cd8:	42a0      	cmp	r0, r4
 8003cda:	d0e3      	beq.n	8003ca4 <_malloc_r+0x64>
 8003cdc:	1a21      	subs	r1, r4, r0
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f000 f808 	bl	8003cf4 <_sbrk_r>
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d1dd      	bne.n	8003ca4 <_malloc_r+0x64>
 8003ce8:	e7cf      	b.n	8003c8a <_malloc_r+0x4a>
 8003cea:	bf00      	nop
 8003cec:	20000090 	.word	0x20000090
 8003cf0:	20000094 	.word	0x20000094

08003cf4 <_sbrk_r>:
 8003cf4:	b538      	push	{r3, r4, r5, lr}
 8003cf6:	4d06      	ldr	r5, [pc, #24]	; (8003d10 <_sbrk_r+0x1c>)
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	4608      	mov	r0, r1
 8003cfe:	602b      	str	r3, [r5, #0]
 8003d00:	f7fc fe16 	bl	8000930 <_sbrk>
 8003d04:	1c43      	adds	r3, r0, #1
 8003d06:	d102      	bne.n	8003d0e <_sbrk_r+0x1a>
 8003d08:	682b      	ldr	r3, [r5, #0]
 8003d0a:	b103      	cbz	r3, 8003d0e <_sbrk_r+0x1a>
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	bd38      	pop	{r3, r4, r5, pc}
 8003d10:	2000012c 	.word	0x2000012c

08003d14 <__sread>:
 8003d14:	b510      	push	{r4, lr}
 8003d16:	460c      	mov	r4, r1
 8003d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d1c:	f000 f8a0 	bl	8003e60 <_read_r>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	bfab      	itete	ge
 8003d24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d26:	89a3      	ldrhlt	r3, [r4, #12]
 8003d28:	181b      	addge	r3, r3, r0
 8003d2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d2e:	bfac      	ite	ge
 8003d30:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d32:	81a3      	strhlt	r3, [r4, #12]
 8003d34:	bd10      	pop	{r4, pc}

08003d36 <__swrite>:
 8003d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d3a:	461f      	mov	r7, r3
 8003d3c:	898b      	ldrh	r3, [r1, #12]
 8003d3e:	05db      	lsls	r3, r3, #23
 8003d40:	4605      	mov	r5, r0
 8003d42:	460c      	mov	r4, r1
 8003d44:	4616      	mov	r6, r2
 8003d46:	d505      	bpl.n	8003d54 <__swrite+0x1e>
 8003d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f000 f868 	bl	8003e24 <_lseek_r>
 8003d54:	89a3      	ldrh	r3, [r4, #12]
 8003d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d5e:	81a3      	strh	r3, [r4, #12]
 8003d60:	4632      	mov	r2, r6
 8003d62:	463b      	mov	r3, r7
 8003d64:	4628      	mov	r0, r5
 8003d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6a:	f000 b817 	b.w	8003d9c <_write_r>

08003d6e <__sseek>:
 8003d6e:	b510      	push	{r4, lr}
 8003d70:	460c      	mov	r4, r1
 8003d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d76:	f000 f855 	bl	8003e24 <_lseek_r>
 8003d7a:	1c43      	adds	r3, r0, #1
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	bf15      	itete	ne
 8003d80:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d8a:	81a3      	strheq	r3, [r4, #12]
 8003d8c:	bf18      	it	ne
 8003d8e:	81a3      	strhne	r3, [r4, #12]
 8003d90:	bd10      	pop	{r4, pc}

08003d92 <__sclose>:
 8003d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d96:	f000 b813 	b.w	8003dc0 <_close_r>
	...

08003d9c <_write_r>:
 8003d9c:	b538      	push	{r3, r4, r5, lr}
 8003d9e:	4d07      	ldr	r5, [pc, #28]	; (8003dbc <_write_r+0x20>)
 8003da0:	4604      	mov	r4, r0
 8003da2:	4608      	mov	r0, r1
 8003da4:	4611      	mov	r1, r2
 8003da6:	2200      	movs	r2, #0
 8003da8:	602a      	str	r2, [r5, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	f7fc fd6f 	bl	800088e <_write>
 8003db0:	1c43      	adds	r3, r0, #1
 8003db2:	d102      	bne.n	8003dba <_write_r+0x1e>
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	b103      	cbz	r3, 8003dba <_write_r+0x1e>
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	bd38      	pop	{r3, r4, r5, pc}
 8003dbc:	2000012c 	.word	0x2000012c

08003dc0 <_close_r>:
 8003dc0:	b538      	push	{r3, r4, r5, lr}
 8003dc2:	4d06      	ldr	r5, [pc, #24]	; (8003ddc <_close_r+0x1c>)
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	4604      	mov	r4, r0
 8003dc8:	4608      	mov	r0, r1
 8003dca:	602b      	str	r3, [r5, #0]
 8003dcc:	f7fc fd7b 	bl	80008c6 <_close>
 8003dd0:	1c43      	adds	r3, r0, #1
 8003dd2:	d102      	bne.n	8003dda <_close_r+0x1a>
 8003dd4:	682b      	ldr	r3, [r5, #0]
 8003dd6:	b103      	cbz	r3, 8003dda <_close_r+0x1a>
 8003dd8:	6023      	str	r3, [r4, #0]
 8003dda:	bd38      	pop	{r3, r4, r5, pc}
 8003ddc:	2000012c 	.word	0x2000012c

08003de0 <_fstat_r>:
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	4d07      	ldr	r5, [pc, #28]	; (8003e00 <_fstat_r+0x20>)
 8003de4:	2300      	movs	r3, #0
 8003de6:	4604      	mov	r4, r0
 8003de8:	4608      	mov	r0, r1
 8003dea:	4611      	mov	r1, r2
 8003dec:	602b      	str	r3, [r5, #0]
 8003dee:	f7fc fd76 	bl	80008de <_fstat>
 8003df2:	1c43      	adds	r3, r0, #1
 8003df4:	d102      	bne.n	8003dfc <_fstat_r+0x1c>
 8003df6:	682b      	ldr	r3, [r5, #0]
 8003df8:	b103      	cbz	r3, 8003dfc <_fstat_r+0x1c>
 8003dfa:	6023      	str	r3, [r4, #0]
 8003dfc:	bd38      	pop	{r3, r4, r5, pc}
 8003dfe:	bf00      	nop
 8003e00:	2000012c 	.word	0x2000012c

08003e04 <_isatty_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4d06      	ldr	r5, [pc, #24]	; (8003e20 <_isatty_r+0x1c>)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	f7fc fd75 	bl	80008fe <_isatty>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d102      	bne.n	8003e1e <_isatty_r+0x1a>
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	b103      	cbz	r3, 8003e1e <_isatty_r+0x1a>
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	2000012c 	.word	0x2000012c

08003e24 <_lseek_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4d07      	ldr	r5, [pc, #28]	; (8003e44 <_lseek_r+0x20>)
 8003e28:	4604      	mov	r4, r0
 8003e2a:	4608      	mov	r0, r1
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	2200      	movs	r2, #0
 8003e30:	602a      	str	r2, [r5, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f7fc fd6e 	bl	8000914 <_lseek>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d102      	bne.n	8003e42 <_lseek_r+0x1e>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	b103      	cbz	r3, 8003e42 <_lseek_r+0x1e>
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
 8003e44:	2000012c 	.word	0x2000012c

08003e48 <__malloc_lock>:
 8003e48:	4801      	ldr	r0, [pc, #4]	; (8003e50 <__malloc_lock+0x8>)
 8003e4a:	f7ff be43 	b.w	8003ad4 <__retarget_lock_acquire_recursive>
 8003e4e:	bf00      	nop
 8003e50:	20000124 	.word	0x20000124

08003e54 <__malloc_unlock>:
 8003e54:	4801      	ldr	r0, [pc, #4]	; (8003e5c <__malloc_unlock+0x8>)
 8003e56:	f7ff be3e 	b.w	8003ad6 <__retarget_lock_release_recursive>
 8003e5a:	bf00      	nop
 8003e5c:	20000124 	.word	0x20000124

08003e60 <_read_r>:
 8003e60:	b538      	push	{r3, r4, r5, lr}
 8003e62:	4d07      	ldr	r5, [pc, #28]	; (8003e80 <_read_r+0x20>)
 8003e64:	4604      	mov	r4, r0
 8003e66:	4608      	mov	r0, r1
 8003e68:	4611      	mov	r1, r2
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	602a      	str	r2, [r5, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f7fc fcf0 	bl	8000854 <_read>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d102      	bne.n	8003e7e <_read_r+0x1e>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	b103      	cbz	r3, 8003e7e <_read_r+0x1e>
 8003e7c:	6023      	str	r3, [r4, #0]
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	2000012c 	.word	0x2000012c

08003e84 <_init>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	bf00      	nop
 8003e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8a:	bc08      	pop	{r3}
 8003e8c:	469e      	mov	lr, r3
 8003e8e:	4770      	bx	lr

08003e90 <_fini>:
 8003e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e92:	bf00      	nop
 8003e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e96:	bc08      	pop	{r3}
 8003e98:	469e      	mov	lr, r3
 8003e9a:	4770      	bx	lr
