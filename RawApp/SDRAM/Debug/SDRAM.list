
SDRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002394  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800258c  0800258c  0001258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800259c  0800259c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800259c  0800259c  0001259c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025a4  080025a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025a4  080025a4  000125a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025a8  080025a8  000125a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  080025b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080025b8  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d639  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f17  00000000  00000000  0002d673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  0002f590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  000301c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027263  00000000  00000000  00030cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddf6  00000000  00000000  00057f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f51db  00000000  00000000  00065d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015af2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003208  00000000  00000000  0015af80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002574 	.word	0x08002574

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002574 	.word	0x08002574

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
 8000544:	615a      	str	r2, [r3, #20]
 8000546:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000548:	4b20      	ldr	r3, [pc, #128]	; (80005cc <MX_FMC_Init+0x9c>)
 800054a:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <MX_FMC_Init+0xa0>)
 800054c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800054e:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <MX_FMC_Init+0x9c>)
 8000550:	2200      	movs	r2, #0
 8000552:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000554:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <MX_FMC_Init+0x9c>)
 8000556:	2201      	movs	r2, #1
 8000558:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800055a:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <MX_FMC_Init+0x9c>)
 800055c:	2208      	movs	r2, #8
 800055e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000560:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <MX_FMC_Init+0x9c>)
 8000562:	2210      	movs	r2, #16
 8000564:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000566:	4b19      	ldr	r3, [pc, #100]	; (80005cc <MX_FMC_Init+0x9c>)
 8000568:	2240      	movs	r2, #64	; 0x40
 800056a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_FMC_Init+0x9c>)
 800056e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000572:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_FMC_Init+0x9c>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_FMC_Init+0x9c>)
 800057c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000580:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_FMC_Init+0x9c>)
 8000584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000588:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <MX_FMC_Init+0x9c>)
 800058c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000590:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000592:	2302      	movs	r3, #2
 8000594:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8000596:	2308      	movs	r3, #8
 8000598:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 800059a:	2306      	movs	r3, #6
 800059c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 800059e:	2306      	movs	r3, #6
 80005a0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 4;
 80005a2:	2304      	movs	r3, #4
 80005a4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4619      	mov	r1, r3
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <MX_FMC_Init+0x9c>)
 80005b4:	f001 fa38 	bl	8001a28 <HAL_SDRAM_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 80005be:	f000 f98f 	bl	80008e0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80005c2:	bf00      	nop
 80005c4:	3720      	adds	r7, #32
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	2000002c 	.word	0x2000002c
 80005d0:	a0000140 	.word	0xa0000140

080005d4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80005e8:	4b33      	ldr	r3, [pc, #204]	; (80006b8 <HAL_FMC_MspInit+0xe4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d15e      	bne.n	80006ae <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 80005f0:	4b31      	ldr	r3, [pc, #196]	; (80006b8 <HAL_FMC_MspInit+0xe4>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80005f6:	4b31      	ldr	r3, [pc, #196]	; (80006bc <HAL_FMC_MspInit+0xe8>)
 80005f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005fa:	4a30      	ldr	r2, [pc, #192]	; (80006bc <HAL_FMC_MspInit+0xe8>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6393      	str	r3, [r2, #56]	; 0x38
 8000602:	4b2e      	ldr	r3, [pc, #184]	; (80006bc <HAL_FMC_MspInit+0xe8>)
 8000604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800060e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000612:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	2302      	movs	r3, #2
 8000616:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800061c:	2303      	movs	r3, #3
 800061e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000620:	230c      	movs	r3, #12
 8000622:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4619      	mov	r1, r3
 8000628:	4825      	ldr	r0, [pc, #148]	; (80006c0 <HAL_FMC_MspInit+0xec>)
 800062a:	f000 fbd7 	bl	8000ddc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800062e:	230d      	movs	r3, #13
 8000630:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	2302      	movs	r3, #2
 8000634:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063a:	2303      	movs	r3, #3
 800063c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800063e:	230c      	movs	r3, #12
 8000640:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4619      	mov	r1, r3
 8000646:	481f      	ldr	r0, [pc, #124]	; (80006c4 <HAL_FMC_MspInit+0xf0>)
 8000648:	f000 fbc8 	bl	8000ddc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 800064c:	f248 1337 	movw	r3, #33079	; 0x8137
 8000650:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000652:	2302      	movs	r3, #2
 8000654:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800065a:	2303      	movs	r3, #3
 800065c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800065e:	230c      	movs	r3, #12
 8000660:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	4619      	mov	r1, r3
 8000666:	4818      	ldr	r0, [pc, #96]	; (80006c8 <HAL_FMC_MspInit+0xf4>)
 8000668:	f000 fbb8 	bl	8000ddc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800066c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000670:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000672:	2302      	movs	r3, #2
 8000674:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067a:	2303      	movs	r3, #3
 800067c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800067e:	230c      	movs	r3, #12
 8000680:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4619      	mov	r1, r3
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <HAL_FMC_MspInit+0xf8>)
 8000688:	f000 fba8 	bl	8000ddc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800068c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000690:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	2302      	movs	r3, #2
 8000694:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069a:	2303      	movs	r3, #3
 800069c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800069e:	230c      	movs	r3, #12
 80006a0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	480a      	ldr	r0, [pc, #40]	; (80006d0 <HAL_FMC_MspInit+0xfc>)
 80006a8:	f000 fb98 	bl	8000ddc <HAL_GPIO_Init>
 80006ac:	e000      	b.n	80006b0 <HAL_FMC_MspInit+0xdc>
    return;
 80006ae:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000028 	.word	0x20000028
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40021400 	.word	0x40021400
 80006c4:	40020800 	.word	0x40020800
 80006c8:	40021800 	.word	0x40021800
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40020c00 	.word	0x40020c00

080006d4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80006dc:	f7ff ff7a 	bl	80005d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08e      	sub	sp, #56	; 0x38
 80006ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	4b3b      	ldr	r3, [pc, #236]	; (80007ec <MX_GPIO_Init+0x104>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a3a      	ldr	r2, [pc, #232]	; (80007ec <MX_GPIO_Init+0x104>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b38      	ldr	r3, [pc, #224]	; (80007ec <MX_GPIO_Init+0x104>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	623b      	str	r3, [r7, #32]
 8000714:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000716:	4b35      	ldr	r3, [pc, #212]	; (80007ec <MX_GPIO_Init+0x104>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a34      	ldr	r2, [pc, #208]	; (80007ec <MX_GPIO_Init+0x104>)
 800071c:	f043 0320 	orr.w	r3, r3, #32
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b32      	ldr	r3, [pc, #200]	; (80007ec <MX_GPIO_Init+0x104>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0320 	and.w	r3, r3, #32
 800072a:	61fb      	str	r3, [r7, #28]
 800072c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	4b2f      	ldr	r3, [pc, #188]	; (80007ec <MX_GPIO_Init+0x104>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a2e      	ldr	r2, [pc, #184]	; (80007ec <MX_GPIO_Init+0x104>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b2c      	ldr	r3, [pc, #176]	; (80007ec <MX_GPIO_Init+0x104>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	61bb      	str	r3, [r7, #24]
 8000744:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b29      	ldr	r3, [pc, #164]	; (80007ec <MX_GPIO_Init+0x104>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a28      	ldr	r2, [pc, #160]	; (80007ec <MX_GPIO_Init+0x104>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b26      	ldr	r3, [pc, #152]	; (80007ec <MX_GPIO_Init+0x104>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_GPIO_Init+0x104>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a22      	ldr	r2, [pc, #136]	; (80007ec <MX_GPIO_Init+0x104>)
 8000764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <MX_GPIO_Init+0x104>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000776:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <MX_GPIO_Init+0x104>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <MX_GPIO_Init+0x104>)
 800077c:	f043 0310 	orr.w	r3, r3, #16
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_GPIO_Init+0x104>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0310 	and.w	r3, r3, #16
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_GPIO_Init+0x104>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a16      	ldr	r2, [pc, #88]	; (80007ec <MX_GPIO_Init+0x104>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_GPIO_Init+0x104>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_GPIO_Init+0x104>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <MX_GPIO_Init+0x104>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_GPIO_Init+0x104>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DS1_Pin|DS0_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2103      	movs	r1, #3
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <MX_GPIO_Init+0x108>)
 80007c4:	f000 fcb6 	bl	8001134 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DS1_Pin|DS0_Pin;
 80007c8:	2303      	movs	r3, #3
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007dc:	4619      	mov	r1, r3
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_GPIO_Init+0x108>)
 80007e0:	f000 fafc 	bl	8000ddc <HAL_GPIO_Init>

}
 80007e4:	bf00      	nop
 80007e6:	3738      	adds	r7, #56	; 0x38
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f000 f981 	bl	8000afe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f808 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f7ff ff72 	bl	80006e8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000804:	f000 f8dc 	bl	80009c0 <MX_TIM3_Init>
  MX_FMC_Init();
 8000808:	f7ff fe92 	bl	8000530 <MX_FMC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800080c:	e7fe      	b.n	800080c <main+0x18>
	...

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	; 0x50
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2234      	movs	r2, #52	; 0x34
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fea0 	bl	8002564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000834:	f000 fc98 	bl	8001168 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <SystemClock_Config+0xc8>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a26      	ldr	r2, [pc, #152]	; (80008d8 <SystemClock_Config+0xc8>)
 800083e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
 8000844:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <SystemClock_Config+0xc8>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <SystemClock_Config+0xcc>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a21      	ldr	r2, [pc, #132]	; (80008dc <SystemClock_Config+0xcc>)
 8000856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <SystemClock_Config+0xcc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000868:	2301      	movs	r3, #1
 800086a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000870:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 800087c:	230f      	movs	r3, #15
 800087e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000880:	23d8      	movs	r3, #216	; 0xd8
 8000882:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000884:	2302      	movs	r3, #2
 8000886:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000888:	2302      	movs	r3, #2
 800088a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fc79 	bl	8001188 <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800089c:	f000 f820 	bl	80008e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a0:	230f      	movs	r3, #15
 80008a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a4:	2302      	movs	r3, #2
 80008a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	2105      	movs	r1, #5
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 ff10 	bl	80016e4 <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80008ca:	f000 f809 	bl	80008e0 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3750      	adds	r7, #80	; 0x50
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_MspInit+0x44>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <HAL_MspInit+0x44>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_MspInit+0x44>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x44>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x44>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6453      	str	r3, [r2, #68]	; 0x44
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x44>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000922:	2005      	movs	r0, #5
 8000924:	f000 fa18 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f000 f8fa 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <TIM3_IRQHandler+0x10>)
 800098e:	f001 f8d6 	bl	8001b3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000060 	.word	0x20000060

0800099c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <SystemInit+0x20>)
 80009a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <SystemInit+0x20>)
 80009a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MX_TIM3_Init+0x98>)
 80009e0:	4a1e      	ldr	r2, [pc, #120]	; (8000a5c <MX_TIM3_Init+0x9c>)
 80009e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8999;
 80009e4:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <MX_TIM3_Init+0x98>)
 80009e6:	f242 3227 	movw	r2, #8999	; 0x2327
 80009ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_TIM3_Init+0x98>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 80009f2:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_TIM3_Init+0x98>)
 80009f4:	f241 3287 	movw	r2, #4999	; 0x1387
 80009f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_TIM3_Init+0x98>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_TIM3_Init+0x98>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a06:	4814      	ldr	r0, [pc, #80]	; (8000a58 <MX_TIM3_Init+0x98>)
 8000a08:	f001 f842 	bl	8001a90 <HAL_TIM_Base_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000a12:	f7ff ff65 	bl	80008e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	4619      	mov	r1, r3
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_TIM3_Init+0x98>)
 8000a24:	f001 f9aa 	bl	8001d7c <HAL_TIM_ConfigClockSource>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000a2e:	f7ff ff57 	bl	80008e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4806      	ldr	r0, [pc, #24]	; (8000a58 <MX_TIM3_Init+0x98>)
 8000a40:	f001 fbce 	bl	80021e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000a4a:	f7ff ff49 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000060 	.word	0x20000060
 8000a5c:	40000400 	.word	0x40000400

08000a60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <HAL_TIM_Base_MspInit+0x44>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d113      	bne.n	8000a9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_TIM_Base_MspInit+0x48>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <HAL_TIM_Base_MspInit+0x48>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_TIM_Base_MspInit+0x48>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 3);
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	201d      	movs	r0, #29
 8000a90:	f000 f96d 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a94:	201d      	movs	r0, #29
 8000a96:	f000 f986 	bl	8000da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40000400 	.word	0x40000400
 8000aa8:	40023800 	.word	0x40023800

08000aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ab2:	490e      	ldr	r1, [pc, #56]	; (8000aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac8:	4c0b      	ldr	r4, [pc, #44]	; (8000af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ad6:	f7ff ff61 	bl	800099c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f001 fd1f 	bl	800251c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ade:	f7ff fe89 	bl	80007f4 <main>
  bx  lr    
 8000ae2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ae4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000af0:	080025ac 	.word	0x080025ac
  ldr r2, =_sbss
 8000af4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af8:	200000b0 	.word	0x200000b0

08000afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_IRQHandler>

08000afe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b02:	2003      	movs	r0, #3
 8000b04:	f000 f928 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f000 f805 	bl	8000b18 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b0e:	f7ff feed 	bl	80008ec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_InitTick+0x54>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_InitTick+0x58>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f943 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00e      	b.n	8000b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0f      	cmp	r3, #15
 8000b4a:	d80a      	bhi.n	8000b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f000 f90b 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b58:	4a06      	ldr	r2, [pc, #24]	; (8000b74 <HAL_InitTick+0x5c>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e000      	b.n	8000b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000004 	.word	0x20000004

08000b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x20>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x24>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_IncTick+0x24>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	200000ac 	.word	0x200000ac

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	200000ac 	.word	0x200000ac

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00
 8000bfc:	05fa0000 	.word	0x05fa0000

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4907      	ldr	r1, [pc, #28]	; (8000c54 <__NVIC_EnableIRQ+0x38>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff29 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff3e 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff8e 	bl	8000cac <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff31 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffa2 	bl	8000d14 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
 8000dfa:	e175      	b.n	80010e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	f040 8164 	bne.w	80010e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d00b      	beq.n	8000e3a <HAL_GPIO_Init+0x5e>
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d007      	beq.n	8000e3a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e2e:	2b11      	cmp	r3, #17
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b12      	cmp	r3, #18
 8000e38:	d130      	bne.n	8000e9c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	68da      	ldr	r2, [r3, #12]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e70:	2201      	movs	r2, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	091b      	lsrs	r3, r3, #4
 8000e86:	f003 0201 	and.w	r2, r3, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x100>
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b12      	cmp	r3, #18
 8000eda:	d123      	bne.n	8000f24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	691a      	ldr	r2, [r3, #16]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	69b9      	ldr	r1, [r7, #24]
 8000f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0203 	and.w	r2, r3, #3
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80be 	beq.w	80010e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	4b66      	ldr	r3, [pc, #408]	; (8001100 <HAL_GPIO_Init+0x324>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a65      	ldr	r2, [pc, #404]	; (8001100 <HAL_GPIO_Init+0x324>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b63      	ldr	r3, [pc, #396]	; (8001100 <HAL_GPIO_Init+0x324>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f7e:	4a61      	ldr	r2, [pc, #388]	; (8001104 <HAL_GPIO_Init+0x328>)
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a58      	ldr	r2, [pc, #352]	; (8001108 <HAL_GPIO_Init+0x32c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d037      	beq.n	800101a <HAL_GPIO_Init+0x23e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a57      	ldr	r2, [pc, #348]	; (800110c <HAL_GPIO_Init+0x330>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d031      	beq.n	8001016 <HAL_GPIO_Init+0x23a>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a56      	ldr	r2, [pc, #344]	; (8001110 <HAL_GPIO_Init+0x334>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d02b      	beq.n	8001012 <HAL_GPIO_Init+0x236>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a55      	ldr	r2, [pc, #340]	; (8001114 <HAL_GPIO_Init+0x338>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d025      	beq.n	800100e <HAL_GPIO_Init+0x232>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a54      	ldr	r2, [pc, #336]	; (8001118 <HAL_GPIO_Init+0x33c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d01f      	beq.n	800100a <HAL_GPIO_Init+0x22e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a53      	ldr	r2, [pc, #332]	; (800111c <HAL_GPIO_Init+0x340>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d019      	beq.n	8001006 <HAL_GPIO_Init+0x22a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a52      	ldr	r2, [pc, #328]	; (8001120 <HAL_GPIO_Init+0x344>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d013      	beq.n	8001002 <HAL_GPIO_Init+0x226>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a51      	ldr	r2, [pc, #324]	; (8001124 <HAL_GPIO_Init+0x348>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d00d      	beq.n	8000ffe <HAL_GPIO_Init+0x222>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a50      	ldr	r2, [pc, #320]	; (8001128 <HAL_GPIO_Init+0x34c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d007      	beq.n	8000ffa <HAL_GPIO_Init+0x21e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4f      	ldr	r2, [pc, #316]	; (800112c <HAL_GPIO_Init+0x350>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_GPIO_Init+0x21a>
 8000ff2:	2309      	movs	r3, #9
 8000ff4:	e012      	b.n	800101c <HAL_GPIO_Init+0x240>
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	e010      	b.n	800101c <HAL_GPIO_Init+0x240>
 8000ffa:	2308      	movs	r3, #8
 8000ffc:	e00e      	b.n	800101c <HAL_GPIO_Init+0x240>
 8000ffe:	2307      	movs	r3, #7
 8001000:	e00c      	b.n	800101c <HAL_GPIO_Init+0x240>
 8001002:	2306      	movs	r3, #6
 8001004:	e00a      	b.n	800101c <HAL_GPIO_Init+0x240>
 8001006:	2305      	movs	r3, #5
 8001008:	e008      	b.n	800101c <HAL_GPIO_Init+0x240>
 800100a:	2304      	movs	r3, #4
 800100c:	e006      	b.n	800101c <HAL_GPIO_Init+0x240>
 800100e:	2303      	movs	r3, #3
 8001010:	e004      	b.n	800101c <HAL_GPIO_Init+0x240>
 8001012:	2302      	movs	r3, #2
 8001014:	e002      	b.n	800101c <HAL_GPIO_Init+0x240>
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <HAL_GPIO_Init+0x240>
 800101a:	2300      	movs	r3, #0
 800101c:	69fa      	ldr	r2, [r7, #28]
 800101e:	f002 0203 	and.w	r2, r2, #3
 8001022:	0092      	lsls	r2, r2, #2
 8001024:	4093      	lsls	r3, r2
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800102c:	4935      	ldr	r1, [pc, #212]	; (8001104 <HAL_GPIO_Init+0x328>)
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	089b      	lsrs	r3, r3, #2
 8001032:	3302      	adds	r3, #2
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800103a:	4b3d      	ldr	r3, [pc, #244]	; (8001130 <HAL_GPIO_Init+0x354>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800105e:	4a34      	ldr	r2, [pc, #208]	; (8001130 <HAL_GPIO_Init+0x354>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001064:	4b32      	ldr	r3, [pc, #200]	; (8001130 <HAL_GPIO_Init+0x354>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001088:	4a29      	ldr	r2, [pc, #164]	; (8001130 <HAL_GPIO_Init+0x354>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <HAL_GPIO_Init+0x354>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010b2:	4a1f      	ldr	r2, [pc, #124]	; (8001130 <HAL_GPIO_Init+0x354>)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_GPIO_Init+0x354>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010dc:	4a14      	ldr	r2, [pc, #80]	; (8001130 <HAL_GPIO_Init+0x354>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3301      	adds	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	f67f ae86 	bls.w	8000dfc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40013800 	.word	0x40013800
 8001108:	40020000 	.word	0x40020000
 800110c:	40020400 	.word	0x40020400
 8001110:	40020800 	.word	0x40020800
 8001114:	40020c00 	.word	0x40020c00
 8001118:	40021000 	.word	0x40021000
 800111c:	40021400 	.word	0x40021400
 8001120:	40021800 	.word	0x40021800
 8001124:	40021c00 	.word	0x40021c00
 8001128:	40022000 	.word	0x40022000
 800112c:	40022400 	.word	0x40022400
 8001130:	40013c00 	.word	0x40013c00

08001134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
 8001140:	4613      	mov	r3, r2
 8001142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001144:	787b      	ldrb	r3, [r7, #1]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800114a:	887a      	ldrh	r2, [r7, #2]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001150:	e003      	b.n	800115a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	041a      	lsls	r2, r3, #16
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	619a      	str	r2, [r3, #24]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40007000 	.word	0x40007000

08001188 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e29b      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 8087 	beq.w	80012ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011ac:	4b96      	ldr	r3, [pc, #600]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 030c 	and.w	r3, r3, #12
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d00c      	beq.n	80011d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b8:	4b93      	ldr	r3, [pc, #588]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 030c 	and.w	r3, r3, #12
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d112      	bne.n	80011ea <HAL_RCC_OscConfig+0x62>
 80011c4:	4b90      	ldr	r3, [pc, #576]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011d0:	d10b      	bne.n	80011ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d2:	4b8d      	ldr	r3, [pc, #564]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d06c      	beq.n	80012b8 <HAL_RCC_OscConfig+0x130>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d168      	bne.n	80012b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e275      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f2:	d106      	bne.n	8001202 <HAL_RCC_OscConfig+0x7a>
 80011f4:	4b84      	ldr	r3, [pc, #528]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a83      	ldr	r2, [pc, #524]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80011fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	e02e      	b.n	8001260 <HAL_RCC_OscConfig+0xd8>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10c      	bne.n	8001224 <HAL_RCC_OscConfig+0x9c>
 800120a:	4b7f      	ldr	r3, [pc, #508]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a7e      	ldr	r2, [pc, #504]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b7c      	ldr	r3, [pc, #496]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a7b      	ldr	r2, [pc, #492]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 800121c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e01d      	b.n	8001260 <HAL_RCC_OscConfig+0xd8>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0xc0>
 800122e:	4b76      	ldr	r3, [pc, #472]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a75      	ldr	r2, [pc, #468]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b73      	ldr	r3, [pc, #460]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a72      	ldr	r2, [pc, #456]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e00b      	b.n	8001260 <HAL_RCC_OscConfig+0xd8>
 8001248:	4b6f      	ldr	r3, [pc, #444]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a6e      	ldr	r2, [pc, #440]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 800124e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b6c      	ldr	r3, [pc, #432]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a6b      	ldr	r2, [pc, #428]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 800125a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d013      	beq.n	8001290 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001268:	f7ff fc9a 	bl	8000ba0 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fc96 	bl	8000ba0 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e229      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001282:	4b61      	ldr	r3, [pc, #388]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0xe8>
 800128e:	e014      	b.n	80012ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001290:	f7ff fc86 	bl	8000ba0 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fc82 	bl	8000ba0 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	; 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e215      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012aa:	4b57      	ldr	r3, [pc, #348]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0x110>
 80012b6:	e000      	b.n	80012ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d069      	beq.n	800139a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012c6:	4b50      	ldr	r3, [pc, #320]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00b      	beq.n	80012ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012d2:	4b4d      	ldr	r3, [pc, #308]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d11c      	bne.n	8001318 <HAL_RCC_OscConfig+0x190>
 80012de:	4b4a      	ldr	r3, [pc, #296]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d116      	bne.n	8001318 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	4b47      	ldr	r3, [pc, #284]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <HAL_RCC_OscConfig+0x17a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d001      	beq.n	8001302 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e1e9      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001302:	4b41      	ldr	r3, [pc, #260]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	493d      	ldr	r1, [pc, #244]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001316:	e040      	b.n	800139a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d023      	beq.n	8001368 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001320:	4b39      	ldr	r3, [pc, #228]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a38      	ldr	r2, [pc, #224]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132c:	f7ff fc38 	bl	8000ba0 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001334:	f7ff fc34 	bl	8000ba0 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1c7      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001346:	4b30      	ldr	r3, [pc, #192]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4929      	ldr	r1, [pc, #164]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
 8001366:	e018      	b.n	800139a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a26      	ldr	r2, [pc, #152]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001374:	f7ff fc14 	bl	8000ba0 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800137c:	f7ff fc10 	bl	8000ba0 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e1a3      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d038      	beq.n	8001418 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d019      	beq.n	80013e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80013b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013b2:	4a15      	ldr	r2, [pc, #84]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ba:	f7ff fbf1 	bl	8000ba0 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c2:	f7ff fbed 	bl	8000ba0 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e180      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80013d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x23a>
 80013e0:	e01a      	b.n	8001418 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80013e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e6:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_RCC_OscConfig+0x280>)
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ee:	f7ff fbd7 	bl	8000ba0 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f6:	f7ff fbd3 	bl	8000ba0 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d903      	bls.n	800140c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e166      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
 8001408:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140c:	4b92      	ldr	r3, [pc, #584]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 800140e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ee      	bne.n	80013f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80a4 	beq.w	800156e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001426:	4b8c      	ldr	r3, [pc, #560]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10d      	bne.n	800144e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	4b89      	ldr	r3, [pc, #548]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a88      	ldr	r2, [pc, #544]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b86      	ldr	r3, [pc, #536]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800144a:	2301      	movs	r3, #1
 800144c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800144e:	4b83      	ldr	r3, [pc, #524]	; (800165c <HAL_RCC_OscConfig+0x4d4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001456:	2b00      	cmp	r3, #0
 8001458:	d118      	bne.n	800148c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800145a:	4b80      	ldr	r3, [pc, #512]	; (800165c <HAL_RCC_OscConfig+0x4d4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a7f      	ldr	r2, [pc, #508]	; (800165c <HAL_RCC_OscConfig+0x4d4>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001466:	f7ff fb9b 	bl	8000ba0 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146e:	f7ff fb97 	bl	8000ba0 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b64      	cmp	r3, #100	; 0x64
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e12a      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001480:	4b76      	ldr	r3, [pc, #472]	; (800165c <HAL_RCC_OscConfig+0x4d4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d106      	bne.n	80014a2 <HAL_RCC_OscConfig+0x31a>
 8001494:	4b70      	ldr	r3, [pc, #448]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001498:	4a6f      	ldr	r2, [pc, #444]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6713      	str	r3, [r2, #112]	; 0x70
 80014a0:	e02d      	b.n	80014fe <HAL_RCC_OscConfig+0x376>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x33c>
 80014aa:	4b6b      	ldr	r3, [pc, #428]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ae:	4a6a      	ldr	r2, [pc, #424]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	6713      	str	r3, [r2, #112]	; 0x70
 80014b6:	4b68      	ldr	r3, [pc, #416]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	4a67      	ldr	r2, [pc, #412]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014bc:	f023 0304 	bic.w	r3, r3, #4
 80014c0:	6713      	str	r3, [r2, #112]	; 0x70
 80014c2:	e01c      	b.n	80014fe <HAL_RCC_OscConfig+0x376>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	d10c      	bne.n	80014e6 <HAL_RCC_OscConfig+0x35e>
 80014cc:	4b62      	ldr	r3, [pc, #392]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d0:	4a61      	ldr	r2, [pc, #388]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	6713      	str	r3, [r2, #112]	; 0x70
 80014d8:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014dc:	4a5e      	ldr	r2, [pc, #376]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6713      	str	r3, [r2, #112]	; 0x70
 80014e4:	e00b      	b.n	80014fe <HAL_RCC_OscConfig+0x376>
 80014e6:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ea:	4a5b      	ldr	r2, [pc, #364]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	6713      	str	r3, [r2, #112]	; 0x70
 80014f2:	4b59      	ldr	r3, [pc, #356]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a58      	ldr	r2, [pc, #352]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80014f8:	f023 0304 	bic.w	r3, r3, #4
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d015      	beq.n	8001532 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001506:	f7ff fb4b 	bl	8000ba0 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150c:	e00a      	b.n	8001524 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150e:	f7ff fb47 	bl	8000ba0 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	f241 3288 	movw	r2, #5000	; 0x1388
 800151c:	4293      	cmp	r3, r2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e0d8      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001524:	4b4c      	ldr	r3, [pc, #304]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0ee      	beq.n	800150e <HAL_RCC_OscConfig+0x386>
 8001530:	e014      	b.n	800155c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001532:	f7ff fb35 	bl	8000ba0 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7ff fb31 	bl	8000ba0 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	; 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e0c2      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001550:	4b41      	ldr	r3, [pc, #260]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1ee      	bne.n	800153a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800155c:	7dfb      	ldrb	r3, [r7, #23]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d105      	bne.n	800156e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001562:	4b3d      	ldr	r3, [pc, #244]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a3c      	ldr	r2, [pc, #240]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 80ae 	beq.w	80016d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001578:	4b37      	ldr	r3, [pc, #220]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 030c 	and.w	r3, r3, #12
 8001580:	2b08      	cmp	r3, #8
 8001582:	d06d      	beq.n	8001660 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d14b      	bne.n	8001624 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158c:	4b32      	ldr	r3, [pc, #200]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a31      	ldr	r2, [pc, #196]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fb02 	bl	8000ba0 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff fafe 	bl	8000ba0 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e091      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69da      	ldr	r2, [r3, #28]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	019b      	lsls	r3, r3, #6
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	3b01      	subs	r3, #1
 80015d8:	041b      	lsls	r3, r3, #16
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	061b      	lsls	r3, r3, #24
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	071b      	lsls	r3, r3, #28
 80015ea:	491b      	ldr	r1, [pc, #108]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a18      	ldr	r2, [pc, #96]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 80015f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff fad0 	bl	8000ba0 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff facc 	bl	8000ba0 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e05f      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x47c>
 8001622:	e057      	b.n	80016d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 800162a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800162e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fab6 	bl	8000ba0 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001638:	f7ff fab2 	bl	8000ba0 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e045      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164a:	4b03      	ldr	r3, [pc, #12]	; (8001658 <HAL_RCC_OscConfig+0x4d0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x4b0>
 8001656:	e03d      	b.n	80016d4 <HAL_RCC_OscConfig+0x54c>
 8001658:	40023800 	.word	0x40023800
 800165c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001660:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <HAL_RCC_OscConfig+0x558>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d030      	beq.n	80016d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d129      	bne.n	80016d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d122      	bne.n	80016d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001690:	4013      	ands	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001696:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001698:	4293      	cmp	r3, r2
 800169a:	d119      	bne.n	80016d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	085b      	lsrs	r3, r3, #1
 80016a8:	3b01      	subs	r3, #1
 80016aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d10f      	bne.n	80016d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d107      	bne.n	80016d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800

080016e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0d0      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016fc:	4b6a      	ldr	r3, [pc, #424]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d910      	bls.n	800172c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b67      	ldr	r3, [pc, #412]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 020f 	bic.w	r2, r3, #15
 8001712:	4965      	ldr	r1, [pc, #404]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0b8      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d020      	beq.n	800177a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4a58      	ldr	r2, [pc, #352]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 800174a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800174e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4a52      	ldr	r2, [pc, #328]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001766:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001768:	4b50      	ldr	r3, [pc, #320]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	494d      	ldr	r1, [pc, #308]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d040      	beq.n	8001808 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d115      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e07f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a6:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d109      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e073      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b6:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e06b      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c6:	4b39      	ldr	r3, [pc, #228]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f023 0203 	bic.w	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4936      	ldr	r1, [pc, #216]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017d8:	f7ff f9e2 	bl	8000ba0 <HAL_GetTick>
 80017dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e0:	f7ff f9de 	bl	8000ba0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e053      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f6:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 020c 	and.w	r2, r3, #12
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	429a      	cmp	r2, r3
 8001806:	d1eb      	bne.n	80017e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d210      	bcs.n	8001838 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 020f 	bic.w	r2, r3, #15
 800181e:	4922      	ldr	r1, [pc, #136]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e032      	b.n	800189e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4916      	ldr	r1, [pc, #88]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	490e      	ldr	r1, [pc, #56]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001876:	f000 f821 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 800187a:	4602      	mov	r2, r0
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	490a      	ldr	r1, [pc, #40]	; (80018b0 <HAL_RCC_ClockConfig+0x1cc>)
 8001888:	5ccb      	ldrb	r3, [r1, r3]
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1d4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f93e 	bl	8000b18 <HAL_InitTick>

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00
 80018ac:	40023800 	.word	0x40023800
 80018b0:	0800258c 	.word	0x0800258c
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000004 	.word	0x20000004

080018bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018bc:	b5b0      	push	{r4, r5, r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80018c2:	2100      	movs	r1, #0
 80018c4:	6079      	str	r1, [r7, #4]
 80018c6:	2100      	movs	r1, #0
 80018c8:	60f9      	str	r1, [r7, #12]
 80018ca:	2100      	movs	r1, #0
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80018ce:	2100      	movs	r1, #0
 80018d0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d2:	4952      	ldr	r1, [pc, #328]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 80018d4:	6889      	ldr	r1, [r1, #8]
 80018d6:	f001 010c 	and.w	r1, r1, #12
 80018da:	2908      	cmp	r1, #8
 80018dc:	d00d      	beq.n	80018fa <HAL_RCC_GetSysClockFreq+0x3e>
 80018de:	2908      	cmp	r1, #8
 80018e0:	f200 8094 	bhi.w	8001a0c <HAL_RCC_GetSysClockFreq+0x150>
 80018e4:	2900      	cmp	r1, #0
 80018e6:	d002      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0x32>
 80018e8:	2904      	cmp	r1, #4
 80018ea:	d003      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x38>
 80018ec:	e08e      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018ee:	4b4c      	ldr	r3, [pc, #304]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x164>)
 80018f0:	60bb      	str	r3, [r7, #8]
      break;
 80018f2:	e08e      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018f4:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x168>)
 80018f6:	60bb      	str	r3, [r7, #8]
      break;
 80018f8:	e08b      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018fa:	4948      	ldr	r1, [pc, #288]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 80018fc:	6849      	ldr	r1, [r1, #4]
 80018fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001902:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001904:	4945      	ldr	r1, [pc, #276]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 8001906:	6849      	ldr	r1, [r1, #4]
 8001908:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800190c:	2900      	cmp	r1, #0
 800190e:	d024      	beq.n	800195a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001910:	4942      	ldr	r1, [pc, #264]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 8001912:	6849      	ldr	r1, [r1, #4]
 8001914:	0989      	lsrs	r1, r1, #6
 8001916:	4608      	mov	r0, r1
 8001918:	f04f 0100 	mov.w	r1, #0
 800191c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001920:	f04f 0500 	mov.w	r5, #0
 8001924:	ea00 0204 	and.w	r2, r0, r4
 8001928:	ea01 0305 	and.w	r3, r1, r5
 800192c:	493d      	ldr	r1, [pc, #244]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x168>)
 800192e:	fb01 f003 	mul.w	r0, r1, r3
 8001932:	2100      	movs	r1, #0
 8001934:	fb01 f102 	mul.w	r1, r1, r2
 8001938:	1844      	adds	r4, r0, r1
 800193a:	493a      	ldr	r1, [pc, #232]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x168>)
 800193c:	fba2 0101 	umull	r0, r1, r2, r1
 8001940:	1863      	adds	r3, r4, r1
 8001942:	4619      	mov	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	461a      	mov	r2, r3
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	f7fe fc74 	bl	8000238 <__aeabi_uldivmod>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4613      	mov	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e04a      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195a:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	099b      	lsrs	r3, r3, #6
 8001960:	461a      	mov	r2, r3
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	f240 10ff 	movw	r0, #511	; 0x1ff
 800196a:	f04f 0100 	mov.w	r1, #0
 800196e:	ea02 0400 	and.w	r4, r2, r0
 8001972:	ea03 0501 	and.w	r5, r3, r1
 8001976:	4620      	mov	r0, r4
 8001978:	4629      	mov	r1, r5
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	014b      	lsls	r3, r1, #5
 8001984:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001988:	0142      	lsls	r2, r0, #5
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	1b00      	subs	r0, r0, r4
 8001990:	eb61 0105 	sbc.w	r1, r1, r5
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	018b      	lsls	r3, r1, #6
 800199e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019a2:	0182      	lsls	r2, r0, #6
 80019a4:	1a12      	subs	r2, r2, r0
 80019a6:	eb63 0301 	sbc.w	r3, r3, r1
 80019aa:	f04f 0000 	mov.w	r0, #0
 80019ae:	f04f 0100 	mov.w	r1, #0
 80019b2:	00d9      	lsls	r1, r3, #3
 80019b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019b8:	00d0      	lsls	r0, r2, #3
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	1912      	adds	r2, r2, r4
 80019c0:	eb45 0303 	adc.w	r3, r5, r3
 80019c4:	f04f 0000 	mov.w	r0, #0
 80019c8:	f04f 0100 	mov.w	r1, #0
 80019cc:	0299      	lsls	r1, r3, #10
 80019ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019d2:	0290      	lsls	r0, r2, #10
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	461a      	mov	r2, r3
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	f7fe fc28 	bl	8000238 <__aeabi_uldivmod>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4613      	mov	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	0c1b      	lsrs	r3, r3, #16
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	3301      	adds	r3, #1
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a08:	60bb      	str	r3, [r7, #8]
      break;
 8001a0a:	e002      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x164>)
 8001a0e:	60bb      	str	r3, [r7, #8]
      break;
 8001a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a12:	68bb      	ldr	r3, [r7, #8]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	00f42400 	.word	0x00f42400
 8001a24:	017d7840 	.word	0x017d7840

08001a28 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e025      	b.n	8001a88 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d106      	bne.n	8001a56 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7fe fe3f 	bl	80006d4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3304      	adds	r3, #4
 8001a66:	4619      	mov	r1, r3
 8001a68:	4610      	mov	r0, r2
 8001a6a:	f000 fc65 	bl	8002338 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	461a      	mov	r2, r3
 8001a78:	6839      	ldr	r1, [r7, #0]
 8001a7a:	f000 fccf 	bl	800241c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e049      	b.n	8001b36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7fe ffd2 	bl	8000a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3304      	adds	r3, #4
 8001acc:	4619      	mov	r1, r3
 8001ace:	4610      	mov	r0, r2
 8001ad0:	f000 fa4c 	bl	8001f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d122      	bne.n	8001b9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d11b      	bne.n	8001b9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f06f 0202 	mvn.w	r2, #2
 8001b6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f9d5 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
 8001b86:	e005      	b.n	8001b94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f9c7 	bl	8001f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f9d8 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d122      	bne.n	8001bee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d11b      	bne.n	8001bee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f06f 0204 	mvn.w	r2, #4
 8001bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f9ab 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
 8001bda:	e005      	b.n	8001be8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f99d 	bl	8001f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f9ae 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d122      	bne.n	8001c42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d11b      	bne.n	8001c42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f06f 0208 	mvn.w	r2, #8
 8001c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2204      	movs	r2, #4
 8001c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f981 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
 8001c2e:	e005      	b.n	8001c3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f973 	bl	8001f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f984 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	2b10      	cmp	r3, #16
 8001c4e:	d122      	bne.n	8001c96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d11b      	bne.n	8001c96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f06f 0210 	mvn.w	r2, #16
 8001c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f957 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
 8001c82:	e005      	b.n	8001c90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f949 	bl	8001f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f95a 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d10e      	bne.n	8001cc2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d107      	bne.n	8001cc2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f06f 0201 	mvn.w	r2, #1
 8001cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f923 	bl	8001f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ccc:	2b80      	cmp	r3, #128	; 0x80
 8001cce:	d10e      	bne.n	8001cee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cda:	2b80      	cmp	r3, #128	; 0x80
 8001cdc:	d107      	bne.n	8001cee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fb11 	bl	8002310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cfc:	d10e      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d08:	2b80      	cmp	r3, #128	; 0x80
 8001d0a:	d107      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fb04 	bl	8002324 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d26:	2b40      	cmp	r3, #64	; 0x40
 8001d28:	d10e      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d34:	2b40      	cmp	r3, #64	; 0x40
 8001d36:	d107      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f908 	bl	8001f58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	d10e      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0320 	and.w	r3, r3, #32
 8001d60:	2b20      	cmp	r3, #32
 8001d62:	d107      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0220 	mvn.w	r2, #32
 8001d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fac4 	bl	80022fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_TIM_ConfigClockSource+0x18>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e0b3      	b.n	8001efc <HAL_TIM_ConfigClockSource+0x180>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	4b55      	ldr	r3, [pc, #340]	; (8001f04 <HAL_TIM_ConfigClockSource+0x188>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dcc:	d03e      	beq.n	8001e4c <HAL_TIM_ConfigClockSource+0xd0>
 8001dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dd2:	f200 8087 	bhi.w	8001ee4 <HAL_TIM_ConfigClockSource+0x168>
 8001dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dda:	f000 8085 	beq.w	8001ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8001dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001de2:	d87f      	bhi.n	8001ee4 <HAL_TIM_ConfigClockSource+0x168>
 8001de4:	2b70      	cmp	r3, #112	; 0x70
 8001de6:	d01a      	beq.n	8001e1e <HAL_TIM_ConfigClockSource+0xa2>
 8001de8:	2b70      	cmp	r3, #112	; 0x70
 8001dea:	d87b      	bhi.n	8001ee4 <HAL_TIM_ConfigClockSource+0x168>
 8001dec:	2b60      	cmp	r3, #96	; 0x60
 8001dee:	d050      	beq.n	8001e92 <HAL_TIM_ConfigClockSource+0x116>
 8001df0:	2b60      	cmp	r3, #96	; 0x60
 8001df2:	d877      	bhi.n	8001ee4 <HAL_TIM_ConfigClockSource+0x168>
 8001df4:	2b50      	cmp	r3, #80	; 0x50
 8001df6:	d03c      	beq.n	8001e72 <HAL_TIM_ConfigClockSource+0xf6>
 8001df8:	2b50      	cmp	r3, #80	; 0x50
 8001dfa:	d873      	bhi.n	8001ee4 <HAL_TIM_ConfigClockSource+0x168>
 8001dfc:	2b40      	cmp	r3, #64	; 0x40
 8001dfe:	d058      	beq.n	8001eb2 <HAL_TIM_ConfigClockSource+0x136>
 8001e00:	2b40      	cmp	r3, #64	; 0x40
 8001e02:	d86f      	bhi.n	8001ee4 <HAL_TIM_ConfigClockSource+0x168>
 8001e04:	2b30      	cmp	r3, #48	; 0x30
 8001e06:	d064      	beq.n	8001ed2 <HAL_TIM_ConfigClockSource+0x156>
 8001e08:	2b30      	cmp	r3, #48	; 0x30
 8001e0a:	d86b      	bhi.n	8001ee4 <HAL_TIM_ConfigClockSource+0x168>
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d060      	beq.n	8001ed2 <HAL_TIM_ConfigClockSource+0x156>
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	d867      	bhi.n	8001ee4 <HAL_TIM_ConfigClockSource+0x168>
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d05c      	beq.n	8001ed2 <HAL_TIM_ConfigClockSource+0x156>
 8001e18:	2b10      	cmp	r3, #16
 8001e1a:	d05a      	beq.n	8001ed2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001e1c:	e062      	b.n	8001ee4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	6899      	ldr	r1, [r3, #8]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	f000 f9b7 	bl	80021a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	609a      	str	r2, [r3, #8]
      break;
 8001e4a:	e04e      	b.n	8001eea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6899      	ldr	r1, [r3, #8]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f000 f9a0 	bl	80021a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e6e:	609a      	str	r2, [r3, #8]
      break;
 8001e70:	e03b      	b.n	8001eea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	6859      	ldr	r1, [r3, #4]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f000 f914 	bl	80020ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2150      	movs	r1, #80	; 0x50
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f96d 	bl	800216a <TIM_ITRx_SetConfig>
      break;
 8001e90:	e02b      	b.n	8001eea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6859      	ldr	r1, [r3, #4]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f000 f933 	bl	800210a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2160      	movs	r1, #96	; 0x60
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f95d 	bl	800216a <TIM_ITRx_SetConfig>
      break;
 8001eb0:	e01b      	b.n	8001eea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	6859      	ldr	r1, [r3, #4]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f000 f8f4 	bl	80020ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2140      	movs	r1, #64	; 0x40
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f94d 	bl	800216a <TIM_ITRx_SetConfig>
      break;
 8001ed0:	e00b      	b.n	8001eea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4619      	mov	r1, r3
 8001edc:	4610      	mov	r0, r2
 8001ede:	f000 f944 	bl	800216a <TIM_ITRx_SetConfig>
        break;
 8001ee2:	e002      	b.n	8001eea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001ee4:	bf00      	nop
 8001ee6:	e000      	b.n	8001eea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001ee8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	fffeff88 	.word	0xfffeff88

08001f08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a40      	ldr	r2, [pc, #256]	; (8002080 <TIM_Base_SetConfig+0x114>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d013      	beq.n	8001fac <TIM_Base_SetConfig+0x40>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f8a:	d00f      	beq.n	8001fac <TIM_Base_SetConfig+0x40>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a3d      	ldr	r2, [pc, #244]	; (8002084 <TIM_Base_SetConfig+0x118>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00b      	beq.n	8001fac <TIM_Base_SetConfig+0x40>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a3c      	ldr	r2, [pc, #240]	; (8002088 <TIM_Base_SetConfig+0x11c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d007      	beq.n	8001fac <TIM_Base_SetConfig+0x40>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a3b      	ldr	r2, [pc, #236]	; (800208c <TIM_Base_SetConfig+0x120>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d003      	beq.n	8001fac <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3a      	ldr	r2, [pc, #232]	; (8002090 <TIM_Base_SetConfig+0x124>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d108      	bne.n	8001fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a2f      	ldr	r2, [pc, #188]	; (8002080 <TIM_Base_SetConfig+0x114>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d02b      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fcc:	d027      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a2c      	ldr	r2, [pc, #176]	; (8002084 <TIM_Base_SetConfig+0x118>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d023      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a2b      	ldr	r2, [pc, #172]	; (8002088 <TIM_Base_SetConfig+0x11c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d01f      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a2a      	ldr	r2, [pc, #168]	; (800208c <TIM_Base_SetConfig+0x120>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d01b      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a29      	ldr	r2, [pc, #164]	; (8002090 <TIM_Base_SetConfig+0x124>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d017      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a28      	ldr	r2, [pc, #160]	; (8002094 <TIM_Base_SetConfig+0x128>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d013      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a27      	ldr	r2, [pc, #156]	; (8002098 <TIM_Base_SetConfig+0x12c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00f      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a26      	ldr	r2, [pc, #152]	; (800209c <TIM_Base_SetConfig+0x130>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00b      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a25      	ldr	r2, [pc, #148]	; (80020a0 <TIM_Base_SetConfig+0x134>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d007      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a24      	ldr	r2, [pc, #144]	; (80020a4 <TIM_Base_SetConfig+0x138>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d003      	beq.n	800201e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a23      	ldr	r2, [pc, #140]	; (80020a8 <TIM_Base_SetConfig+0x13c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d108      	bne.n	8002030 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <TIM_Base_SetConfig+0x114>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d003      	beq.n	8002064 <TIM_Base_SetConfig+0xf8>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <TIM_Base_SetConfig+0x124>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d103      	bne.n	800206c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	615a      	str	r2, [r3, #20]
}
 8002072:	bf00      	nop
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40010000 	.word	0x40010000
 8002084:	40000400 	.word	0x40000400
 8002088:	40000800 	.word	0x40000800
 800208c:	40000c00 	.word	0x40000c00
 8002090:	40010400 	.word	0x40010400
 8002094:	40014000 	.word	0x40014000
 8002098:	40014400 	.word	0x40014400
 800209c:	40014800 	.word	0x40014800
 80020a0:	40001800 	.word	0x40001800
 80020a4:	40001c00 	.word	0x40001c00
 80020a8:	40002000 	.word	0x40002000

080020ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	f023 0201 	bic.w	r2, r3, #1
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f023 030a 	bic.w	r3, r3, #10
 80020e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	621a      	str	r2, [r3, #32]
}
 80020fe:	bf00      	nop
 8002100:	371c      	adds	r7, #28
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800210a:	b480      	push	{r7}
 800210c:	b087      	sub	sp, #28
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	f023 0210 	bic.w	r2, r3, #16
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002134:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	031b      	lsls	r3, r3, #12
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002146:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	621a      	str	r2, [r3, #32]
}
 800215e:	bf00      	nop
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800216a:	b480      	push	{r7}
 800216c:	b085      	sub	sp, #20
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002180:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	f043 0307 	orr.w	r3, r3, #7
 800218c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	609a      	str	r2, [r3, #8]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	021a      	lsls	r2, r3, #8
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	609a      	str	r2, [r3, #8]
}
 80021d4:	bf00      	nop
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e06d      	b.n	80022d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a30      	ldr	r2, [pc, #192]	; (80022e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d004      	beq.n	800222c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a2f      	ldr	r2, [pc, #188]	; (80022e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d108      	bne.n	800223e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002232:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002244:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4313      	orrs	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a20      	ldr	r2, [pc, #128]	; (80022e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d022      	beq.n	80022a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800226a:	d01d      	beq.n	80022a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1d      	ldr	r2, [pc, #116]	; (80022e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d018      	beq.n	80022a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1c      	ldr	r2, [pc, #112]	; (80022ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d013      	beq.n	80022a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1a      	ldr	r2, [pc, #104]	; (80022f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00e      	beq.n	80022a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d009      	beq.n	80022a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a16      	ldr	r2, [pc, #88]	; (80022f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d004      	beq.n	80022a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a15      	ldr	r2, [pc, #84]	; (80022f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d10c      	bne.n	80022c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	40010000 	.word	0x40010000
 80022e4:	40010400 	.word	0x40010400
 80022e8:	40000400 	.word	0x40000400
 80022ec:	40000800 	.word	0x40000800
 80022f0:	40000c00 	.word	0x40000c00
 80022f4:	40014000 	.word	0x40014000
 80022f8:	40001800 	.word	0x40001800

080022fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d027      	beq.n	80023a2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4b2f      	ldr	r3, [pc, #188]	; (8002418 <FMC_SDRAM_Init+0xe0>)
 800235c:	4013      	ands	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002368:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800236e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8002374:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800237a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8002380:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8002386:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800238c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8002392:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e032      	b.n	8002408 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023ae:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80023b8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80023be:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <FMC_SDRAM_Init+0xe0>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80023dc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80023e2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80023e8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80023ee:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80023f4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	ffff8000 	.word	0xffff8000

0800241c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d02e      	beq.n	8002494 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002442:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002452:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	3b01      	subs	r3, #1
 800245a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800245c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	3b01      	subs	r3, #1
 8002464:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8002466:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	3b01      	subs	r3, #1
 800246e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8002470:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	3b01      	subs	r3, #1
 8002478:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800247a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	3b01      	subs	r3, #1
 8002482:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002484:	4313      	orrs	r3, r2
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	e039      	b.n	8002508 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <FMC_SDRAM_Timing_Init+0xfc>)
 800249e:	4013      	ands	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80024b2:	4313      	orrs	r3, r2
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80024c6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80024d6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	3b01      	subs	r3, #1
 80024de:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80024e0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80024ea:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80024f4:	4313      	orrs	r3, r2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	ff0f0fff 	.word	0xff0f0fff

0800251c <__libc_init_array>:
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	4d0d      	ldr	r5, [pc, #52]	; (8002554 <__libc_init_array+0x38>)
 8002520:	4c0d      	ldr	r4, [pc, #52]	; (8002558 <__libc_init_array+0x3c>)
 8002522:	1b64      	subs	r4, r4, r5
 8002524:	10a4      	asrs	r4, r4, #2
 8002526:	2600      	movs	r6, #0
 8002528:	42a6      	cmp	r6, r4
 800252a:	d109      	bne.n	8002540 <__libc_init_array+0x24>
 800252c:	4d0b      	ldr	r5, [pc, #44]	; (800255c <__libc_init_array+0x40>)
 800252e:	4c0c      	ldr	r4, [pc, #48]	; (8002560 <__libc_init_array+0x44>)
 8002530:	f000 f820 	bl	8002574 <_init>
 8002534:	1b64      	subs	r4, r4, r5
 8002536:	10a4      	asrs	r4, r4, #2
 8002538:	2600      	movs	r6, #0
 800253a:	42a6      	cmp	r6, r4
 800253c:	d105      	bne.n	800254a <__libc_init_array+0x2e>
 800253e:	bd70      	pop	{r4, r5, r6, pc}
 8002540:	f855 3b04 	ldr.w	r3, [r5], #4
 8002544:	4798      	blx	r3
 8002546:	3601      	adds	r6, #1
 8002548:	e7ee      	b.n	8002528 <__libc_init_array+0xc>
 800254a:	f855 3b04 	ldr.w	r3, [r5], #4
 800254e:	4798      	blx	r3
 8002550:	3601      	adds	r6, #1
 8002552:	e7f2      	b.n	800253a <__libc_init_array+0x1e>
 8002554:	080025a4 	.word	0x080025a4
 8002558:	080025a4 	.word	0x080025a4
 800255c:	080025a4 	.word	0x080025a4
 8002560:	080025a8 	.word	0x080025a8

08002564 <memset>:
 8002564:	4402      	add	r2, r0
 8002566:	4603      	mov	r3, r0
 8002568:	4293      	cmp	r3, r2
 800256a:	d100      	bne.n	800256e <memset+0xa>
 800256c:	4770      	bx	lr
 800256e:	f803 1b01 	strb.w	r1, [r3], #1
 8002572:	e7f9      	b.n	8002568 <memset+0x4>

08002574 <_init>:
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002576:	bf00      	nop
 8002578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257a:	bc08      	pop	{r3}
 800257c:	469e      	mov	lr, r3
 800257e:	4770      	bx	lr

08002580 <_fini>:
 8002580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002582:	bf00      	nop
 8002584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002586:	bc08      	pop	{r3}
 8002588:	469e      	mov	lr, r3
 800258a:	4770      	bx	lr
